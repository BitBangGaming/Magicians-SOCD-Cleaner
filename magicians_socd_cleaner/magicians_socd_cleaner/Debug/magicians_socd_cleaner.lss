
magicians_socd_cleaner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000009bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000948  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000009bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200c  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004b7  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0a  00000000  00000000  000030af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  00003bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067f  00000000  00000000  00003f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023a7  00000000  00000000  000045a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000694a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  68:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  6c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  70:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	e8 e4       	ldi	r30, 0x48	; 72
  88:	f9 e0       	ldi	r31, 0x09	; 9
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a0 30       	cpi	r26, 0x00	; 0
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a6 30       	cpi	r26, 0x06	; 6
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <main>
  aa:	0c 94 a2 04 	jmp	0x944	; 0x944 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <CleanerCustom0>:
				DirectionReleaseUp(ModeSwitchesOrientation());
				CleanerDirectionState = NEUTRAL_TETRIS;
			}
			else if ( (tempRightState == 0) )
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	d8 2f       	mov	r29, r24
				DirectionPressRight(ModeSwitchesOrientation());
  b8:	c6 2f       	mov	r28, r22
  ba:	41 11       	cpse	r20, r1
  bc:	15 c0       	rjmp	.+42     	; 0xe8 <CleanerCustom0+0x36>
  be:	81 11       	cpse	r24, r1
				CleanerDirectionState = LEFT_LOST_TETRIS;
  c0:	2a c0       	rjmp	.+84     	; 0x116 <CleanerCustom0+0x64>
  c2:	21 11       	cpse	r18, r1
  c4:	0e c2       	rjmp	.+1052   	; 0x4e2 <CleanerCustom0+0x430>
  c6:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			}
			else if ( (tempUpState == 0) )
  ca:	0e 94 27 03 	call	0x64e	; 0x64e <DirectionReleaseLeft>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
  ce:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
  d2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DirectionReleaseRight>
				DirectionPressUp(ModeSwitchesOrientation());
  d6:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
  da:	0e 94 4c 03 	call	0x698	; 0x698 <DirectionPressDown>
				CleanerDirectionState = LEFT_LOST_TETRIS;
  de:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
  e2:	0e 94 bb 03 	call	0x776	; 0x776 <DirectionReleaseUp>
			}
			else if ( (tempDownState == 0) )
  e6:	29 c2       	rjmp	.+1106   	; 0x53a <__stack+0x3b>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
  e8:	81 11       	cpse	r24, r1
  ea:	15 c0       	rjmp	.+42     	; 0x116 <CleanerCustom0+0x64>
  ec:	21 11       	cpse	r18, r1
  ee:	f6 c1       	rjmp	.+1004   	; 0x4dc <CleanerCustom0+0x42a>
				DirectionPressDown(ModeSwitchesOrientation());
  f0:	61 11       	cpse	r22, r1
  f2:	fb c1       	rjmp	.+1014   	; 0x4ea <CleanerCustom0+0x438>
  f4:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
				CleanerDirectionState = LEFT_LOST_TETRIS;
  f8:	0e 94 27 03 	call	0x64e	; 0x64e <DirectionReleaseLeft>
  fc:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			}
		//}
		break;
		//-----------------------------------------------------------------
		case LEFT_LOST_TETRIS:
		if ( (tempLeftState == 0) && (tempRightState > 0) && (tempDownState > 0) && (tempUpState > 0) )
 100:	0e 94 b8 02 	call	0x570	; 0x570 <DirectionPressRight>
 104:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 108:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DirectionReleaseDown>
 10c:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
		{
			DirectionReleaseRight(ModeSwitchesOrientation());
 110:	0e 94 bb 03 	call	0x776	; 0x776 <DirectionReleaseUp>
 114:	12 c2       	rjmp	.+1060   	; 0x53a <__stack+0x3b>
 116:	21 11       	cpse	r18, r1
			DirectionReleaseDown(ModeSwitchesOrientation());
 118:	15 c0       	rjmp	.+42     	; 0x144 <CleanerCustom0+0x92>
 11a:	c1 11       	cpse	r28, r1
 11c:	fa c1       	rjmp	.+1012   	; 0x512 <__stack+0x13>
 11e:	41 11       	cpse	r20, r1
			DirectionReleaseUp(ModeSwitchesOrientation());
 120:	e4 c1       	rjmp	.+968    	; 0x4ea <CleanerCustom0+0x438>
 122:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 126:	0e 94 27 03 	call	0x64e	; 0x64e <DirectionReleaseLeft>
			DirectionPressLeft(ModeSwitchesOrientation());
 12a:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 12e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DirectionReleaseRight>
			CleanerDirectionState = LEFT_TETRIS;
 132:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 136:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DirectionReleaseDown>
		}
		else if ( (tempRightState == 0) )
 13a:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
		{
			CleanerDirectionState = RIGHT_TETRIS;
 13e:	0e 94 96 03 	call	0x72c	; 0x72c <DirectionPressUp>
			while( (DirectionGetLeftState() == 0) && (DirectionGetRightState() == 0) ){}
 142:	fb c1       	rjmp	.+1014   	; 0x53a <__stack+0x3b>
 144:	c1 11       	cpse	r28, r1
 146:	15 c0       	rjmp	.+42     	; 0x172 <CleanerCustom0+0xc0>
 148:	41 11       	cpse	r20, r1
 14a:	a0 c1       	rjmp	.+832    	; 0x48c <CleanerCustom0+0x3da>
 14c:	d1 11       	cpse	r29, r1
 14e:	b2 c1       	rjmp	.+868    	; 0x4b4 <CleanerCustom0+0x402>
 150:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
		}
		else if ( (tempDownState == 0) )
 154:	0e 94 02 03 	call	0x604	; 0x604 <DirectionPressLeft>
		{
			CleanerDirectionState = DOWN_TETRIS;
 158:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 15c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DirectionReleaseRight>
			while( (DirectionGetLeftState() == 0) && (DirectionGetDownState() == 0) ){}
 160:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 164:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DirectionReleaseDown>
 168:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 16c:	0e 94 bb 03 	call	0x776	; 0x776 <DirectionReleaseUp>
		}
		else if ( (tempUpState == 0) )
 170:	e4 c1       	rjmp	.+968    	; 0x53a <__stack+0x3b>
 172:	90 91 01 01 	lds	r25, 0x0101
		{
			CleanerDirectionState = UP_TETRIS;
 176:	92 30       	cpi	r25, 0x02	; 2
 178:	09 f4       	brne	.+2      	; 0x17c <CleanerCustom0+0xca>
			while( (DirectionGetLeftState() == 0) && (DirectionGetUpState() == 0) ){}
 17a:	4f c0       	rjmp	.+158    	; 0x21a <CleanerCustom0+0x168>
 17c:	28 f4       	brcc	.+10     	; 0x188 <CleanerCustom0+0xd6>
 17e:	99 23       	and	r25, r25
 180:	51 f0       	breq	.+20     	; 0x196 <CleanerCustom0+0xe4>
 182:	91 30       	cpi	r25, 0x01	; 1
 184:	39 f1       	breq	.+78     	; 0x1d4 <CleanerCustom0+0x122>
 186:	bb c0       	rjmp	.+374    	; 0x2fe <CleanerCustom0+0x24c>
 188:	93 30       	cpi	r25, 0x03	; 3
 18a:	09 f4       	brne	.+2      	; 0x18e <CleanerCustom0+0xdc>
		break;
		//-----------------------------------------------------------------
		case RIGHT_TETRIS:
		//if ( (tempLeftState + tempRightState + tempDownState + tempUpState) > 2 )
		//{
			if ( (tempLeftState > 0) && (tempRightState > 0) && (tempDownState > 0) && (tempUpState > 0) )
 18c:	6e c0       	rjmp	.+220    	; 0x26a <CleanerCustom0+0x1b8>
 18e:	94 30       	cpi	r25, 0x04	; 4
 190:	09 f4       	brne	.+2      	; 0x194 <CleanerCustom0+0xe2>
 192:	8e c0       	rjmp	.+284    	; 0x2b0 <CleanerCustom0+0x1fe>
 194:	b4 c0       	rjmp	.+360    	; 0x2fe <CleanerCustom0+0x24c>
 196:	41 11       	cpse	r20, r1
 198:	08 c0       	rjmp	.+16     	; 0x1aa <CleanerCustom0+0xf8>
 19a:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 19e:	0e 94 02 03 	call	0x604	; 0x604 <DirectionPressLeft>
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 01 01 	sts	0x0101, r24
				DirectionReleaseRight(ModeSwitchesOrientation());
 1a8:	aa c0       	rjmp	.+340    	; 0x2fe <CleanerCustom0+0x24c>
 1aa:	21 11       	cpse	r18, r1
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <CleanerCustom0+0x10c>
				DirectionReleaseDown(ModeSwitchesOrientation());
 1ae:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 1b2:	0e 94 b8 02 	call	0x570	; 0x570 <DirectionPressRight>
				DirectionReleaseUp(ModeSwitchesOrientation());
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	80 93 01 01 	sts	0x0101, r24
 1bc:	a0 c0       	rjmp	.+320    	; 0x2fe <CleanerCustom0+0x24c>
				CleanerDirectionState = NEUTRAL_TETRIS;
 1be:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 1c2:	0e 94 27 03 	call	0x64e	; 0x64e <DirectionReleaseLeft>
			}
			else if ( (tempLeftState == 0) )
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 1c6:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 1ca:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DirectionReleaseRight>
				DirectionPressLeft(ModeSwitchesOrientation());
 1ce:	10 92 01 01 	sts	0x0101, r1
 1d2:	95 c0       	rjmp	.+298    	; 0x2fe <CleanerCustom0+0x24c>
 1d4:	44 23       	and	r20, r20
				CleanerDirectionState = RIGHT_LOST_TETRIS;
 1d6:	39 f0       	breq	.+14     	; 0x1e6 <CleanerCustom0+0x134>
 1d8:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 1dc:	0e 94 27 03 	call	0x64e	; 0x64e <DirectionReleaseLeft>
			}
			else if ( (tempUpState == 0) )
 1e0:	10 92 01 01 	sts	0x0101, r1
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 1e4:	8c c0       	rjmp	.+280    	; 0x2fe <CleanerCustom0+0x24c>
 1e6:	21 11       	cpse	r18, r1
 1e8:	0c c0       	rjmp	.+24     	; 0x202 <CleanerCustom0+0x150>
				DirectionPressUp(ModeSwitchesOrientation());
 1ea:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 1ee:	0e 94 27 03 	call	0x64e	; 0x64e <DirectionReleaseLeft>
				CleanerDirectionState = RIGHT_LOST_TETRIS;
 1f2:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 1f6:	0e 94 b8 02 	call	0x570	; 0x570 <DirectionPressRight>
			}
			else if ( (tempDownState == 0) )
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	80 93 01 01 	sts	0x0101, r24
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 200:	7e c0       	rjmp	.+252    	; 0x2fe <CleanerCustom0+0x24c>
 202:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
				DirectionPressDown(ModeSwitchesOrientation());
 206:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DirectionReleaseRight>
 20a:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
				CleanerDirectionState = RIGHT_LOST_TETRIS;
 20e:	0e 94 02 03 	call	0x604	; 0x604 <DirectionPressLeft>
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 01 01 	sts	0x0101, r24
			}
		//}
		break;
		//-----------------------------------------------------------------
		case RIGHT_LOST_TETRIS:
		if ( (tempLeftState > 0) && (tempRightState == 0) && (tempDownState > 0) && (tempUpState > 0) )
 218:	72 c0       	rjmp	.+228    	; 0x2fe <CleanerCustom0+0x24c>
 21a:	44 23       	and	r20, r20
 21c:	61 f0       	breq	.+24     	; 0x236 <CleanerCustom0+0x184>
 21e:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 222:	0e 94 27 03 	call	0x64e	; 0x64e <DirectionReleaseLeft>
		{
			DirectionReleaseLeft(ModeSwitchesOrientation());
 226:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 22a:	0e 94 b8 02 	call	0x570	; 0x570 <DirectionPressRight>
			DirectionReleaseDown(ModeSwitchesOrientation());
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	80 93 01 01 	sts	0x0101, r24
 234:	64 c0       	rjmp	.+200    	; 0x2fe <CleanerCustom0+0x24c>
			DirectionReleaseUp(ModeSwitchesOrientation());
 236:	22 23       	and	r18, r18
 238:	61 f0       	breq	.+24     	; 0x252 <CleanerCustom0+0x1a0>
 23a:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			DirectionPressRight(ModeSwitchesOrientation());
 23e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DirectionReleaseRight>
 242:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			CleanerDirectionState = RIGHT_TETRIS;
 246:	0e 94 02 03 	call	0x604	; 0x604 <DirectionPressLeft>
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 01 01 	sts	0x0101, r24
		}
		else if ( (tempLeftState == 0) )
		{
			CleanerDirectionState = LEFT_TETRIS;
 250:	56 c0       	rjmp	.+172    	; 0x2fe <CleanerCustom0+0x24c>
 252:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			while( (DirectionGetRightState() == 0) && (DirectionGetLeftState() == 0) ){}
 256:	0e 94 27 03 	call	0x64e	; 0x64e <DirectionReleaseLeft>
 25a:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 25e:	0e 94 b8 02 	call	0x570	; 0x570 <DirectionPressRight>
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	80 93 01 01 	sts	0x0101, r24
		}
		else if ( (tempDownState == 0) )
 268:	4a c0       	rjmp	.+148    	; 0x2fe <CleanerCustom0+0x24c>
		{
			CleanerDirectionState = DOWN_TETRIS;
 26a:	22 23       	and	r18, r18
 26c:	39 f0       	breq	.+14     	; 0x27c <CleanerCustom0+0x1ca>
 26e:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			while( (DirectionGetRightState() == 0) && (DirectionGetDownState() == 0) ){}
 272:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DirectionReleaseRight>
 276:	10 92 01 01 	sts	0x0101, r1
 27a:	41 c0       	rjmp	.+130    	; 0x2fe <CleanerCustom0+0x24c>
 27c:	41 11       	cpse	r20, r1
 27e:	0c c0       	rjmp	.+24     	; 0x298 <CleanerCustom0+0x1e6>
 280:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
		}
		else if ( (tempUpState == 0) )
 284:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DirectionReleaseRight>
		{
			CleanerDirectionState = UP_TETRIS;
 288:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			while( (DirectionGetRightState() == 0) && (DirectionGetUpState() == 0) ){}
 28c:	0e 94 02 03 	call	0x604	; 0x604 <DirectionPressLeft>
 290:	84 e0       	ldi	r24, 0x04	; 4
 292:	80 93 01 01 	sts	0x0101, r24
 296:	33 c0       	rjmp	.+102    	; 0x2fe <CleanerCustom0+0x24c>
 298:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 29c:	0e 94 27 03 	call	0x64e	; 0x64e <DirectionReleaseLeft>
		break;
		//-----------------------------------------------------------------
		case DOWN_TETRIS:
		//if ( (tempLeftState + tempRightState + tempDownState + tempUpState) > 2 )
		//{
			if ( (tempLeftState > 0) && (tempRightState > 0) && (tempDownState > 0) && (tempUpState > 0) )
 2a0:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 2a4:	0e 94 b8 02 	call	0x570	; 0x570 <DirectionPressRight>
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	80 93 01 01 	sts	0x0101, r24
 2ae:	27 c0       	rjmp	.+78     	; 0x2fe <CleanerCustom0+0x24c>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 2b0:	22 23       	and	r18, r18
 2b2:	61 f0       	breq	.+24     	; 0x2cc <CleanerCustom0+0x21a>
 2b4:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
				DirectionReleaseRight(ModeSwitchesOrientation());
 2b8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DirectionReleaseRight>
 2bc:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
				DirectionReleaseDown(ModeSwitchesOrientation());
 2c0:	0e 94 02 03 	call	0x604	; 0x604 <DirectionPressLeft>
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 01 01 	sts	0x0101, r24
				DirectionReleaseUp(ModeSwitchesOrientation());
 2ca:	19 c0       	rjmp	.+50     	; 0x2fe <CleanerCustom0+0x24c>
 2cc:	44 23       	and	r20, r20
 2ce:	61 f0       	breq	.+24     	; 0x2e8 <CleanerCustom0+0x236>
				CleanerDirectionState = NEUTRAL_TETRIS;
 2d0:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 2d4:	0e 94 27 03 	call	0x64e	; 0x64e <DirectionReleaseLeft>
			}
			else if ( (tempRightState == 0) )
 2d8:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 2dc:	0e 94 b8 02 	call	0x570	; 0x570 <DirectionPressRight>
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	80 93 01 01 	sts	0x0101, r24
				DirectionPressRight(ModeSwitchesOrientation());
 2e6:	0b c0       	rjmp	.+22     	; 0x2fe <CleanerCustom0+0x24c>
 2e8:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
				CleanerDirectionState = DOWN_LOST_TETRIS;
 2ec:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DirectionReleaseRight>
 2f0:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			}
			else if ( (tempUpState == 0) )
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 2f4:	0e 94 02 03 	call	0x604	; 0x604 <DirectionPressLeft>
 2f8:	84 e0       	ldi	r24, 0x04	; 4
 2fa:	80 93 01 01 	sts	0x0101, r24
				DirectionPressUp(ModeSwitchesOrientation());
 2fe:	90 91 00 01 	lds	r25, 0x0100
 302:	92 30       	cpi	r25, 0x02	; 2
				CleanerDirectionState = DOWN_LOST_TETRIS;
 304:	09 f4       	brne	.+2      	; 0x308 <CleanerCustom0+0x256>
 306:	4f c0       	rjmp	.+158    	; 0x3a6 <CleanerCustom0+0x2f4>
 308:	28 f4       	brcc	.+10     	; 0x314 <CleanerCustom0+0x262>
 30a:	99 23       	and	r25, r25
			}
			else if ( (tempLeftState == 0) )
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 30c:	51 f0       	breq	.+20     	; 0x322 <CleanerCustom0+0x270>
 30e:	91 30       	cpi	r25, 0x01	; 1
 310:	39 f1       	breq	.+78     	; 0x360 <CleanerCustom0+0x2ae>
 312:	13 c1       	rjmp	.+550    	; 0x53a <__stack+0x3b>
				DirectionPressLeft(ModeSwitchesOrientation());
 314:	93 30       	cpi	r25, 0x03	; 3
 316:	09 f4       	brne	.+2      	; 0x31a <CleanerCustom0+0x268>
 318:	6e c0       	rjmp	.+220    	; 0x3f6 <CleanerCustom0+0x344>
 31a:	94 30       	cpi	r25, 0x04	; 4
				CleanerDirectionState = DOWN_LOST_TETRIS;
 31c:	09 f4       	brne	.+2      	; 0x320 <CleanerCustom0+0x26e>
 31e:	8e c0       	rjmp	.+284    	; 0x43c <CleanerCustom0+0x38a>
 320:	0c c1       	rjmp	.+536    	; 0x53a <__stack+0x3b>
 322:	d1 11       	cpse	r29, r1
			}
		//}
		break;
		//-----------------------------------------------------------------
		case DOWN_LOST_TETRIS:
		if ( (tempLeftState > 0) && (tempRightState > 0) && (tempDownState == 0) && (tempUpState > 0) )
 324:	08 c0       	rjmp	.+16     	; 0x336 <CleanerCustom0+0x284>
 326:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 32a:	0e 94 4c 03 	call	0x698	; 0x698 <DirectionPressDown>
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	80 93 00 01 	sts	0x0100, r24
 334:	02 c1       	rjmp	.+516    	; 0x53a <__stack+0x3b>
		{
			DirectionReleaseRight(ModeSwitchesOrientation());
 336:	c1 11       	cpse	r28, r1
 338:	08 c0       	rjmp	.+16     	; 0x34a <CleanerCustom0+0x298>
 33a:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			DirectionReleaseLeft(ModeSwitchesOrientation());
 33e:	0e 94 96 03 	call	0x72c	; 0x72c <DirectionPressUp>
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	80 93 00 01 	sts	0x0100, r24
			DirectionReleaseUp(ModeSwitchesOrientation());
 348:	f8 c0       	rjmp	.+496    	; 0x53a <__stack+0x3b>
 34a:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			DirectionPressDown(ModeSwitchesOrientation());
 34e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DirectionReleaseDown>
 352:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			CleanerDirectionState = DOWN_TETRIS;
 356:	0e 94 bb 03 	call	0x776	; 0x776 <DirectionReleaseUp>
 35a:	10 92 00 01 	sts	0x0100, r1
		}
		else if ( (tempRightState == 0) )
		{
			CleanerDirectionState = RIGHT_TETRIS;
 35e:	ed c0       	rjmp	.+474    	; 0x53a <__stack+0x3b>
 360:	dd 23       	and	r29, r29
 362:	39 f0       	breq	.+14     	; 0x372 <CleanerCustom0+0x2c0>
			while( (DirectionGetDownState() == 0) && (DirectionGetRightState() == 0) ){}
 364:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 368:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DirectionReleaseDown>
 36c:	10 92 00 01 	sts	0x0100, r1
 370:	e4 c0       	rjmp	.+456    	; 0x53a <__stack+0x3b>
 372:	c1 11       	cpse	r28, r1
 374:	0c c0       	rjmp	.+24     	; 0x38e <CleanerCustom0+0x2dc>
		}
		else if ( (tempLeftState == 0) )
		{
			CleanerDirectionState = LEFT_TETRIS;
 376:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 37a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DirectionReleaseDown>
			while( (DirectionGetDownState() == 0) && (DirectionGetLeftState() == 0) ){}
 37e:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 382:	0e 94 96 03 	call	0x72c	; 0x72c <DirectionPressUp>
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	80 93 00 01 	sts	0x0100, r24
 38c:	d6 c0       	rjmp	.+428    	; 0x53a <__stack+0x3b>
		}
		else if ( (tempUpState == 0) )
 38e:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
		{
			CleanerDirectionState = UP_TETRIS;
 392:	0e 94 bb 03 	call	0x776	; 0x776 <DirectionReleaseUp>
 396:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			while( (DirectionGetDownState() == 0) && (DirectionGetUpState() == 0) ){}
 39a:	0e 94 4c 03 	call	0x698	; 0x698 <DirectionPressDown>
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	80 93 00 01 	sts	0x0100, r24
 3a4:	ca c0       	rjmp	.+404    	; 0x53a <__stack+0x3b>
 3a6:	dd 23       	and	r29, r29
 3a8:	61 f0       	breq	.+24     	; 0x3c2 <CleanerCustom0+0x310>
		break;
		//-----------------------------------------------------------------
		case UP_TETRIS:
		//if ( (tempLeftState + tempRightState + tempDownState + tempUpState) > 2 )
		//{
			if ( (tempLeftState > 0) && (tempRightState > 0) && (tempDownState > 0) && (tempUpState > 0) )
 3aa:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 3ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DirectionReleaseDown>
 3b2:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 3b6:	0e 94 96 03 	call	0x72c	; 0x72c <DirectionPressUp>
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	80 93 00 01 	sts	0x0100, r24
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 3c0:	bc c0       	rjmp	.+376    	; 0x53a <__stack+0x3b>
 3c2:	cc 23       	and	r28, r28
 3c4:	61 f0       	breq	.+24     	; 0x3de <CleanerCustom0+0x32c>
				DirectionReleaseRight(ModeSwitchesOrientation());
 3c6:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 3ca:	0e 94 bb 03 	call	0x776	; 0x776 <DirectionReleaseUp>
				DirectionReleaseDown(ModeSwitchesOrientation());
 3ce:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 3d2:	0e 94 4c 03 	call	0x698	; 0x698 <DirectionPressDown>
				DirectionReleaseUp(ModeSwitchesOrientation());
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 00 01 	sts	0x0100, r24
 3dc:	ae c0       	rjmp	.+348    	; 0x53a <__stack+0x3b>
				CleanerDirectionState = NEUTRAL_TETRIS;
 3de:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 3e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DirectionReleaseDown>
			}
			else if ( (tempRightState == 0) )
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 3e6:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 3ea:	0e 94 96 03 	call	0x72c	; 0x72c <DirectionPressUp>
				DirectionPressRight(ModeSwitchesOrientation());
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	80 93 00 01 	sts	0x0100, r24
 3f4:	a2 c0       	rjmp	.+324    	; 0x53a <__stack+0x3b>
				CleanerDirectionState = UP_LOST_TETRIS;
 3f6:	cc 23       	and	r28, r28
 3f8:	39 f0       	breq	.+14     	; 0x408 <CleanerCustom0+0x356>
 3fa:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			}
			else if ( (tempLeftState == 0) )
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 3fe:	0e 94 bb 03 	call	0x776	; 0x776 <DirectionReleaseUp>
 402:	10 92 00 01 	sts	0x0100, r1
				DirectionPressLeft(ModeSwitchesOrientation());
 406:	99 c0       	rjmp	.+306    	; 0x53a <__stack+0x3b>
 408:	d1 11       	cpse	r29, r1
 40a:	0c c0       	rjmp	.+24     	; 0x424 <CleanerCustom0+0x372>
 40c:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
				CleanerDirectionState = UP_LOST_TETRIS;
 410:	0e 94 bb 03 	call	0x776	; 0x776 <DirectionReleaseUp>
 414:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			}
			else if ( (tempDownState == 0) )
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 418:	0e 94 4c 03 	call	0x698	; 0x698 <DirectionPressDown>
 41c:	84 e0       	ldi	r24, 0x04	; 4
				DirectionPressDown(ModeSwitchesOrientation());
 41e:	80 93 00 01 	sts	0x0100, r24
 422:	8b c0       	rjmp	.+278    	; 0x53a <__stack+0x3b>
 424:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
				CleanerDirectionState = UP_LOST_TETRIS;
 428:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DirectionReleaseDown>
 42c:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			}
		//}
		break;
		//-----------------------------------------------------------------
		case UP_LOST_TETRIS:
		if ( (tempLeftState > 0) && (tempRightState > 0) && (tempDownState > 0) && (tempUpState == 0) )
 430:	0e 94 96 03 	call	0x72c	; 0x72c <DirectionPressUp>
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	80 93 00 01 	sts	0x0100, r24
 43a:	7f c0       	rjmp	.+254    	; 0x53a <__stack+0x3b>
 43c:	cc 23       	and	r28, r28
		{
			DirectionReleaseRight(ModeSwitchesOrientation());
 43e:	61 f0       	breq	.+24     	; 0x458 <CleanerCustom0+0x3a6>
 440:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 444:	0e 94 bb 03 	call	0x776	; 0x776 <DirectionReleaseUp>
			DirectionReleaseDown(ModeSwitchesOrientation());
 448:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 44c:	0e 94 4c 03 	call	0x698	; 0x698 <DirectionPressDown>
			DirectionReleaseUp(ModeSwitchesOrientation());
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	80 93 00 01 	sts	0x0100, r24
			DirectionPressLeft(ModeSwitchesOrientation());
 456:	71 c0       	rjmp	.+226    	; 0x53a <__stack+0x3b>
 458:	dd 23       	and	r29, r29
 45a:	61 f0       	breq	.+24     	; 0x474 <CleanerCustom0+0x3c2>
 45c:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
			CleanerDirectionState = UP_TETRIS;
 460:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DirectionReleaseDown>
 464:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
		}
		else if ( (tempRightState == 0) )
 468:	0e 94 96 03 	call	0x72c	; 0x72c <DirectionPressUp>
		{
			CleanerDirectionState = RIGHT_TETRIS;
 46c:	83 e0       	ldi	r24, 0x03	; 3
 46e:	80 93 00 01 	sts	0x0100, r24
			while( (DirectionGetUpState() == 0) && (DirectionGetRightState() == 0) ){}
 472:	63 c0       	rjmp	.+198    	; 0x53a <__stack+0x3b>
 474:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 478:	0e 94 bb 03 	call	0x776	; 0x776 <DirectionReleaseUp>
 47c:	0e 94 a0 02 	call	0x540	; 0x540 <ModeSwitchesOrientation>
 480:	0e 94 4c 03 	call	0x698	; 0x698 <DirectionPressDown>
		}
		else if ( (tempDownState == 0) )
 484:	84 e0       	ldi	r24, 0x04	; 4
		{
			CleanerDirectionState = DOWN_TETRIS;
 486:	80 93 00 01 	sts	0x0100, r24
 48a:	57 c0       	rjmp	.+174    	; 0x53a <__stack+0x3b>
			while( (DirectionGetUpState() == 0) && (DirectionGetDownState() == 0) ){}
 48c:	80 91 01 01 	lds	r24, 0x0101
 490:	82 30       	cpi	r24, 0x02	; 2
 492:	09 f4       	brne	.+2      	; 0x496 <CleanerCustom0+0x3e4>
 494:	c2 ce       	rjmp	.-636    	; 0x21a <CleanerCustom0+0x168>
 496:	38 f4       	brcc	.+14     	; 0x4a6 <CleanerCustom0+0x3f4>
 498:	88 23       	and	r24, r24
 49a:	09 f4       	brne	.+2      	; 0x49e <CleanerCustom0+0x3ec>
 49c:	86 ce       	rjmp	.-756    	; 0x1aa <CleanerCustom0+0xf8>
		}
		else if ( (tempLeftState == 0) )
		{
			CleanerDirectionState = LEFT_TETRIS;
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <CleanerCustom0+0x3f2>
 4a2:	98 ce       	rjmp	.-720    	; 0x1d4 <CleanerCustom0+0x122>
			while( (DirectionGetUpState() == 0) && (DirectionGetLeftState() == 0) ){}
 4a4:	2c cf       	rjmp	.-424    	; 0x2fe <CleanerCustom0+0x24c>
 4a6:	83 30       	cpi	r24, 0x03	; 3
 4a8:	09 f4       	brne	.+2      	; 0x4ac <CleanerCustom0+0x3fa>
 4aa:	df ce       	rjmp	.-578    	; 0x26a <CleanerCustom0+0x1b8>
 4ac:	84 30       	cpi	r24, 0x04	; 4
 4ae:	09 f4       	brne	.+2      	; 0x4b2 <CleanerCustom0+0x400>
 4b0:	ff ce       	rjmp	.-514    	; 0x2b0 <CleanerCustom0+0x1fe>
 4b2:	25 cf       	rjmp	.-438    	; 0x2fe <CleanerCustom0+0x24c>
 4b4:	80 91 01 01 	lds	r24, 0x0101
			DirectionReleaseLeft(ModeSwitchesOrientation());
			DirectionReleaseUp(ModeSwitchesOrientation());
			DirectionPressDown(ModeSwitchesOrientation());
			CleanerDirectionState = DOWN_TETRIS;
		}
		else if ( (tempRightState == 0) )
 4b8:	82 30       	cpi	r24, 0x02	; 2
 4ba:	09 f4       	brne	.+2      	; 0x4be <CleanerCustom0+0x40c>
				DirectionReleaseRight(ModeSwitchesOrientation());
				DirectionReleaseDown(ModeSwitchesOrientation());
				DirectionReleaseUp(ModeSwitchesOrientation());
				CleanerDirectionState = NEUTRAL_TETRIS;
			}
			else if ( (tempRightState == 0) )
 4bc:	ae ce       	rjmp	.-676    	; 0x21a <CleanerCustom0+0x168>
 4be:	38 f4       	brcc	.+14     	; 0x4ce <CleanerCustom0+0x41c>
 4c0:	88 23       	and	r24, r24
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
				DirectionPressRight(ModeSwitchesOrientation());
				CleanerDirectionState = LEFT_LOST_TETRIS;
			}
			else if ( (tempUpState == 0) )
 4c2:	09 f4       	brne	.+2      	; 0x4c6 <CleanerCustom0+0x414>
 4c4:	6a ce       	rjmp	.-812    	; 0x19a <CleanerCustom0+0xe8>
 4c6:	81 30       	cpi	r24, 0x01	; 1
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
				DirectionPressLeft(ModeSwitchesOrientation());
				CleanerDirectionState = RIGHT_LOST_TETRIS;
			}
			else if ( (tempUpState == 0) )
 4c8:	09 f4       	brne	.+2      	; 0x4cc <CleanerCustom0+0x41a>
 4ca:	84 ce       	rjmp	.-760    	; 0x1d4 <CleanerCustom0+0x122>
 4cc:	18 cf       	rjmp	.-464    	; 0x2fe <CleanerCustom0+0x24c>
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
				DirectionPressRight(ModeSwitchesOrientation());
				CleanerDirectionState = DOWN_LOST_TETRIS;
			}
			else if ( (tempUpState == 0) )
 4ce:	83 30       	cpi	r24, 0x03	; 3
 4d0:	09 f4       	brne	.+2      	; 0x4d4 <CleanerCustom0+0x422>
 4d2:	cb ce       	rjmp	.-618    	; 0x26a <CleanerCustom0+0x1b8>
 4d4:	84 30       	cpi	r24, 0x04	; 4
 4d6:	09 f4       	brne	.+2      	; 0x4da <CleanerCustom0+0x428>
 4d8:	eb ce       	rjmp	.-554    	; 0x2b0 <CleanerCustom0+0x1fe>
		{
			// leave outputs as they were when entering state
		}
		break;
	}
}
 4da:	11 cf       	rjmp	.-478    	; 0x2fe <CleanerCustom0+0x24c>
 4dc:	66 23       	and	r22, r22
 4de:	b1 f2       	breq	.-84     	; 0x48c <CleanerCustom0+0x3da>
		DirectionReleaseLeft(ModeSwitchesOrientation());
		DirectionReleaseRight(ModeSwitchesOrientation());
		DirectionReleaseDown(ModeSwitchesOrientation());
		DirectionPressUp(ModeSwitchesOrientation());
	}
	else if( (tempUpState == 0) && (tempLeftState == 0) && (tempDownState == 0) )
 4e0:	48 ce       	rjmp	.-880    	; 0x172 <CleanerCustom0+0xc0>
 4e2:	66 23       	and	r22, r22
 4e4:	09 f4       	brne	.+2      	; 0x4e8 <CleanerCustom0+0x436>
 4e6:	34 ce       	rjmp	.-920    	; 0x150 <CleanerCustom0+0x9e>
 4e8:	44 ce       	rjmp	.-888    	; 0x172 <CleanerCustom0+0xc0>
		DirectionReleaseUp(ModeSwitchesOrientation());
	}
	else
	{	
		// SOCD Clean Left and Right = Last Input
		switch (CleanerXAxisState)
 4ea:	80 91 01 01 	lds	r24, 0x0101
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	09 f4       	brne	.+2      	; 0x4f4 <CleanerCustom0+0x442>
 4f2:	93 ce       	rjmp	.-730    	; 0x21a <CleanerCustom0+0x168>
 4f4:	38 f4       	brcc	.+14     	; 0x504 <__stack+0x5>
 4f6:	88 23       	and	r24, r24
 4f8:	09 f4       	brne	.+2      	; 0x4fc <CleanerCustom0+0x44a>
 4fa:	57 ce       	rjmp	.-850    	; 0x1aa <CleanerCustom0+0xf8>
 4fc:	81 30       	cpi	r24, 0x01	; 1
 4fe:	09 f4       	brne	.+2      	; 0x502 <__stack+0x3>
 500:	69 ce       	rjmp	.-814    	; 0x1d4 <CleanerCustom0+0x122>
 502:	fd ce       	rjmp	.-518    	; 0x2fe <CleanerCustom0+0x24c>
 504:	83 30       	cpi	r24, 0x03	; 3
 506:	09 f4       	brne	.+2      	; 0x50a <__stack+0xb>
 508:	b0 ce       	rjmp	.-672    	; 0x26a <CleanerCustom0+0x1b8>
 50a:	84 30       	cpi	r24, 0x04	; 4
 50c:	09 f4       	brne	.+2      	; 0x510 <__stack+0x11>
 50e:	d0 ce       	rjmp	.-608    	; 0x2b0 <CleanerCustom0+0x1fe>
 510:	f6 ce       	rjmp	.-532    	; 0x2fe <CleanerCustom0+0x24c>
 512:	80 91 01 01 	lds	r24, 0x0101
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	09 f4       	brne	.+2      	; 0x51c <__stack+0x1d>
 51a:	7f ce       	rjmp	.-770    	; 0x21a <CleanerCustom0+0x168>
 51c:	38 f4       	brcc	.+14     	; 0x52c <__stack+0x2d>
 51e:	88 23       	and	r24, r24
 520:	09 f4       	brne	.+2      	; 0x524 <__stack+0x25>
 522:	39 ce       	rjmp	.-910    	; 0x196 <CleanerCustom0+0xe4>
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	09 f4       	brne	.+2      	; 0x52a <__stack+0x2b>
 528:	55 ce       	rjmp	.-854    	; 0x1d4 <CleanerCustom0+0x122>
 52a:	e9 ce       	rjmp	.-558    	; 0x2fe <CleanerCustom0+0x24c>
 52c:	83 30       	cpi	r24, 0x03	; 3
 52e:	09 f4       	brne	.+2      	; 0x532 <__stack+0x33>
 530:	a5 ce       	rjmp	.-694    	; 0x27c <CleanerCustom0+0x1ca>
 532:	84 30       	cpi	r24, 0x04	; 4
 534:	09 f4       	brne	.+2      	; 0x538 <__stack+0x39>
 536:	bc ce       	rjmp	.-648    	; 0x2b0 <CleanerCustom0+0x1fe>
 538:	e2 ce       	rjmp	.-572    	; 0x2fe <CleanerCustom0+0x24c>
			
			default:
			break;
		}
	}
}
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <ModeSwitchesOrientation>:

uint8_t ModeSwitchesOrientation()
{
	// Decide mode for default OEM controller
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() > 0) )
 540:	49 9b       	sbis	0x09, 1	; 9
 542:	02 c0       	rjmp	.+4      	; 0x548 <ModeSwitchesOrientation+0x8>
 544:	4a 99       	sbic	0x09, 2	; 9
 546:	0a c0       	rjmp	.+20     	; 0x55c <ModeSwitchesOrientation+0x1c>
	{
		// Mode code for G  R  L  U  D on JST connector
		modeCode = 0;
	}
	else if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() == 0) )
 548:	49 9b       	sbis	0x09, 1	; 9
 54a:	02 c0       	rjmp	.+4      	; 0x550 <ModeSwitchesOrientation+0x10>
 54c:	4a 9b       	sbis	0x09, 2	; 9
 54e:	08 c0       	rjmp	.+16     	; 0x560 <ModeSwitchesOrientation+0x20>
	{
		// Mode code for G  L  R  D  U on JST connector
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip2Sw1() == 0) && (ModeSwitchesReadDip2Sw2() > 0) )
 550:	49 99       	sbic	0x09, 1	; 9
 552:	08 c0       	rjmp	.+16     	; 0x564 <ModeSwitchesOrientation+0x24>
 554:	4a 99       	sbic	0x09, 2	; 9
 556:	08 c0       	rjmp	.+16     	; 0x568 <ModeSwitchesOrientation+0x28>
		modeCode = 2;
	}
	else
	{
		// Mode code for future orientation
		modeCode = 3;
 558:	83 e0       	ldi	r24, 0x03	; 3
 55a:	08 95       	ret
	// Decide mode for default OEM controller
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() > 0) )
	{
		// Mode code for G  R  L  U  D on JST connector
		modeCode = 0;
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	08 95       	ret
	}
	else if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() == 0) )
	{
		// Mode code for G  L  R  D  U on JST connector
		modeCode = 1;
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	08 95       	ret
		modeCode = 2;
	}
	else
	{
		// Mode code for future orientation
		modeCode = 3;
 564:	83 e0       	ldi	r24, 0x03	; 3
 566:	08 95       	ret
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip2Sw1() == 0) && (ModeSwitchesReadDip2Sw2() > 0) )
	{
		// Mode code for G  R  U  L  D on JST connector
		modeCode = 2;
 568:	82 e0       	ldi	r24, 0x02	; 2
		// Mode code for future orientation
		modeCode = 3;
	}
	
	return modeCode;
 56a:	08 95       	ret

0000056c <DirectionPressRightLed>:
}

// LED Outputs
void DirectionPressRightLed()
{
	PORTD &= ~(1 << DIRECTION_RIGHT_LED);
 56c:	58 98       	cbi	0x0b, 0	; 11
 56e:	08 95       	ret

00000570 <DirectionPressRight>:
	}
	DirectionReleaseLeftLed();
}

void DirectionPressRight(uint8_t tempOrientation)
{
 570:	cf 93       	push	r28
 572:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 574:	88 e3       	ldi	r24, 0x38	; 56
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 88 04 	call	0x910	; 0x910 <eeprom_read_byte>
 57c:	80 93 02 01 	sts	0x0102, r24
	
	// Press right on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 580:	c1 11       	cpse	r28, r1
 582:	06 c0       	rjmp	.+12     	; 0x590 <DirectionPressRight+0x20>
	{
		// G  R  L  U  D on JST connector
		//DDRD |= (1 << DIRECTION_SW1_CLEAN);
		if(invertModeCode == 0)
 584:	81 11       	cpse	r24, r1
 586:	02 c0       	rjmp	.+4      	; 0x58c <DirectionPressRight+0x1c>
		{
			PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 588:	5b 98       	cbi	0x0b, 3	; 11
 58a:	11 c0       	rjmp	.+34     	; 0x5ae <DirectionPressRight+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW1_CLEAN);
 58c:	5b 9a       	sbi	0x0b, 3	; 11
 58e:	0f c0       	rjmp	.+30     	; 0x5ae <DirectionPressRight+0x3e>
		}
	}
	else if(tempOrientation == 1)
 590:	c1 30       	cpi	r28, 0x01	; 1
 592:	31 f4       	brne	.+12     	; 0x5a0 <DirectionPressRight+0x30>
	{
		// G  L  R  D  U on JST connector
		//DDRD |= (1 << DIRECTION_SW2_CLEAN);
		if(invertModeCode == 0)
 594:	81 11       	cpse	r24, r1
 596:	02 c0       	rjmp	.+4      	; 0x59c <DirectionPressRight+0x2c>
		{
			PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 598:	5c 98       	cbi	0x0b, 4	; 11
 59a:	09 c0       	rjmp	.+18     	; 0x5ae <DirectionPressRight+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW2_CLEAN);
 59c:	5c 9a       	sbi	0x0b, 4	; 11
 59e:	07 c0       	rjmp	.+14     	; 0x5ae <DirectionPressRight+0x3e>
		}
	}
	else if(tempOrientation == 2)
 5a0:	c2 30       	cpi	r28, 0x02	; 2
 5a2:	29 f4       	brne	.+10     	; 0x5ae <DirectionPressRight+0x3e>
	{
		// G  R  U  L  D on JST connector
		//DDRD |= (1 << DIRECTION_SW1_CLEAN);
		if(invertModeCode == 0)
 5a4:	81 11       	cpse	r24, r1
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DirectionPressRight+0x3c>
		{
			PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 5a8:	5b 98       	cbi	0x0b, 3	; 11
 5aa:	01 c0       	rjmp	.+2      	; 0x5ae <DirectionPressRight+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW1_CLEAN);
 5ac:	5b 9a       	sbi	0x0b, 3	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionPressRightLed();
 5ae:	0e 94 b6 02 	call	0x56c	; 0x56c <DirectionPressRightLed>
}
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <DirectionReleaseRightLed>:
	PORTD &= ~(1 << DIRECTION_RIGHT_LED);
}

void DirectionReleaseRightLed()
{
	PORTD |= (1 << DIRECTION_RIGHT_LED);
 5b6:	58 9a       	sbi	0x0b, 0	; 11
 5b8:	08 95       	ret

000005ba <DirectionReleaseRight>:
	}
	DirectionPressRightLed();
}

void DirectionReleaseRight(uint8_t tempOrientation)
{
 5ba:	cf 93       	push	r28
 5bc:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 5be:	88 e3       	ldi	r24, 0x38	; 56
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 88 04 	call	0x910	; 0x910 <eeprom_read_byte>
 5c6:	80 93 02 01 	sts	0x0102, r24
	
	// Release right on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 5ca:	c1 11       	cpse	r28, r1
 5cc:	06 c0       	rjmp	.+12     	; 0x5da <DirectionReleaseRight+0x20>
	{
		// G  R  L  U  D on JST connector
		if(invertModeCode == 0)
 5ce:	81 11       	cpse	r24, r1
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DirectionReleaseRight+0x1c>
		{
			PORTD |= (1 << DIRECTION_SW1_CLEAN);
 5d2:	5b 9a       	sbi	0x0b, 3	; 11
 5d4:	11 c0       	rjmp	.+34     	; 0x5f8 <DirectionReleaseRight+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW1_CLEAN);
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 5d6:	5b 98       	cbi	0x0b, 3	; 11
 5d8:	0f c0       	rjmp	.+30     	; 0x5f8 <DirectionReleaseRight+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW1_CLEAN);
		}
	}
	else if(tempOrientation == 1)
 5da:	c1 30       	cpi	r28, 0x01	; 1
 5dc:	31 f4       	brne	.+12     	; 0x5ea <DirectionReleaseRight+0x30>
	{
		// G  L  R  D  U on JST connector
		if(invertModeCode == 0)
 5de:	81 11       	cpse	r24, r1
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DirectionReleaseRight+0x2c>
		{
			PORTD |= (1 << DIRECTION_SW2_CLEAN);
 5e2:	5c 9a       	sbi	0x0b, 4	; 11
 5e4:	09 c0       	rjmp	.+18     	; 0x5f8 <DirectionReleaseRight+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW2_CLEAN);
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 5e6:	5c 98       	cbi	0x0b, 4	; 11
 5e8:	07 c0       	rjmp	.+14     	; 0x5f8 <DirectionReleaseRight+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW2_CLEAN);
		}
	}
	else if(tempOrientation == 2)
 5ea:	c2 30       	cpi	r28, 0x02	; 2
 5ec:	29 f4       	brne	.+10     	; 0x5f8 <DirectionReleaseRight+0x3e>
	{
		// G  R  U  L  D on JST connector
		if(invertModeCode == 0)
 5ee:	81 11       	cpse	r24, r1
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DirectionReleaseRight+0x3c>
		{
			PORTD |= (1 << DIRECTION_SW1_CLEAN);
 5f2:	5b 9a       	sbi	0x0b, 3	; 11
 5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <DirectionReleaseRight+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW1_CLEAN);
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 5f6:	5b 98       	cbi	0x0b, 3	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionReleaseRightLed();
 5f8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DirectionReleaseRightLed>
}
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <DirectionPressLeftLed>:
	PORTD |= (1 << DIRECTION_RIGHT_LED);
}

void DirectionPressLeftLed()
{
	PORTB &= ~(1 << DIRECTION_LEFT_LED);
 600:	2c 98       	cbi	0x05, 4	; 5
 602:	08 95       	ret

00000604 <DirectionPressLeft>:

/* Function Definitions */

// Setting Outputs
void DirectionPressLeft(uint8_t tempOrientation)
{
 604:	cf 93       	push	r28
 606:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 608:	88 e3       	ldi	r24, 0x38	; 56
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 88 04 	call	0x910	; 0x910 <eeprom_read_byte>
 610:	80 93 02 01 	sts	0x0102, r24
	
	// Press left on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 614:	c1 11       	cpse	r28, r1
 616:	06 c0       	rjmp	.+12     	; 0x624 <DirectionPressLeft+0x20>
	{
		// G  R  L  U  D on JST connector
		//DDRD |= (1 << DIRECTION_SW2_CLEAN);
		if(invertModeCode == 0)
 618:	81 11       	cpse	r24, r1
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DirectionPressLeft+0x1c>
		{
			PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 61c:	5c 98       	cbi	0x0b, 4	; 11
 61e:	11 c0       	rjmp	.+34     	; 0x642 <DirectionPressLeft+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW2_CLEAN);
 620:	5c 9a       	sbi	0x0b, 4	; 11
 622:	0f c0       	rjmp	.+30     	; 0x642 <DirectionPressLeft+0x3e>
		}
		
	}
	else if(tempOrientation == 1)
 624:	c1 30       	cpi	r28, 0x01	; 1
 626:	31 f4       	brne	.+12     	; 0x634 <DirectionPressLeft+0x30>
	{
		// G  L  R  D  U on JST connector
		//DDRD |= (1 << DIRECTION_SW1_CLEAN);
		if(invertModeCode == 0)
 628:	81 11       	cpse	r24, r1
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DirectionPressLeft+0x2c>
		{
			PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 62c:	5b 98       	cbi	0x0b, 3	; 11
 62e:	09 c0       	rjmp	.+18     	; 0x642 <DirectionPressLeft+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW1_CLEAN);
 630:	5b 9a       	sbi	0x0b, 3	; 11
 632:	07 c0       	rjmp	.+14     	; 0x642 <DirectionPressLeft+0x3e>
		}
	}
	else if(tempOrientation == 2)
 634:	c2 30       	cpi	r28, 0x02	; 2
 636:	29 f4       	brne	.+10     	; 0x642 <DirectionPressLeft+0x3e>
	{
		// G  R  U  L  D on JST connector
		//DDRD |= (1 << DIRECTION_SW3_CLEAN);
		if(invertModeCode == 0)
 638:	81 11       	cpse	r24, r1
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DirectionPressLeft+0x3c>
		{
			PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 63c:	5d 98       	cbi	0x0b, 5	; 11
 63e:	01 c0       	rjmp	.+2      	; 0x642 <DirectionPressLeft+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW3_CLEAN);
 640:	5d 9a       	sbi	0x0b, 5	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionPressLeftLed();
 642:	0e 94 00 03 	call	0x600	; 0x600 <DirectionPressLeftLed>
}
 646:	cf 91       	pop	r28
 648:	08 95       	ret

0000064a <DirectionReleaseLeftLed>:
	PORTB &= ~(1 << DIRECTION_LEFT_LED);
}

void DirectionReleaseLeftLed()
{
	PORTB |= (1 << DIRECTION_LEFT_LED);
 64a:	2c 9a       	sbi	0x05, 4	; 5
 64c:	08 95       	ret

0000064e <DirectionReleaseLeft>:
	}
	DirectionPressLeftLed();
}

void DirectionReleaseLeft(uint8_t tempOrientation)
{
 64e:	cf 93       	push	r28
 650:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 652:	88 e3       	ldi	r24, 0x38	; 56
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 88 04 	call	0x910	; 0x910 <eeprom_read_byte>
 65a:	80 93 02 01 	sts	0x0102, r24
	
	// Release left on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 65e:	c1 11       	cpse	r28, r1
 660:	06 c0       	rjmp	.+12     	; 0x66e <DirectionReleaseLeft+0x20>
	{
		// G  R  L  U  D on JST connector
		if(invertModeCode == 0)
 662:	81 11       	cpse	r24, r1
 664:	02 c0       	rjmp	.+4      	; 0x66a <DirectionReleaseLeft+0x1c>
		{
			PORTD |= (1 << DIRECTION_SW2_CLEAN);
 666:	5c 9a       	sbi	0x0b, 4	; 11
 668:	11 c0       	rjmp	.+34     	; 0x68c <DirectionReleaseLeft+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW2_CLEAN);
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 66a:	5c 98       	cbi	0x0b, 4	; 11
 66c:	0f c0       	rjmp	.+30     	; 0x68c <DirectionReleaseLeft+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW2_CLEAN);
		}
	}
	else if(tempOrientation == 1)
 66e:	c1 30       	cpi	r28, 0x01	; 1
 670:	31 f4       	brne	.+12     	; 0x67e <DirectionReleaseLeft+0x30>
	{
		// G  L  R  D  U on JST connector
		if(invertModeCode == 0)
 672:	81 11       	cpse	r24, r1
 674:	02 c0       	rjmp	.+4      	; 0x67a <DirectionReleaseLeft+0x2c>
		{
			PORTD |= (1 << DIRECTION_SW1_CLEAN);
 676:	5b 9a       	sbi	0x0b, 3	; 11
 678:	09 c0       	rjmp	.+18     	; 0x68c <DirectionReleaseLeft+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW1_CLEAN);
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 67a:	5b 98       	cbi	0x0b, 3	; 11
 67c:	07 c0       	rjmp	.+14     	; 0x68c <DirectionReleaseLeft+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW1_CLEAN);
		}
	}
	else if(tempOrientation == 2)
 67e:	c2 30       	cpi	r28, 0x02	; 2
 680:	29 f4       	brne	.+10     	; 0x68c <DirectionReleaseLeft+0x3e>
	{
		// G  R  U  L  D on JST connector
		if(invertModeCode == 0)
 682:	81 11       	cpse	r24, r1
 684:	02 c0       	rjmp	.+4      	; 0x68a <DirectionReleaseLeft+0x3c>
		{
			PORTD |= (1 << DIRECTION_SW3_CLEAN);
 686:	5d 9a       	sbi	0x0b, 5	; 11
 688:	01 c0       	rjmp	.+2      	; 0x68c <DirectionReleaseLeft+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW3_CLEAN);
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 68a:	5d 98       	cbi	0x0b, 5	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionReleaseLeftLed();
 68c:	0e 94 25 03 	call	0x64a	; 0x64a <DirectionReleaseLeftLed>
}
 690:	cf 91       	pop	r28
 692:	08 95       	ret

00000694 <DirectionPressDownLed>:
	PORTB |= (1 << DIRECTION_LEFT_LED);
}

void DirectionPressDownLed()
{
	PORTB &= ~(1 << DIRECTION_DOWN_LED);
 694:	2d 98       	cbi	0x05, 5	; 5
 696:	08 95       	ret

00000698 <DirectionPressDown>:
	}
	DirectionReleaseRightLed();
}

void DirectionPressDown(uint8_t tempOrientation)
{
 698:	cf 93       	push	r28
 69a:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 69c:	88 e3       	ldi	r24, 0x38	; 56
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	0e 94 88 04 	call	0x910	; 0x910 <eeprom_read_byte>
 6a4:	80 93 02 01 	sts	0x0102, r24
	
	// Press down on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 6a8:	c1 11       	cpse	r28, r1
 6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <DirectionPressDown+0x20>
	{
		// G  R  L  U  D on JST connector
		//DDRD |= (1 << DIRECTION_SW4_CLEAN);
		if(invertModeCode == 0)
 6ac:	81 11       	cpse	r24, r1
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DirectionPressDown+0x1c>
		{
			PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 6b0:	5e 98       	cbi	0x0b, 6	; 11
 6b2:	11 c0       	rjmp	.+34     	; 0x6d6 <DirectionPressDown+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW4_CLEAN);
 6b4:	5e 9a       	sbi	0x0b, 6	; 11
 6b6:	0f c0       	rjmp	.+30     	; 0x6d6 <DirectionPressDown+0x3e>
		}
	}
	else if(tempOrientation == 1)
 6b8:	c1 30       	cpi	r28, 0x01	; 1
 6ba:	31 f4       	brne	.+12     	; 0x6c8 <DirectionPressDown+0x30>
	{
		// G  L  R  D  U on JST connector
		//DDRD |= (1 << DIRECTION_SW3_CLEAN);
		if(invertModeCode == 0)
 6bc:	81 11       	cpse	r24, r1
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DirectionPressDown+0x2c>
		{
			PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 6c0:	5d 98       	cbi	0x0b, 5	; 11
 6c2:	09 c0       	rjmp	.+18     	; 0x6d6 <DirectionPressDown+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW3_CLEAN);
 6c4:	5d 9a       	sbi	0x0b, 5	; 11
 6c6:	07 c0       	rjmp	.+14     	; 0x6d6 <DirectionPressDown+0x3e>
		}
	}
	else if(tempOrientation == 2)
 6c8:	c2 30       	cpi	r28, 0x02	; 2
 6ca:	29 f4       	brne	.+10     	; 0x6d6 <DirectionPressDown+0x3e>
	{
		// G  R  U  L  D on JST connector
		//DDRD |= (1 << DIRECTION_SW4_CLEAN);
		if(invertModeCode == 0)
 6cc:	81 11       	cpse	r24, r1
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DirectionPressDown+0x3c>
		{
			PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 6d0:	5e 98       	cbi	0x0b, 6	; 11
 6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <DirectionPressDown+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW4_CLEAN);
 6d4:	5e 9a       	sbi	0x0b, 6	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionPressDownLed();
 6d6:	0e 94 4a 03 	call	0x694	; 0x694 <DirectionPressDownLed>
}
 6da:	cf 91       	pop	r28
 6dc:	08 95       	ret

000006de <DirectionReleaseDownLed>:
	PORTB &= ~(1 << DIRECTION_DOWN_LED);
}

void DirectionReleaseDownLed()
{
	PORTB |= (1 << DIRECTION_DOWN_LED);
 6de:	2d 9a       	sbi	0x05, 5	; 5
 6e0:	08 95       	ret

000006e2 <DirectionReleaseDown>:
	}
	DirectionPressDownLed();
}

void DirectionReleaseDown(uint8_t tempOrientation)
{
 6e2:	cf 93       	push	r28
 6e4:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 6e6:	88 e3       	ldi	r24, 0x38	; 56
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 88 04 	call	0x910	; 0x910 <eeprom_read_byte>
 6ee:	80 93 02 01 	sts	0x0102, r24
	
	// Release down on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 6f2:	c1 11       	cpse	r28, r1
 6f4:	06 c0       	rjmp	.+12     	; 0x702 <DirectionReleaseDown+0x20>
	{
		// G  R  L  U  D on JST connector
		if(invertModeCode == 0)
 6f6:	81 11       	cpse	r24, r1
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DirectionReleaseDown+0x1c>
		{
			PORTD |= (1 << DIRECTION_SW4_CLEAN);
 6fa:	5e 9a       	sbi	0x0b, 6	; 11
 6fc:	11 c0       	rjmp	.+34     	; 0x720 <DirectionReleaseDown+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW4_CLEAN);
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 6fe:	5e 98       	cbi	0x0b, 6	; 11
 700:	0f c0       	rjmp	.+30     	; 0x720 <DirectionReleaseDown+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW4_CLEAN);
		}
	}
	else if(tempOrientation == 1)
 702:	c1 30       	cpi	r28, 0x01	; 1
 704:	31 f4       	brne	.+12     	; 0x712 <DirectionReleaseDown+0x30>
	{
		// G  L  R  D  U on JST connector
		if(invertModeCode == 0)
 706:	81 11       	cpse	r24, r1
 708:	02 c0       	rjmp	.+4      	; 0x70e <DirectionReleaseDown+0x2c>
		{
			PORTD |= (1 << DIRECTION_SW3_CLEAN);
 70a:	5d 9a       	sbi	0x0b, 5	; 11
 70c:	09 c0       	rjmp	.+18     	; 0x720 <DirectionReleaseDown+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW3_CLEAN);
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 70e:	5d 98       	cbi	0x0b, 5	; 11
 710:	07 c0       	rjmp	.+14     	; 0x720 <DirectionReleaseDown+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW3_CLEAN);
		}
	}
	else if(tempOrientation == 2)
 712:	c2 30       	cpi	r28, 0x02	; 2
 714:	29 f4       	brne	.+10     	; 0x720 <DirectionReleaseDown+0x3e>
	{
		// G  R  U  L  D on JST connector
		if(invertModeCode == 0)
 716:	81 11       	cpse	r24, r1
 718:	02 c0       	rjmp	.+4      	; 0x71e <DirectionReleaseDown+0x3c>
		{
			PORTD |= (1 << DIRECTION_SW4_CLEAN);
 71a:	5e 9a       	sbi	0x0b, 6	; 11
 71c:	01 c0       	rjmp	.+2      	; 0x720 <DirectionReleaseDown+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW4_CLEAN);
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 71e:	5e 98       	cbi	0x0b, 6	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionReleaseDownLed();
 720:	0e 94 6f 03 	call	0x6de	; 0x6de <DirectionReleaseDownLed>
}
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <DirectionPressUpLed>:
	PORTB |= (1 << DIRECTION_DOWN_LED);
}

void DirectionPressUpLed()
{
	PORTB &= ~(1 << DIRECTION_UP_LED);
 728:	2e 98       	cbi	0x05, 6	; 5
 72a:	08 95       	ret

0000072c <DirectionPressUp>:
	}
	DirectionReleaseDownLed();
}

void DirectionPressUp(uint8_t tempOrientation)
{
 72c:	cf 93       	push	r28
 72e:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 730:	88 e3       	ldi	r24, 0x38	; 56
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 88 04 	call	0x910	; 0x910 <eeprom_read_byte>
 738:	80 93 02 01 	sts	0x0102, r24
	
	// Press up on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 73c:	c1 11       	cpse	r28, r1
 73e:	06 c0       	rjmp	.+12     	; 0x74c <DirectionPressUp+0x20>
	{
		// G  R  L  U  D on JST connector
		//DDRD |= (1 << DIRECTION_SW3_CLEAN);
		if(invertModeCode == 0)
 740:	81 11       	cpse	r24, r1
 742:	02 c0       	rjmp	.+4      	; 0x748 <DirectionPressUp+0x1c>
		{
			PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 744:	5d 98       	cbi	0x0b, 5	; 11
 746:	11 c0       	rjmp	.+34     	; 0x76a <DirectionPressUp+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW3_CLEAN);
 748:	5d 9a       	sbi	0x0b, 5	; 11
 74a:	0f c0       	rjmp	.+30     	; 0x76a <DirectionPressUp+0x3e>
		}
	}
	else if(tempOrientation == 1)
 74c:	c1 30       	cpi	r28, 0x01	; 1
 74e:	31 f4       	brne	.+12     	; 0x75c <DirectionPressUp+0x30>
	{
		// G  L  R  D  U on JST connector
		//DDRD |= (1 << DIRECTION_SW4_CLEAN);
		if(invertModeCode == 0)
 750:	81 11       	cpse	r24, r1
 752:	02 c0       	rjmp	.+4      	; 0x758 <DirectionPressUp+0x2c>
		{
			PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 754:	5e 98       	cbi	0x0b, 6	; 11
 756:	09 c0       	rjmp	.+18     	; 0x76a <DirectionPressUp+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW4_CLEAN);
 758:	5e 9a       	sbi	0x0b, 6	; 11
 75a:	07 c0       	rjmp	.+14     	; 0x76a <DirectionPressUp+0x3e>
		}
	}
	else if(tempOrientation == 2)
 75c:	c2 30       	cpi	r28, 0x02	; 2
 75e:	29 f4       	brne	.+10     	; 0x76a <DirectionPressUp+0x3e>
	{
		// G  R  U  L  D on JST connector
		//DDRD |= (1 << DIRECTION_SW2_CLEAN);
		if(invertModeCode == 0)
 760:	81 11       	cpse	r24, r1
 762:	02 c0       	rjmp	.+4      	; 0x768 <DirectionPressUp+0x3c>
		{
			PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 764:	5c 98       	cbi	0x0b, 4	; 11
 766:	01 c0       	rjmp	.+2      	; 0x76a <DirectionPressUp+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW2_CLEAN);
 768:	5c 9a       	sbi	0x0b, 4	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionPressUpLed();
 76a:	0e 94 94 03 	call	0x728	; 0x728 <DirectionPressUpLed>
}
 76e:	cf 91       	pop	r28
 770:	08 95       	ret

00000772 <DirectionReleaseUpLed>:
	PORTB &= ~(1 << DIRECTION_UP_LED);
}

void DirectionReleaseUpLed()
{
	PORTB |= (1 << DIRECTION_UP_LED);
 772:	2e 9a       	sbi	0x05, 6	; 5
 774:	08 95       	ret

00000776 <DirectionReleaseUp>:
	}
	DirectionPressUpLed();
}

void DirectionReleaseUp(uint8_t tempOrientation)
{
 776:	cf 93       	push	r28
 778:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 77a:	88 e3       	ldi	r24, 0x38	; 56
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 88 04 	call	0x910	; 0x910 <eeprom_read_byte>
 782:	80 93 02 01 	sts	0x0102, r24
	
	// Release left on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 786:	c1 11       	cpse	r28, r1
 788:	06 c0       	rjmp	.+12     	; 0x796 <DirectionReleaseUp+0x20>
	{
		// G  R  L  U  D on JST connector
		if(invertModeCode == 0)
 78a:	81 11       	cpse	r24, r1
 78c:	02 c0       	rjmp	.+4      	; 0x792 <DirectionReleaseUp+0x1c>
		{
			PORTD |= (1 << DIRECTION_SW3_CLEAN);
 78e:	5d 9a       	sbi	0x0b, 5	; 11
 790:	11 c0       	rjmp	.+34     	; 0x7b4 <DirectionReleaseUp+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW3_CLEAN);
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 792:	5d 98       	cbi	0x0b, 5	; 11
 794:	0f c0       	rjmp	.+30     	; 0x7b4 <DirectionReleaseUp+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW3_CLEAN);
		}
	}
	else if(tempOrientation == 1)
 796:	c1 30       	cpi	r28, 0x01	; 1
 798:	31 f4       	brne	.+12     	; 0x7a6 <DirectionReleaseUp+0x30>
	{
		// G  L  R  D  U on JST connector
		if(invertModeCode == 0)
 79a:	81 11       	cpse	r24, r1
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <DirectionReleaseUp+0x2c>
		{
			PORTD |= (1 << DIRECTION_SW4_CLEAN);
 79e:	5e 9a       	sbi	0x0b, 6	; 11
 7a0:	09 c0       	rjmp	.+18     	; 0x7b4 <DirectionReleaseUp+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW4_CLEAN);
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 7a2:	5e 98       	cbi	0x0b, 6	; 11
 7a4:	07 c0       	rjmp	.+14     	; 0x7b4 <DirectionReleaseUp+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW4_CLEAN);
		}
	}
	else if(tempOrientation == 2)
 7a6:	c2 30       	cpi	r28, 0x02	; 2
 7a8:	29 f4       	brne	.+10     	; 0x7b4 <DirectionReleaseUp+0x3e>
	{
		// G  R  U  L  D on JST connector
		if(invertModeCode == 0)
 7aa:	81 11       	cpse	r24, r1
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <DirectionReleaseUp+0x3c>
		{
			PORTD |= (1 << DIRECTION_SW2_CLEAN);
 7ae:	5c 9a       	sbi	0x0b, 4	; 11
 7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <DirectionReleaseUp+0x3e>
			//DDRD &= ~(1 << DIRECTION_SW2_CLEAN);
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 7b2:	5c 98       	cbi	0x0b, 4	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionReleaseUpLed();
 7b4:	0e 94 b9 03 	call	0x772	; 0x772 <DirectionReleaseUpLed>
}
 7b8:	cf 91       	pop	r28
 7ba:	08 95       	ret

000007bc <DirectionGetLeftState>:
}

// Reading Inputs
uint8_t DirectionGetLeftState()
{
	return (PINB & (1 << DIRECTION_LEFT_BUTTON));
 7bc:	83 b1       	in	r24, 0x03	; 3
}
 7be:	82 70       	andi	r24, 0x02	; 2
 7c0:	08 95       	ret

000007c2 <DirectionGetRightState>:

uint8_t DirectionGetRightState()
{
	return (PINB & (1 << DIRECTION_RIGHT_BUTTON));
 7c2:	83 b1       	in	r24, 0x03	; 3
}
 7c4:	81 70       	andi	r24, 0x01	; 1
 7c6:	08 95       	ret

000007c8 <DirectionGetUpState>:

uint8_t DirectionGetUpState()
{
	return (PINB & (1 << DIRECTION_UP_BUTTON));
 7c8:	83 b1       	in	r24, 0x03	; 3
}
 7ca:	88 70       	andi	r24, 0x08	; 8
 7cc:	08 95       	ret

000007ce <DirectionGetDownState>:

uint8_t DirectionGetDownState()
{
	return (PINB & (1 << DIRECTION_DOWN_BUTTON));
 7ce:	83 b1       	in	r24, 0x03	; 3
 7d0:	84 70       	andi	r24, 0x04	; 4
 7d2:	08 95       	ret

000007d4 <main>:
}

static void MainInitialize()
{
	// Set all ports to be configured as inputs
	DDRB = 0b00000000;
 7d4:	14 b8       	out	0x04, r1	; 4
	DDRC = 0b00000000;
 7d6:	17 b8       	out	0x07, r1	; 7
	DDRD = 0b00000000;
 7d8:	1a b8       	out	0x0a, r1	; 10

	// Disable all internal pull-up resistors
	PORTB = 0b00000000;
 7da:	15 b8       	out	0x05, r1	; 5
	PORTC = 0b00000000;
 7dc:	18 b8       	out	0x08, r1	; 8
	PORTD = 0b00000000;
 7de:	1b b8       	out	0x0b, r1	; 11

	// Enable necessary internal pull-up resistors
	PORTB |= (1 << MAIN_RIGHT_BUTTON_PULLUP);
 7e0:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1 << MAIN_LEFT_BUTTON_PULLUP);
 7e2:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1 << MAIN_DOWN_BUTTON_PULLUP);
 7e4:	2a 9a       	sbi	0x05, 2	; 5
	PORTB |= (1 << MAIN_UP_BUTTON_PULLUP);
 7e6:	2b 9a       	sbi	0x05, 3	; 5
	PORTC |= (1 << MAIN_DIP5_SW1_PULLUP);
 7e8:	47 9a       	sbi	0x08, 7	; 8
	PORTC |= (1 << MAIN_DIP5_SW2_PULLUP);
 7ea:	45 9a       	sbi	0x08, 5	; 8
	PORTC |= (1 << MAIN_DIP5_SW3_PULLUP);
 7ec:	46 9a       	sbi	0x08, 6	; 8
	PORTC |= (1 << MAIN_DIP5_SW4_PULLUP);
 7ee:	44 9a       	sbi	0x08, 4	; 8
	PORTC |= (1 << MAIN_DIP5_SW5_PULLUP);
 7f0:	42 9a       	sbi	0x08, 2	; 8
	PORTD |= (1 << MAIN_DIP2_SW1_PULLUP);
 7f2:	59 9a       	sbi	0x0b, 1	; 11
	PORTD |= (1 << MAIN_DIP2_SW2_PULLUP);
 7f4:	5a 9a       	sbi	0x0b, 2	; 11
	PORTB |= (1 << MAIN_PRESET_BUTTON_PULLUP);
 7f6:	2f 9a       	sbi	0x05, 7	; 5

	// Set specific port bits to be configured as outputs
	DDRD = DDRD | (1 << DIRECTION_SW1_CLEAN);
 7f8:	53 9a       	sbi	0x0a, 3	; 10
	DDRD = DDRD | (1 << DIRECTION_SW2_CLEAN);
 7fa:	54 9a       	sbi	0x0a, 4	; 10
	DDRD = DDRD | (1 << DIRECTION_SW3_CLEAN);
 7fc:	55 9a       	sbi	0x0a, 5	; 10
	DDRD = DDRD | (1 << DIRECTION_SW4_CLEAN);
 7fe:	56 9a       	sbi	0x0a, 6	; 10
	DDRD = DDRD | (1 << DIRECTION_RIGHT_LED);
 800:	50 9a       	sbi	0x0a, 0	; 10
	DDRB = DDRB | (1 << DIRECTION_LEFT_LED);
 802:	24 9a       	sbi	0x04, 4	; 4
	DDRB = DDRB | (1 << DIRECTION_DOWN_LED);
 804:	25 9a       	sbi	0x04, 5	; 4
	DDRB = DDRB | (1 << DIRECTION_UP_LED);
 806:	26 9a       	sbi	0x04, 6	; 4
	DDRD = DDRD | (1 << MAIN_PRESET_LED);
 808:	57 9a       	sbi	0x0a, 7	; 10

	// Check to see if inversion of signals are requested
	if ( (DirectionGetRightState() == 0) && (DirectionGetDownState() == 0) )
 80a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <DirectionGetRightState>
 80e:	81 11       	cpse	r24, r1
 810:	15 c0       	rjmp	.+42     	; 0x83c <main+0x68>
 812:	0e 94 e7 03 	call	0x7ce	; 0x7ce <DirectionGetDownState>
 816:	81 11       	cpse	r24, r1
 818:	11 c0       	rjmp	.+34     	; 0x83c <main+0x68>
	{
		if(eeprom_read_byte (( uint8_t *) 56) == COMMON_GROUND)
 81a:	88 e3       	ldi	r24, 0x38	; 56
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 88 04 	call	0x910	; 0x910 <eeprom_read_byte>
 822:	81 11       	cpse	r24, r1
 824:	06 c0       	rjmp	.+12     	; 0x832 <main+0x5e>
		{
			eeprom_update_byte (( uint8_t *) 56, COMMON_RAIL);
 826:	61 e0       	ldi	r22, 0x01	; 1
 828:	88 e3       	ldi	r24, 0x38	; 56
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 90 04 	call	0x920	; 0x920 <eeprom_update_byte>
 830:	05 c0       	rjmp	.+10     	; 0x83c <main+0x68>
		}
		else
		{
			eeprom_update_byte (( uint8_t *) 56, COMMON_GROUND);
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	88 e3       	ldi	r24, 0x38	; 56
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 90 04 	call	0x920	; 0x920 <eeprom_update_byte>
		}
	}
	
	// Check to see if we need to bypass the cleaner
	if ( (DirectionGetLeftState() == 0) && (DirectionGetUpState() == 0) )
 83c:	0e 94 de 03 	call	0x7bc	; 0x7bc <DirectionGetLeftState>
 840:	81 11       	cpse	r24, r1
 842:	08 c0       	rjmp	.+16     	; 0x854 <main+0x80>
 844:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DirectionGetUpState>
 848:	81 11       	cpse	r24, r1
 84a:	04 c0       	rjmp	.+8      	; 0x854 <main+0x80>
	{
		bypassCleaner = 1;
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	80 93 03 01 	sts	0x0103, r24
 852:	02 c0       	rjmp	.+4      	; 0x858 <main+0x84>
	}
	else
	{
		bypassCleaner = 0;
 854:	10 92 03 01 	sts	0x0103, r1
	}
	
	DirectionReleaseLeftLed();
 858:	0e 94 25 03 	call	0x64a	; 0x64a <DirectionReleaseLeftLed>
	DirectionReleaseRightLed();
 85c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DirectionReleaseRightLed>
	DirectionReleaseDownLed();
 860:	0e 94 6f 03 	call	0x6de	; 0x6de <DirectionReleaseDownLed>
	DirectionReleaseUpLed();
 864:	0e 94 b9 03 	call	0x772	; 0x772 <DirectionReleaseUpLed>
	
	// Signal to show which signal inversion mode you are in
	if(eeprom_read_byte (( uint8_t *) 56) == COMMON_GROUND)
 868:	88 e3       	ldi	r24, 0x38	; 56
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 88 04 	call	0x910	; 0x910 <eeprom_read_byte>
 870:	81 11       	cpse	r24, r1
 872:	03 c0       	rjmp	.+6      	; 0x87a <main+0xa6>
	{
		DirectionPressDownLed();
 874:	0e 94 4a 03 	call	0x694	; 0x694 <DirectionPressDownLed>
 878:	02 c0       	rjmp	.+4      	; 0x87e <main+0xaa>
	}
	else
	{
		DirectionPressUpLed();
 87a:	0e 94 94 03 	call	0x728	; 0x728 <DirectionPressUpLed>
	}
	
	// Signal to show if you have bypassed the cleaner
	if(bypassCleaner == 0)
 87e:	80 91 03 01 	lds	r24, 0x0103
 882:	81 11       	cpse	r24, r1
 884:	03 c0       	rjmp	.+6      	; 0x88c <main+0xb8>
	{
		DirectionPressLeftLed();
 886:	0e 94 00 03 	call	0x600	; 0x600 <DirectionPressLeftLed>
 88a:	02 c0       	rjmp	.+4      	; 0x890 <main+0xbc>
	}
	else
	{
		DirectionPressRightLed();
 88c:	0e 94 b6 02 	call	0x56c	; 0x56c <DirectionPressRightLed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 890:	2f e7       	ldi	r18, 0x7F	; 127
 892:	8a e1       	ldi	r24, 0x1A	; 26
 894:	96 e0       	ldi	r25, 0x06	; 6
 896:	21 50       	subi	r18, 0x01	; 1
 898:	80 40       	sbci	r24, 0x00	; 0
 89a:	90 40       	sbci	r25, 0x00	; 0
 89c:	e1 f7       	brne	.-8      	; 0x896 <main+0xc2>
 89e:	00 c0       	rjmp	.+0      	; 0x8a0 <main+0xcc>
 8a0:	00 00       	nop
	}
	
	// Hold all animation for two seconds then release
	_delay_ms(2000);
	DirectionReleaseLeftLed();
 8a2:	0e 94 25 03 	call	0x64a	; 0x64a <DirectionReleaseLeftLed>
	DirectionReleaseRightLed();
 8a6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DirectionReleaseRightLed>
	DirectionReleaseDownLed();
 8aa:	0e 94 6f 03 	call	0x6de	; 0x6de <DirectionReleaseDownLed>
	DirectionReleaseUpLed();
 8ae:	0e 94 b9 03 	call	0x772	; 0x772 <DirectionReleaseUpLed>
	
	// Default button positions
	DirectionReleaseLeft(0);
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	0e 94 27 03 	call	0x64e	; 0x64e <DirectionReleaseLeft>
	DirectionReleaseRight(0);
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DirectionReleaseRight>
	DirectionReleaseDown(0);
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DirectionReleaseDown>
	DirectionReleaseUp(0);
 8c4:	80 e0       	ldi	r24, 0x00	; 0
 8c6:	0e 94 bb 03 	call	0x776	; 0x776 <DirectionReleaseUp>
	
	// Read in saved remote mode code, but
	// default to REMOTE_MODE_1 if eeprom data is not in range
	uint8_t tempData = eeprom_read_byte (( uint8_t *) 46);
 8ca:	8e e2       	ldi	r24, 0x2E	; 46
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	0e 94 88 04 	call	0x910	; 0x910 <eeprom_read_byte>
	if (tempData > 15)
 8d2:	80 31       	cpi	r24, 0x10	; 16
 8d4:	18 f0       	brcs	.+6      	; 0x8dc <main+0x108>
	{
		remoteModeCode = REMOTE_MODE_0;
 8d6:	10 92 05 01 	sts	0x0105, r1
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <main+0x10c>
	}
	else
	{
		remoteModeCode = tempData;
 8dc:	80 93 05 01 	sts	0x0105, r24
	}
	
	// Set up the 16 bit timer to keep counting up
	TCCR1B |= (1 << CS10);
 8e0:	e1 e8       	ldi	r30, 0x81	; 129
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	80 81       	ld	r24, Z
 8e6:	81 60       	ori	r24, 0x01	; 1
 8e8:	80 83       	st	Z, r24
	
	// Default program mode counter
	programModeCounter = 0;
 8ea:	10 92 04 01 	sts	0x0104, r1
	// Main program loop
    while(1) 
    {
		// Go and clean
		//MainGoClean();	
		CleanerCustom0(DirectionGetDownState(), DirectionGetUpState(), DirectionGetLeftState(), DirectionGetRightState());	
 8ee:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <DirectionGetRightState>
 8f2:	18 2f       	mov	r17, r24
 8f4:	0e 94 de 03 	call	0x7bc	; 0x7bc <DirectionGetLeftState>
 8f8:	d8 2f       	mov	r29, r24
 8fa:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DirectionGetUpState>
 8fe:	c8 2f       	mov	r28, r24
 900:	0e 94 e7 03 	call	0x7ce	; 0x7ce <DirectionGetDownState>
 904:	21 2f       	mov	r18, r17
 906:	4d 2f       	mov	r20, r29
 908:	6c 2f       	mov	r22, r28
 90a:	0e 94 59 00 	call	0xb2	; 0xb2 <CleanerCustom0>
		//CleanerTetris(DirectionGetDownState(), DirectionGetUpState(), DirectionGetLeftState(), DirectionGetRightState());	
	}
 90e:	ef cf       	rjmp	.-34     	; 0x8ee <main+0x11a>

00000910 <eeprom_read_byte>:
 910:	f9 99       	sbic	0x1f, 1	; 31
 912:	fe cf       	rjmp	.-4      	; 0x910 <eeprom_read_byte>
 914:	92 bd       	out	0x22, r25	; 34
 916:	81 bd       	out	0x21, r24	; 33
 918:	f8 9a       	sbi	0x1f, 0	; 31
 91a:	99 27       	eor	r25, r25
 91c:	80 b5       	in	r24, 0x20	; 32
 91e:	08 95       	ret

00000920 <eeprom_update_byte>:
 920:	26 2f       	mov	r18, r22

00000922 <eeprom_update_r18>:
 922:	f9 99       	sbic	0x1f, 1	; 31
 924:	fe cf       	rjmp	.-4      	; 0x922 <eeprom_update_r18>
 926:	92 bd       	out	0x22, r25	; 34
 928:	81 bd       	out	0x21, r24	; 33
 92a:	f8 9a       	sbi	0x1f, 0	; 31
 92c:	01 97       	sbiw	r24, 0x01	; 1
 92e:	00 b4       	in	r0, 0x20	; 32
 930:	02 16       	cp	r0, r18
 932:	39 f0       	breq	.+14     	; 0x942 <eeprom_update_r18+0x20>
 934:	1f ba       	out	0x1f, r1	; 31
 936:	20 bd       	out	0x20, r18	; 32
 938:	0f b6       	in	r0, 0x3f	; 63
 93a:	f8 94       	cli
 93c:	fa 9a       	sbi	0x1f, 2	; 31
 93e:	f9 9a       	sbi	0x1f, 1	; 31
 940:	0f be       	out	0x3f, r0	; 63
 942:	08 95       	ret

00000944 <_exit>:
 944:	f8 94       	cli

00000946 <__stop_program>:
 946:	ff cf       	rjmp	.-2      	; 0x946 <__stop_program>
