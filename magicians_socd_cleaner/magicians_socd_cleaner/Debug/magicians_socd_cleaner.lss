
magicians_socd_cleaner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000009ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000095a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000009ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bbf  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000952  00000000  00000000  0000272f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db7  00000000  00000000  00003081  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00003e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000757  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cc1  00000000  00000000  0000477f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005440  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	25 04       	cpc	r2, r5
  76:	2d 04       	cpc	r2, r13
  78:	35 04       	cpc	r3, r5
  7a:	3d 04       	cpc	r3, r13
  7c:	45 04       	cpc	r4, r5
  7e:	4d 04       	cpc	r4, r13
  80:	55 04       	cpc	r5, r5
  82:	5d 04       	cpc	r5, r13
  84:	65 04       	cpc	r6, r5
  86:	6d 04       	cpc	r6, r13
  88:	75 04       	cpc	r7, r5
  8a:	7d 04       	cpc	r7, r13
  8c:	85 04       	cpc	r8, r5
  8e:	8d 04       	cpc	r8, r13
  90:	95 04       	cpc	r9, r5
  92:	9d 04       	cpc	r9, r13

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a3 30       	cpi	r26, 0x03	; 3
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 99 03 	call	0x732	; 0x732 <main>
  b4:	0c 94 ab 04 	jmp	0x956	; 0x956 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <CleanerXNeutral>:
/* Function Definitions */
// SOCD Cleaners
void CleanerXNeutral(uint8_t tempLeftState, uint8_t tempRightState)
{
	// Left and Right = Neutral
	if ( (tempLeftState == 0) && (tempRightState == 0) )
  bc:	81 11       	cpse	r24, r1
  be:	14 c0       	rjmp	.+40     	; 0xe8 <CleanerXNeutral+0x2c>
  c0:	61 11       	cpse	r22, r1
  c2:	09 c0       	rjmp	.+18     	; 0xd6 <CleanerXNeutral+0x1a>
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
  c4:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
  c8:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
  cc:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
  d0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
  d4:	08 95       	ret
	}
	else if ( (tempLeftState == 0) && (tempRightState > 0) )
	{
		DirectionPressLeft(ModeSwitchesOrientation());
  d6:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
  da:	0e 94 2d 03 	call	0x65a	; 0x65a <DirectionPressLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
  de:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
  e2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
  e6:	08 95       	ret
	}
	else if ( (tempLeftState > 0) && (tempRightState == 0) )
  e8:	61 11       	cpse	r22, r1
  ea:	09 c0       	rjmp	.+18     	; 0xfe <CleanerXNeutral+0x42>
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
  ec:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
  f0:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
		DirectionPressRight(ModeSwitchesOrientation());
  f4:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
  f8:	0e 94 45 03 	call	0x68a	; 0x68a <DirectionPressRight>
  fc:	08 95       	ret
	}
	else
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
  fe:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 102:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 106:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 10a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
 10e:	08 95       	ret

00000110 <CleanerXLeft>:
}

void CleanerXLeft(uint8_t tempLeftState, uint8_t tempRightState)
{
	// Left and Right = Left
	if ( (tempLeftState == 0) && (tempRightState == 0) )
 110:	81 11       	cpse	r24, r1
 112:	14 c0       	rjmp	.+40     	; 0x13c <CleanerXLeft+0x2c>
 114:	61 11       	cpse	r22, r1
 116:	09 c0       	rjmp	.+18     	; 0x12a <CleanerXLeft+0x1a>
	{
		DirectionPressLeft(ModeSwitchesOrientation());
 118:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 11c:	0e 94 2d 03 	call	0x65a	; 0x65a <DirectionPressLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 120:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 124:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
 128:	08 95       	ret
	}
	else if ( (tempLeftState == 0) && (tempRightState > 0) )
	{
		DirectionPressLeft(ModeSwitchesOrientation());
 12a:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 12e:	0e 94 2d 03 	call	0x65a	; 0x65a <DirectionPressLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 132:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 136:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
 13a:	08 95       	ret
	}
	else if ( (tempLeftState > 0) && (tempRightState == 0) )
 13c:	61 11       	cpse	r22, r1
 13e:	09 c0       	rjmp	.+18     	; 0x152 <CleanerXLeft+0x42>
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
 140:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 144:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
		DirectionPressRight(ModeSwitchesOrientation());
 148:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 14c:	0e 94 45 03 	call	0x68a	; 0x68a <DirectionPressRight>
 150:	08 95       	ret
	}
	else
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
 152:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 156:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 15a:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 15e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
 162:	08 95       	ret

00000164 <CleanerXRight>:
}

void CleanerXRight(uint8_t tempLeftState, uint8_t tempRightState)
{
	// Left and Right = Right
	if ( (tempLeftState == 0) && (tempRightState == 0) )
 164:	81 11       	cpse	r24, r1
 166:	14 c0       	rjmp	.+40     	; 0x190 <CleanerXRight+0x2c>
 168:	61 11       	cpse	r22, r1
 16a:	09 c0       	rjmp	.+18     	; 0x17e <CleanerXRight+0x1a>
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
 16c:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 170:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
		DirectionPressRight(ModeSwitchesOrientation());
 174:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 178:	0e 94 45 03 	call	0x68a	; 0x68a <DirectionPressRight>
 17c:	08 95       	ret
	}
	else if ( (tempLeftState == 0) && (tempRightState > 0) )
	{
		DirectionPressLeft(ModeSwitchesOrientation());
 17e:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 182:	0e 94 2d 03 	call	0x65a	; 0x65a <DirectionPressLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 186:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 18a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
 18e:	08 95       	ret
	}
	else if ( (tempLeftState > 0) && (tempRightState == 0) )
 190:	61 11       	cpse	r22, r1
 192:	09 c0       	rjmp	.+18     	; 0x1a6 <CleanerXRight+0x42>
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
 194:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 198:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
		DirectionPressRight(ModeSwitchesOrientation());
 19c:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 1a0:	0e 94 45 03 	call	0x68a	; 0x68a <DirectionPressRight>
 1a4:	08 95       	ret
	}
	else
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
 1a6:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 1aa:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 1ae:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 1b2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
 1b6:	08 95       	ret

000001b8 <CleanerXLastInput>:
}

void CleanerXLastInput(uint8_t tempLeftState, uint8_t tempRightState)
{
	// Left and Right = Last Input
	switch (CleanerXAxisState)
 1b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <CleanerXAxisState>
 1bc:	92 30       	cpi	r25, 0x02	; 2
 1be:	09 f4       	brne	.+2      	; 0x1c2 <CleanerXLastInput+0xa>
 1c0:	4f c0       	rjmp	.+158    	; 0x260 <CleanerXLastInput+0xa8>
 1c2:	28 f4       	brcc	.+10     	; 0x1ce <CleanerXLastInput+0x16>
 1c4:	99 23       	and	r25, r25
 1c6:	51 f0       	breq	.+20     	; 0x1dc <CleanerXLastInput+0x24>
 1c8:	91 30       	cpi	r25, 0x01	; 1
 1ca:	39 f1       	breq	.+78     	; 0x21a <CleanerXLastInput+0x62>
 1cc:	08 95       	ret
 1ce:	93 30       	cpi	r25, 0x03	; 3
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <CleanerXLastInput+0x1c>
 1d2:	6e c0       	rjmp	.+220    	; 0x2b0 <CleanerXLastInput+0xf8>
 1d4:	94 30       	cpi	r25, 0x04	; 4
 1d6:	09 f4       	brne	.+2      	; 0x1da <CleanerXLastInput+0x22>
 1d8:	8e c0       	rjmp	.+284    	; 0x2f6 <CleanerXLastInput+0x13e>
 1da:	08 95       	ret
	{
		case NEUTRAL_X:
			if ( (tempLeftState == 0) )
 1dc:	81 11       	cpse	r24, r1
 1de:	08 c0       	rjmp	.+16     	; 0x1f0 <CleanerXLastInput+0x38>
			{
				DirectionPressLeft(ModeSwitchesOrientation());
 1e0:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 1e4:	0e 94 2d 03 	call	0x65a	; 0x65a <DirectionPressLeft>
				CleanerXAxisState = LEFT;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 1ee:	08 95       	ret
			}
			else if ( (tempRightState == 0) )
 1f0:	61 11       	cpse	r22, r1
 1f2:	08 c0       	rjmp	.+16     	; 0x204 <CleanerXLastInput+0x4c>
			{
				DirectionPressRight(ModeSwitchesOrientation());
 1f4:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 1f8:	0e 94 45 03 	call	0x68a	; 0x68a <DirectionPressRight>
				CleanerXAxisState = RIGHT;
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 202:	08 95       	ret
			}
			else
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 204:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 208:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
				DirectionReleaseRight(ModeSwitchesOrientation());
 20c:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 210:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
				CleanerXAxisState = NEUTRAL_X;
 214:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <CleanerXAxisState>
 218:	08 95       	ret
			}
		break;
		
		case LEFT:
			if ( (tempLeftState > 0) )
 21a:	88 23       	and	r24, r24
 21c:	39 f0       	breq	.+14     	; 0x22c <CleanerXLastInput+0x74>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 21e:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 222:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
				CleanerXAxisState = NEUTRAL_X;
 226:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <CleanerXAxisState>
 22a:	08 95       	ret
			}
			else if ( (tempRightState == 0) )
 22c:	61 11       	cpse	r22, r1
 22e:	0c c0       	rjmp	.+24     	; 0x248 <CleanerXLastInput+0x90>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 230:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 234:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
				DirectionPressRight(ModeSwitchesOrientation());
 238:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 23c:	0e 94 45 03 	call	0x68a	; 0x68a <DirectionPressRight>
				CleanerXAxisState = LEFT_LOST;
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 246:	08 95       	ret
			}
			else
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 248:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 24c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
				DirectionPressLeft(ModeSwitchesOrientation());
 250:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 254:	0e 94 2d 03 	call	0x65a	; 0x65a <DirectionPressLeft>
				CleanerXAxisState = LEFT;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 25e:	08 95       	ret
			}
			break;
		
		case LEFT_LOST:
			if ( (tempLeftState > 0) )
 260:	88 23       	and	r24, r24
 262:	61 f0       	breq	.+24     	; 0x27c <CleanerXLastInput+0xc4>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 264:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 268:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
				DirectionPressRight(ModeSwitchesOrientation());
 26c:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 270:	0e 94 45 03 	call	0x68a	; 0x68a <DirectionPressRight>
				CleanerXAxisState = RIGHT;
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 27a:	08 95       	ret
			}
			else if ( (tempRightState > 0) )
 27c:	66 23       	and	r22, r22
 27e:	61 f0       	breq	.+24     	; 0x298 <CleanerXLastInput+0xe0>
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 280:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 284:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
				DirectionPressLeft(ModeSwitchesOrientation());
 288:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 28c:	0e 94 2d 03 	call	0x65a	; 0x65a <DirectionPressLeft>
				CleanerXAxisState = LEFT;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 296:	08 95       	ret
			}
			else
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 298:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 29c:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
				DirectionPressRight(ModeSwitchesOrientation());
 2a0:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 2a4:	0e 94 45 03 	call	0x68a	; 0x68a <DirectionPressRight>
				CleanerXAxisState = LEFT_LOST;
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 2ae:	08 95       	ret
			}
			break;
		
		case RIGHT:
			if ( (tempRightState > 0) )
 2b0:	66 23       	and	r22, r22
 2b2:	39 f0       	breq	.+14     	; 0x2c2 <CleanerXLastInput+0x10a>
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 2b4:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 2b8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
				CleanerXAxisState = NEUTRAL_X;
 2bc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <CleanerXAxisState>
 2c0:	08 95       	ret
			}
			else if ( (tempLeftState == 0) )
 2c2:	81 11       	cpse	r24, r1
 2c4:	0c c0       	rjmp	.+24     	; 0x2de <CleanerXLastInput+0x126>
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 2c6:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 2ca:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
				DirectionPressLeft(ModeSwitchesOrientation());
 2ce:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 2d2:	0e 94 2d 03 	call	0x65a	; 0x65a <DirectionPressLeft>
				CleanerXAxisState = RIGHT_LOST;
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 2dc:	08 95       	ret
			}
			else
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 2de:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 2e2:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
				DirectionPressRight(ModeSwitchesOrientation());
 2e6:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 2ea:	0e 94 45 03 	call	0x68a	; 0x68a <DirectionPressRight>
				CleanerXAxisState = RIGHT;
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 2f4:	08 95       	ret
			}
			break;
		
		case RIGHT_LOST:
			if ( (tempRightState > 0) )
 2f6:	66 23       	and	r22, r22
 2f8:	61 f0       	breq	.+24     	; 0x312 <CleanerXLastInput+0x15a>
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 2fa:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 2fe:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
				DirectionPressLeft(ModeSwitchesOrientation());
 302:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 306:	0e 94 2d 03 	call	0x65a	; 0x65a <DirectionPressLeft>
				CleanerXAxisState = LEFT;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 310:	08 95       	ret
			}
			else if ( (tempLeftState > 0) )
 312:	88 23       	and	r24, r24
 314:	61 f0       	breq	.+24     	; 0x32e <CleanerXLastInput+0x176>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 316:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 31a:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
				DirectionPressRight(ModeSwitchesOrientation());
 31e:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 322:	0e 94 45 03 	call	0x68a	; 0x68a <DirectionPressRight>
				CleanerXAxisState = RIGHT;
 326:	83 e0       	ldi	r24, 0x03	; 3
 328:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 32c:	08 95       	ret
			}
			else
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 32e:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 332:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
				DirectionPressLeft(ModeSwitchesOrientation());
 336:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 33a:	0e 94 2d 03 	call	0x65a	; 0x65a <DirectionPressLeft>
				CleanerXAxisState = RIGHT_LOST;
 33e:	84 e0       	ldi	r24, 0x04	; 4
 340:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 344:	08 95       	ret

00000346 <CleanerYNeutral>:
}

void CleanerYNeutral(uint8_t tempDownState, uint8_t tempUpState)
{
	// Down and Up = Neutral
	if ( (tempDownState == 0) && (tempUpState == 0) )
 346:	81 11       	cpse	r24, r1
 348:	14 c0       	rjmp	.+40     	; 0x372 <CleanerYNeutral+0x2c>
 34a:	61 11       	cpse	r22, r1
 34c:	09 c0       	rjmp	.+18     	; 0x360 <CleanerYNeutral+0x1a>
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 34e:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 352:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 356:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 35a:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
 35e:	08 95       	ret
	}
	else if ( (tempDownState == 0) && (tempUpState > 0) )
	{
		DirectionPressDown(ModeSwitchesOrientation());
 360:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 364:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DirectionPressDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 368:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 36c:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
 370:	08 95       	ret
	}
	else if ( (tempDownState > 0) && (tempUpState == 0) )
 372:	61 11       	cpse	r22, r1
 374:	09 c0       	rjmp	.+18     	; 0x388 <CleanerYNeutral+0x42>
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 376:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 37a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
		DirectionPressUp(ModeSwitchesOrientation());
 37e:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 382:	0e 94 75 03 	call	0x6ea	; 0x6ea <DirectionPressUp>
 386:	08 95       	ret
	}
	else
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 388:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 38c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 390:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 394:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
 398:	08 95       	ret

0000039a <CleanerYDown>:
}

void CleanerYDown(uint8_t tempDownState, uint8_t tempUpState)
{
	// Down and Up = Down
	if ( (tempDownState == 0) && (tempUpState == 0) )
 39a:	81 11       	cpse	r24, r1
 39c:	14 c0       	rjmp	.+40     	; 0x3c6 <CleanerYDown+0x2c>
 39e:	61 11       	cpse	r22, r1
 3a0:	09 c0       	rjmp	.+18     	; 0x3b4 <CleanerYDown+0x1a>
	{
		DirectionPressDown(ModeSwitchesOrientation());
 3a2:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 3a6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DirectionPressDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 3aa:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 3ae:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
 3b2:	08 95       	ret
	}
	else if ( (tempDownState == 0) && (tempUpState > 0) )
	{
		DirectionPressDown(ModeSwitchesOrientation());
 3b4:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 3b8:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DirectionPressDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 3bc:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 3c0:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
 3c4:	08 95       	ret
	}
	else if ( (tempDownState > 0) && (tempUpState == 0) )
 3c6:	61 11       	cpse	r22, r1
 3c8:	09 c0       	rjmp	.+18     	; 0x3dc <CleanerYDown+0x42>
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 3ca:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 3ce:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
		DirectionPressUp(ModeSwitchesOrientation());
 3d2:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 3d6:	0e 94 75 03 	call	0x6ea	; 0x6ea <DirectionPressUp>
 3da:	08 95       	ret
	}
	else
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 3dc:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 3e0:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 3e4:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 3e8:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
 3ec:	08 95       	ret

000003ee <CleanerYUp>:
}

void CleanerYUp(uint8_t tempDownState, uint8_t tempUpState)
{
	// Down and Up = Up
	if ( (tempDownState == 0) && (tempUpState == 0) )
 3ee:	81 11       	cpse	r24, r1
 3f0:	14 c0       	rjmp	.+40     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3f2:	61 11       	cpse	r22, r1
 3f4:	09 c0       	rjmp	.+18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 3f6:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 3fa:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
		DirectionPressUp(ModeSwitchesOrientation());
 3fe:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 402:	0e 94 75 03 	call	0x6ea	; 0x6ea <DirectionPressUp>
 406:	08 95       	ret
	}
	else if ( (tempDownState == 0) && (tempUpState > 0) )
	{
		DirectionPressDown(ModeSwitchesOrientation());
 408:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 40c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DirectionPressDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 410:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 414:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
 418:	08 95       	ret
	}
	else if ( (tempDownState > 0) && (tempUpState == 0) )
 41a:	61 11       	cpse	r22, r1
 41c:	09 c0       	rjmp	.+18     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 41e:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 422:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
		DirectionPressUp(ModeSwitchesOrientation());
 426:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 42a:	0e 94 75 03 	call	0x6ea	; 0x6ea <DirectionPressUp>
 42e:	08 95       	ret
	}
	else
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 430:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 434:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 438:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 43c:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
 440:	08 95       	ret

00000442 <CleanerYLastInput>:
}

void CleanerYLastInput(uint8_t tempDownState, uint8_t tempUpState)
{
	// Left and Right = Last Input
	switch (CleanerYAxisState)
 442:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 446:	92 30       	cpi	r25, 0x02	; 2
 448:	09 f4       	brne	.+2      	; 0x44c <CleanerYLastInput+0xa>
 44a:	4f c0       	rjmp	.+158    	; 0x4ea <CleanerYLastInput+0xa8>
 44c:	28 f4       	brcc	.+10     	; 0x458 <CleanerYLastInput+0x16>
 44e:	99 23       	and	r25, r25
 450:	51 f0       	breq	.+20     	; 0x466 <CleanerYLastInput+0x24>
 452:	91 30       	cpi	r25, 0x01	; 1
 454:	39 f1       	breq	.+78     	; 0x4a4 <CleanerYLastInput+0x62>
 456:	08 95       	ret
 458:	93 30       	cpi	r25, 0x03	; 3
 45a:	09 f4       	brne	.+2      	; 0x45e <CleanerYLastInput+0x1c>
 45c:	6e c0       	rjmp	.+220    	; 0x53a <__stack+0x3b>
 45e:	94 30       	cpi	r25, 0x04	; 4
 460:	09 f4       	brne	.+2      	; 0x464 <CleanerYLastInput+0x22>
 462:	8e c0       	rjmp	.+284    	; 0x580 <__stack+0x81>
 464:	08 95       	ret
	{
		case NEUTRAL_Y:
			if ( (tempDownState == 0) )
 466:	81 11       	cpse	r24, r1
 468:	08 c0       	rjmp	.+16     	; 0x47a <CleanerYLastInput+0x38>
			{
				DirectionPressDown(ModeSwitchesOrientation());
 46a:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 46e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DirectionPressDown>
				CleanerYAxisState = DOWN;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 478:	08 95       	ret
			}
			else if ( (tempUpState == 0) )
 47a:	61 11       	cpse	r22, r1
 47c:	08 c0       	rjmp	.+16     	; 0x48e <CleanerYLastInput+0x4c>
			{
				DirectionPressUp(ModeSwitchesOrientation());
 47e:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 482:	0e 94 75 03 	call	0x6ea	; 0x6ea <DirectionPressUp>
				CleanerYAxisState = UP;
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 48c:	08 95       	ret
			}
			else
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 48e:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 492:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
				DirectionReleaseUp(ModeSwitchesOrientation());
 496:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 49a:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
				CleanerYAxisState = NEUTRAL_Y;
 49e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 4a2:	08 95       	ret
			}
			break;
		
		case DOWN:
			if ( (tempDownState > 0) )
 4a4:	88 23       	and	r24, r24
 4a6:	39 f0       	breq	.+14     	; 0x4b6 <CleanerYLastInput+0x74>
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 4a8:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 4ac:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
				CleanerYAxisState = NEUTRAL_Y;
 4b0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 4b4:	08 95       	ret
			}
			else if ( (tempUpState == 0) )
 4b6:	61 11       	cpse	r22, r1
 4b8:	0c c0       	rjmp	.+24     	; 0x4d2 <CleanerYLastInput+0x90>
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 4ba:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 4be:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
				DirectionPressUp(ModeSwitchesOrientation());
 4c2:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 4c6:	0e 94 75 03 	call	0x6ea	; 0x6ea <DirectionPressUp>
				CleanerYAxisState = DOWN_LOST;
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 4d0:	08 95       	ret
			}
			else
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 4d2:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 4d6:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
				DirectionPressDown(ModeSwitchesOrientation());
 4da:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 4de:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DirectionPressDown>
				CleanerYAxisState = DOWN;
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 4e8:	08 95       	ret
			}
			break;
		
		case DOWN_LOST:
			if ( (tempDownState > 0) )
 4ea:	88 23       	and	r24, r24
 4ec:	61 f0       	breq	.+24     	; 0x506 <__stack+0x7>
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 4ee:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 4f2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
				DirectionPressUp(ModeSwitchesOrientation());
 4f6:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 4fa:	0e 94 75 03 	call	0x6ea	; 0x6ea <DirectionPressUp>
				CleanerYAxisState = UP;
 4fe:	83 e0       	ldi	r24, 0x03	; 3
 500:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 504:	08 95       	ret
			}
			else if ( (tempUpState > 0) )
 506:	66 23       	and	r22, r22
 508:	61 f0       	breq	.+24     	; 0x522 <__stack+0x23>
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 50a:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 50e:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
				DirectionPressDown(ModeSwitchesOrientation());
 512:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 516:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DirectionPressDown>
				CleanerYAxisState = DOWN;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 520:	08 95       	ret
			}
			else
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 522:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 526:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
				DirectionPressUp(ModeSwitchesOrientation());
 52a:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 52e:	0e 94 75 03 	call	0x6ea	; 0x6ea <DirectionPressUp>
				CleanerYAxisState = DOWN_LOST;
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 538:	08 95       	ret
			}
			break;
		
		case UP:
			if ( (tempUpState > 0) )
 53a:	66 23       	and	r22, r22
 53c:	39 f0       	breq	.+14     	; 0x54c <__stack+0x4d>
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 53e:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 542:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
				CleanerYAxisState = NEUTRAL_Y;
 546:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 54a:	08 95       	ret
			}
			else if ( (tempDownState == 0) )
 54c:	81 11       	cpse	r24, r1
 54e:	0c c0       	rjmp	.+24     	; 0x568 <__stack+0x69>
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 550:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 554:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
				DirectionPressDown(ModeSwitchesOrientation());
 558:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 55c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DirectionPressDown>
				CleanerYAxisState = UP_LOST;
 560:	84 e0       	ldi	r24, 0x04	; 4
 562:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 566:	08 95       	ret
			}
			else
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 568:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 56c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
				DirectionPressUp(ModeSwitchesOrientation());
 570:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 574:	0e 94 75 03 	call	0x6ea	; 0x6ea <DirectionPressUp>
				CleanerYAxisState = UP;
 578:	83 e0       	ldi	r24, 0x03	; 3
 57a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 57e:	08 95       	ret
			}
			break;
		
		case UP_LOST:
			if ( (tempUpState > 0) )
 580:	66 23       	and	r22, r22
 582:	61 f0       	breq	.+24     	; 0x59c <__stack+0x9d>
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 584:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 588:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
				DirectionPressDown(ModeSwitchesOrientation());
 58c:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 590:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DirectionPressDown>
				CleanerYAxisState = DOWN;
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 59a:	08 95       	ret
			}
			else if ( (tempDownState > 0) )
 59c:	88 23       	and	r24, r24
 59e:	61 f0       	breq	.+24     	; 0x5b8 <__stack+0xb9>
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 5a0:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 5a4:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
				DirectionPressUp(ModeSwitchesOrientation());
 5a8:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 5ac:	0e 94 75 03 	call	0x6ea	; 0x6ea <DirectionPressUp>
				CleanerYAxisState = UP;
 5b0:	83 e0       	ldi	r24, 0x03	; 3
 5b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 5b6:	08 95       	ret
			}
			else
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 5b8:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 5bc:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
				DirectionPressDown(ModeSwitchesOrientation());
 5c0:	0e 94 17 03 	call	0x62e	; 0x62e <ModeSwitchesOrientation>
 5c4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DirectionPressDown>
				CleanerYAxisState = UP_LOST;
 5c8:	84 e0       	ldi	r24, 0x04	; 4
 5ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 5ce:	08 95       	ret

000005d0 <ModeSwitchesX>:

// Mode Decision
uint8_t ModeSwitchesX()
{	
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip5Sw1() > 0) && (ModeSwitchesReadDip5Sw2() > 0) )
 5d0:	37 9b       	sbis	0x06, 7	; 6
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <ModeSwitchesX+0x8>
 5d4:	35 99       	sbic	0x06, 5	; 6
 5d6:	0a c0       	rjmp	.+20     	; 0x5ec <ModeSwitchesX+0x1c>
	{
		// Mode code for cleaner x neutral
		modeCode = 0;
	}
	else if ( (ModeSwitchesReadDip5Sw1() > 0) && (ModeSwitchesReadDip5Sw2() == 0) )
 5d8:	37 9b       	sbis	0x06, 7	; 6
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <ModeSwitchesX+0x10>
 5dc:	35 9b       	sbis	0x06, 5	; 6
 5de:	08 c0       	rjmp	.+16     	; 0x5f0 <ModeSwitchesX+0x20>
	{
		// Mode code for cleaner x left
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip5Sw1() == 0) && (ModeSwitchesReadDip5Sw2() > 0) )
 5e0:	37 99       	sbic	0x06, 7	; 6
 5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <ModeSwitchesX+0x24>
 5e4:	35 99       	sbic	0x06, 5	; 6
 5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <ModeSwitchesX+0x28>
		modeCode = 2;
	}
	else
	{
		// Mode code for cleaner x last input
		modeCode = 3;
 5e8:	83 e0       	ldi	r24, 0x03	; 3
 5ea:	08 95       	ret
{	
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip5Sw1() > 0) && (ModeSwitchesReadDip5Sw2() > 0) )
	{
		// Mode code for cleaner x neutral
		modeCode = 0;
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	08 95       	ret
	}
	else if ( (ModeSwitchesReadDip5Sw1() > 0) && (ModeSwitchesReadDip5Sw2() == 0) )
	{
		// Mode code for cleaner x left
		modeCode = 1;
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	08 95       	ret
		modeCode = 2;
	}
	else
	{
		// Mode code for cleaner x last input
		modeCode = 3;
 5f4:	83 e0       	ldi	r24, 0x03	; 3
 5f6:	08 95       	ret
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip5Sw1() == 0) && (ModeSwitchesReadDip5Sw2() > 0) )
	{
		// Mode code for cleaner x right
		modeCode = 2;
 5f8:	82 e0       	ldi	r24, 0x02	; 2
		// Mode code for cleaner x last input
		modeCode = 3;
	}
	
	return modeCode;
}
 5fa:	08 95       	ret

000005fc <ModeSwitchesY>:

uint8_t ModeSwitchesY()
{
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip5Sw3() > 0) && (ModeSwitchesReadDip5Sw4() > 0) )
 5fc:	36 9b       	sbis	0x06, 6	; 6
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <ModeSwitchesY+0x8>
 600:	34 99       	sbic	0x06, 4	; 6
 602:	0a c0       	rjmp	.+20     	; 0x618 <ModeSwitchesY+0x1c>
	{
		// Mode code for cleaner y neutral
		modeCode = 0;
	}
	else if ( (ModeSwitchesReadDip5Sw3() > 0) && (ModeSwitchesReadDip5Sw4() == 0) )
 604:	36 9b       	sbis	0x06, 6	; 6
 606:	02 c0       	rjmp	.+4      	; 0x60c <ModeSwitchesY+0x10>
 608:	34 9b       	sbis	0x06, 4	; 6
 60a:	08 c0       	rjmp	.+16     	; 0x61c <ModeSwitchesY+0x20>
	{
		// Mode code for cleaner y down
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip5Sw3() == 0) && (ModeSwitchesReadDip5Sw4() > 0) )
 60c:	36 99       	sbic	0x06, 6	; 6
 60e:	08 c0       	rjmp	.+16     	; 0x620 <ModeSwitchesY+0x24>
 610:	34 99       	sbic	0x06, 4	; 6
 612:	08 c0       	rjmp	.+16     	; 0x624 <ModeSwitchesY+0x28>
		modeCode = 2;
	}
	else
	{
		// Mode code for cleaner y last input
		modeCode = 3;
 614:	83 e0       	ldi	r24, 0x03	; 3
 616:	08 95       	ret
{
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip5Sw3() > 0) && (ModeSwitchesReadDip5Sw4() > 0) )
	{
		// Mode code for cleaner y neutral
		modeCode = 0;
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	08 95       	ret
	}
	else if ( (ModeSwitchesReadDip5Sw3() > 0) && (ModeSwitchesReadDip5Sw4() == 0) )
	{
		// Mode code for cleaner y down
		modeCode = 1;
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	08 95       	ret
		modeCode = 2;
	}
	else
	{
		// Mode code for cleaner y last input
		modeCode = 3;
 620:	83 e0       	ldi	r24, 0x03	; 3
 622:	08 95       	ret
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip5Sw3() == 0) && (ModeSwitchesReadDip5Sw4() > 0) )
	{
		// Mode code for cleaner y up
		modeCode = 2;
 624:	82 e0       	ldi	r24, 0x02	; 2
		// Mode code for cleaner y last input
		modeCode = 3;
	}
	
	return modeCode;
}
 626:	08 95       	ret

00000628 <ModeSwitchesRemote>:
	return (PINC & (1 << MODESWITCHES_DIP5_SW4));
}

static uint8_t ModeSwitchesReadDip5Sw5()
{
	return (PINC & (1 << MODESWITCHES_DIP5_SW5));
 628:	86 b1       	in	r24, 0x06	; 6
	{
		// Mode code for remote button selection
		modeCode = 1;
	}
	return modeCode;
}
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	08 95       	ret

0000062e <ModeSwitchesOrientation>:

uint8_t ModeSwitchesOrientation()
{
	// Decide mode for default OEM controller
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() > 0) )
 62e:	49 9b       	sbis	0x09, 1	; 9
 630:	02 c0       	rjmp	.+4      	; 0x636 <ModeSwitchesOrientation+0x8>
 632:	4a 99       	sbic	0x09, 2	; 9
 634:	0a c0       	rjmp	.+20     	; 0x64a <ModeSwitchesOrientation+0x1c>
	{
		// Mode code for G  R  L  U  D on JST connector
		modeCode = 0;
	}
	else if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() == 0) )
 636:	49 9b       	sbis	0x09, 1	; 9
 638:	02 c0       	rjmp	.+4      	; 0x63e <ModeSwitchesOrientation+0x10>
 63a:	4a 9b       	sbis	0x09, 2	; 9
 63c:	08 c0       	rjmp	.+16     	; 0x64e <ModeSwitchesOrientation+0x20>
	{
		// Mode code for G  L  R  D  U on JST connector
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip2Sw1() == 0) && (ModeSwitchesReadDip2Sw2() > 0) )
 63e:	49 99       	sbic	0x09, 1	; 9
 640:	08 c0       	rjmp	.+16     	; 0x652 <ModeSwitchesOrientation+0x24>
 642:	4a 99       	sbic	0x09, 2	; 9
 644:	08 c0       	rjmp	.+16     	; 0x656 <ModeSwitchesOrientation+0x28>
		modeCode = 2;
	}
	else
	{
		// Mode code for future orientation
		modeCode = 3;
 646:	83 e0       	ldi	r24, 0x03	; 3
 648:	08 95       	ret
	// Decide mode for default OEM controller
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() > 0) )
	{
		// Mode code for G  R  L  U  D on JST connector
		modeCode = 0;
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	08 95       	ret
	}
	else if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() == 0) )
	{
		// Mode code for G  L  R  D  U on JST connector
		modeCode = 1;
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	08 95       	ret
		modeCode = 2;
	}
	else
	{
		// Mode code for future orientation
		modeCode = 3;
 652:	83 e0       	ldi	r24, 0x03	; 3
 654:	08 95       	ret
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip2Sw1() == 0) && (ModeSwitchesReadDip2Sw2() > 0) )
	{
		// Mode code for G  R  U  L  D on JST connector
		modeCode = 2;
 656:	82 e0       	ldi	r24, 0x02	; 2
		// Mode code for future orientation
		modeCode = 3;
	}
	
	return modeCode;
}
 658:	08 95       	ret

0000065a <DirectionPressLeft>:

// Setting Outputs
void DirectionPressLeft(uint8_t tempOrientation)
{
	// Press left on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 65a:	81 11       	cpse	r24, r1
 65c:	02 c0       	rjmp	.+4      	; 0x662 <DirectionPressLeft+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 65e:	5c 98       	cbi	0x0b, 4	; 11
 660:	08 95       	ret
	}
	else if(tempOrientation == 1)
 662:	81 30       	cpi	r24, 0x01	; 1
 664:	11 f4       	brne	.+4      	; 0x66a <DirectionPressLeft+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 666:	5b 98       	cbi	0x0b, 3	; 11
 668:	08 95       	ret
		
	}
	else if(tempOrientation == 2)
 66a:	82 30       	cpi	r24, 0x02	; 2
 66c:	09 f4       	brne	.+2      	; 0x670 <DirectionPressLeft+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 66e:	5e 98       	cbi	0x0b, 6	; 11
 670:	08 95       	ret

00000672 <DirectionReleaseLeft>:
}

void DirectionReleaseLeft(uint8_t tempOrientation)
{
	// Release left on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 672:	81 11       	cpse	r24, r1
 674:	02 c0       	rjmp	.+4      	; 0x67a <DirectionReleaseLeft+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD |= (1 << DIRECTION_SW2_CLEAN);
 676:	5c 9a       	sbi	0x0b, 4	; 11
 678:	08 95       	ret
	}
	else if(tempOrientation == 1)
 67a:	81 30       	cpi	r24, 0x01	; 1
 67c:	11 f4       	brne	.+4      	; 0x682 <DirectionReleaseLeft+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD |= (1 << DIRECTION_SW1_CLEAN);
 67e:	5b 9a       	sbi	0x0b, 3	; 11
 680:	08 95       	ret
	}
	else if(tempOrientation == 2)
 682:	82 30       	cpi	r24, 0x02	; 2
 684:	09 f4       	brne	.+2      	; 0x688 <DirectionReleaseLeft+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD |= (1 << DIRECTION_SW4_CLEAN);
 686:	5e 9a       	sbi	0x0b, 6	; 11
 688:	08 95       	ret

0000068a <DirectionPressRight>:
}

void DirectionPressRight(uint8_t tempOrientation)
{
	// Press right on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 68a:	81 11       	cpse	r24, r1
 68c:	02 c0       	rjmp	.+4      	; 0x692 <DirectionPressRight+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 68e:	5b 98       	cbi	0x0b, 3	; 11
 690:	08 95       	ret
	}
	else if(tempOrientation == 1)
 692:	81 30       	cpi	r24, 0x01	; 1
 694:	11 f4       	brne	.+4      	; 0x69a <DirectionPressRight+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 696:	5c 98       	cbi	0x0b, 4	; 11
 698:	08 95       	ret
		
	}
	else if(tempOrientation == 2)
 69a:	82 30       	cpi	r24, 0x02	; 2
 69c:	09 f4       	brne	.+2      	; 0x6a0 <DirectionPressRight+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 69e:	5b 98       	cbi	0x0b, 3	; 11
 6a0:	08 95       	ret

000006a2 <DirectionReleaseRight>:
}

void DirectionReleaseRight(uint8_t tempOrientation)
{
	// Release right on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 6a2:	81 11       	cpse	r24, r1
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <DirectionReleaseRight+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD |= (1 << DIRECTION_SW1_CLEAN);
 6a6:	5b 9a       	sbi	0x0b, 3	; 11
 6a8:	08 95       	ret
	}
	else if(tempOrientation == 1)
 6aa:	81 30       	cpi	r24, 0x01	; 1
 6ac:	11 f4       	brne	.+4      	; 0x6b2 <DirectionReleaseRight+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD |= (1 << DIRECTION_SW2_CLEAN);
 6ae:	5c 9a       	sbi	0x0b, 4	; 11
 6b0:	08 95       	ret
	}
	else if(tempOrientation == 2)
 6b2:	82 30       	cpi	r24, 0x02	; 2
 6b4:	09 f4       	brne	.+2      	; 0x6b8 <DirectionReleaseRight+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD |= (1 << DIRECTION_SW1_CLEAN);
 6b6:	5b 9a       	sbi	0x0b, 3	; 11
 6b8:	08 95       	ret

000006ba <DirectionPressDown>:
}

void DirectionPressDown(uint8_t tempOrientation)
{
	// Press down on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 6ba:	81 11       	cpse	r24, r1
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DirectionPressDown+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 6be:	5e 98       	cbi	0x0b, 6	; 11
 6c0:	08 95       	ret
	}
	else if(tempOrientation == 1)
 6c2:	81 30       	cpi	r24, 0x01	; 1
 6c4:	11 f4       	brne	.+4      	; 0x6ca <DirectionPressDown+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 6c6:	5d 98       	cbi	0x0b, 5	; 11
 6c8:	08 95       	ret
	}
	else if(tempOrientation == 2)
 6ca:	82 30       	cpi	r24, 0x02	; 2
 6cc:	09 f4       	brne	.+2      	; 0x6d0 <DirectionPressDown+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 6ce:	5e 98       	cbi	0x0b, 6	; 11
 6d0:	08 95       	ret

000006d2 <DirectionReleaseDown>:
}

void DirectionReleaseDown(uint8_t tempOrientation)
{
	// Release down on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 6d2:	81 11       	cpse	r24, r1
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DirectionReleaseDown+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD |= (1 << DIRECTION_SW4_CLEAN);
 6d6:	5e 9a       	sbi	0x0b, 6	; 11
 6d8:	08 95       	ret
	}
	else if(tempOrientation == 1)
 6da:	81 30       	cpi	r24, 0x01	; 1
 6dc:	11 f4       	brne	.+4      	; 0x6e2 <DirectionReleaseDown+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD |= (1 << DIRECTION_SW3_CLEAN);
 6de:	5d 9a       	sbi	0x0b, 5	; 11
 6e0:	08 95       	ret
	}
	else if(tempOrientation == 2)
 6e2:	82 30       	cpi	r24, 0x02	; 2
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <DirectionReleaseDown+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD |= (1 << DIRECTION_SW4_CLEAN);
 6e6:	5e 9a       	sbi	0x0b, 6	; 11
 6e8:	08 95       	ret

000006ea <DirectionPressUp>:
}

void DirectionPressUp(uint8_t tempOrientation)
{
	// Press up on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 6ea:	81 11       	cpse	r24, r1
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DirectionPressUp+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 6ee:	5d 98       	cbi	0x0b, 5	; 11
 6f0:	08 95       	ret
	}
	else if(tempOrientation == 1)
 6f2:	81 30       	cpi	r24, 0x01	; 1
 6f4:	11 f4       	brne	.+4      	; 0x6fa <DirectionPressUp+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 6f6:	5e 98       	cbi	0x0b, 6	; 11
 6f8:	08 95       	ret
		
	}
	else if(tempOrientation == 2)
 6fa:	82 30       	cpi	r24, 0x02	; 2
 6fc:	09 f4       	brne	.+2      	; 0x700 <DirectionPressUp+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 6fe:	5e 98       	cbi	0x0b, 6	; 11
 700:	08 95       	ret

00000702 <DirectionReleaseUp>:
}

void DirectionReleaseUp(uint8_t tempOrientation)
{
	// Release left on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 702:	81 11       	cpse	r24, r1
 704:	02 c0       	rjmp	.+4      	; 0x70a <DirectionReleaseUp+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD |= (1 << DIRECTION_SW3_CLEAN);
 706:	5d 9a       	sbi	0x0b, 5	; 11
 708:	08 95       	ret
	}
	else if(tempOrientation == 1)
 70a:	81 30       	cpi	r24, 0x01	; 1
 70c:	11 f4       	brne	.+4      	; 0x712 <DirectionReleaseUp+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD |= (1 << DIRECTION_SW4_CLEAN);
 70e:	5e 9a       	sbi	0x0b, 6	; 11
 710:	08 95       	ret
		
	}
	else if(tempOrientation == 2)
 712:	82 30       	cpi	r24, 0x02	; 2
 714:	09 f4       	brne	.+2      	; 0x718 <DirectionReleaseUp+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD |= (1 << DIRECTION_SW2_CLEAN);
 716:	5c 9a       	sbi	0x0b, 4	; 11
 718:	08 95       	ret

0000071a <DirectionGetLeftState>:
}

// Reading Inputs
uint8_t DirectionGetLeftState()
{
	return (PINB & (1 << DIRECTION_LEFT_BUTTON));
 71a:	83 b1       	in	r24, 0x03	; 3
}
 71c:	82 70       	andi	r24, 0x02	; 2
 71e:	08 95       	ret

00000720 <DirectionGetRightState>:

uint8_t DirectionGetRightState()
{
	return (PINB & (1 << DIRECTION_RIGHT_BUTTON));
 720:	83 b1       	in	r24, 0x03	; 3
}
 722:	81 70       	andi	r24, 0x01	; 1
 724:	08 95       	ret

00000726 <DirectionGetUpState>:

uint8_t DirectionGetUpState()
{
	return (PINB & (1 << DIRECTION_UP_BUTTON));
 726:	83 b1       	in	r24, 0x03	; 3
}
 728:	88 70       	andi	r24, 0x08	; 8
 72a:	08 95       	ret

0000072c <DirectionGetDownState>:

uint8_t DirectionGetDownState()
{
	return (PINB & (1 << DIRECTION_DOWN_BUTTON));
 72c:	83 b1       	in	r24, 0x03	; 3
 72e:	84 70       	andi	r24, 0x04	; 4
 730:	08 95       	ret

00000732 <main>:
}

static void MainInitialize()
{
	// Set all ports to be configured as inputs
	DDRB = 0b00000000;
 732:	14 b8       	out	0x04, r1	; 4
	DDRC = 0b00000000;
 734:	17 b8       	out	0x07, r1	; 7
	DDRD = 0b00000000;
 736:	1a b8       	out	0x0a, r1	; 10

	// Disable all internal pull-up resistors
	PORTB = 0b00000000;
 738:	15 b8       	out	0x05, r1	; 5
	PORTC = 0b00000000;
 73a:	18 b8       	out	0x08, r1	; 8
	PORTD = 0b00000000;
 73c:	1b b8       	out	0x0b, r1	; 11

	// Enable necessary internal pull-up resistors
	PORTB |= (1 << MAIN_RIGHT_BUTTON_PULLUP);
 73e:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1 << MAIN_LEFT_BUTTON_PULLUP);
 740:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1 << MAIN_DOWN_BUTTON_PULLUP);
 742:	2a 9a       	sbi	0x05, 2	; 5
	PORTB |= (1 << MAIN_UP_BUTTON_PULLUP);
 744:	2b 9a       	sbi	0x05, 3	; 5
	PORTC |= (1 << MAIN_DIP5_SW1_PULLUP);
 746:	47 9a       	sbi	0x08, 7	; 8
	PORTC |= (1 << MAIN_DIP5_SW2_PULLUP);
 748:	45 9a       	sbi	0x08, 5	; 8
	PORTC |= (1 << MAIN_DIP5_SW3_PULLUP);
 74a:	46 9a       	sbi	0x08, 6	; 8
	PORTC |= (1 << MAIN_DIP5_SW4_PULLUP);
 74c:	44 9a       	sbi	0x08, 4	; 8
	PORTC |= (1 << MAIN_DIP5_SW5_PULLUP);
 74e:	42 9a       	sbi	0x08, 2	; 8
	PORTD |= (1 << MAIN_DIP2_SW1_PULLUP);
 750:	59 9a       	sbi	0x0b, 1	; 11
	PORTD |= (1 << MAIN_DIP2_SW2_PULLUP);
 752:	5a 9a       	sbi	0x0b, 2	; 11
	PORTB |= (1 << MAIN_PRESET_BUTTON_PULLUP);
 754:	2f 9a       	sbi	0x05, 7	; 5

	// Set specific port bits to be configured as outputs
	DDRD = DDRD | (1 << DIRECTION_SW1_CLEAN);
 756:	53 9a       	sbi	0x0a, 3	; 10
	DDRD = DDRD | (1 << DIRECTION_SW2_CLEAN);
 758:	54 9a       	sbi	0x0a, 4	; 10
	DDRD = DDRD | (1 << DIRECTION_SW3_CLEAN);
 75a:	55 9a       	sbi	0x0a, 5	; 10
	DDRD = DDRD | (1 << DIRECTION_SW4_CLEAN);
 75c:	56 9a       	sbi	0x0a, 6	; 10

	// Default button positions
	DirectionReleaseLeft(0);
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	0e 94 39 03 	call	0x672	; 0x672 <DirectionReleaseLeft>
	DirectionReleaseRight(0);
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DirectionReleaseRight>
	DirectionReleaseDown(0);
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DirectionReleaseDown>
	DirectionReleaseUp(0);
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	0e 94 81 03 	call	0x702	; 0x702 <DirectionReleaseUp>
	
	// Default remote mode code
	remoteModeCode = 1;
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <remoteModeCode>
	return(0);
}

static void MainGoClean()
{
	uint8_t remoteMode = ModeSwitchesRemote();
 77c:	0e 94 14 03 	call	0x628	; 0x628 <ModeSwitchesRemote>
	
	if(remoteMode == 0)
 780:	81 11       	cpse	r24, r1
 782:	4b c0       	rjmp	.+150    	; 0x81a <main+0xe8>
	{
		MainCleanerX(DirectionGetLeftState(), DirectionGetRightState());
 784:	0e 94 90 03 	call	0x720	; 0x720 <DirectionGetRightState>
 788:	d8 2f       	mov	r29, r24
 78a:	0e 94 8d 03 	call	0x71a	; 0x71a <DirectionGetLeftState>
 78e:	c8 2f       	mov	r28, r24
}

static void MainCleanerX(uint8_t tempLeftState, uint8_t tempRightState)
{
	// Grab cleaner from local dip switches
	if(ModeSwitchesX() == 0)
 790:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <ModeSwitchesX>
 794:	81 11       	cpse	r24, r1
 796:	05 c0       	rjmp	.+10     	; 0x7a2 <main+0x70>
	{
		CleanerXNeutral(tempLeftState, tempRightState);
 798:	6d 2f       	mov	r22, r29
 79a:	8c 2f       	mov	r24, r28
 79c:	0e 94 5e 00 	call	0xbc	; 0xbc <CleanerXNeutral>
 7a0:	16 c0       	rjmp	.+44     	; 0x7ce <main+0x9c>
	}
	else if(ModeSwitchesX() == 1)
 7a2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <ModeSwitchesX>
 7a6:	81 30       	cpi	r24, 0x01	; 1
 7a8:	29 f4       	brne	.+10     	; 0x7b4 <main+0x82>
	{
		CleanerXLeft(tempLeftState, tempRightState);
 7aa:	6d 2f       	mov	r22, r29
 7ac:	8c 2f       	mov	r24, r28
 7ae:	0e 94 88 00 	call	0x110	; 0x110 <CleanerXLeft>
 7b2:	0d c0       	rjmp	.+26     	; 0x7ce <main+0x9c>
	}
	else if(ModeSwitchesX() == 2)
 7b4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <ModeSwitchesX>
 7b8:	82 30       	cpi	r24, 0x02	; 2
 7ba:	29 f4       	brne	.+10     	; 0x7c6 <main+0x94>
	{
		CleanerXRight(tempLeftState, tempRightState);
 7bc:	6d 2f       	mov	r22, r29
 7be:	8c 2f       	mov	r24, r28
 7c0:	0e 94 b2 00 	call	0x164	; 0x164 <CleanerXRight>
 7c4:	04 c0       	rjmp	.+8      	; 0x7ce <main+0x9c>
	}
	else
	{
		CleanerXLastInput(tempLeftState, tempRightState);
 7c6:	6d 2f       	mov	r22, r29
 7c8:	8c 2f       	mov	r24, r28
 7ca:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <CleanerXLastInput>
	uint8_t remoteMode = ModeSwitchesRemote();
	
	if(remoteMode == 0)
	{
		MainCleanerX(DirectionGetLeftState(), DirectionGetRightState());
		MainCleanerY(DirectionGetDownState(), DirectionGetUpState());
 7ce:	0e 94 93 03 	call	0x726	; 0x726 <DirectionGetUpState>
 7d2:	d8 2f       	mov	r29, r24
 7d4:	0e 94 96 03 	call	0x72c	; 0x72c <DirectionGetDownState>
 7d8:	c8 2f       	mov	r28, r24
}

static void MainCleanerY(uint8_t tempDownState, uint8_t tempUpState)
{
	// Cleaning for y axis
	if(ModeSwitchesY() == 0)
 7da:	0e 94 fe 02 	call	0x5fc	; 0x5fc <ModeSwitchesY>
 7de:	81 11       	cpse	r24, r1
 7e0:	05 c0       	rjmp	.+10     	; 0x7ec <main+0xba>
	{
		CleanerYNeutral(tempDownState, tempUpState);
 7e2:	6d 2f       	mov	r22, r29
 7e4:	8c 2f       	mov	r24, r28
 7e6:	0e 94 a3 01 	call	0x346	; 0x346 <CleanerYNeutral>
 7ea:	c8 cf       	rjmp	.-112    	; 0x77c <main+0x4a>
	}
	else if(ModeSwitchesY() == 1)
 7ec:	0e 94 fe 02 	call	0x5fc	; 0x5fc <ModeSwitchesY>
 7f0:	81 30       	cpi	r24, 0x01	; 1
 7f2:	29 f4       	brne	.+10     	; 0x7fe <main+0xcc>
	{
		CleanerYDown(tempDownState, tempUpState);
 7f4:	6d 2f       	mov	r22, r29
 7f6:	8c 2f       	mov	r24, r28
 7f8:	0e 94 cd 01 	call	0x39a	; 0x39a <CleanerYDown>
 7fc:	bf cf       	rjmp	.-130    	; 0x77c <main+0x4a>
	}
	else if(ModeSwitchesY() == 2)
 7fe:	0e 94 fe 02 	call	0x5fc	; 0x5fc <ModeSwitchesY>
 802:	82 30       	cpi	r24, 0x02	; 2
 804:	29 f4       	brne	.+10     	; 0x810 <main+0xde>
	{
		CleanerYUp(tempDownState, tempUpState);
 806:	6d 2f       	mov	r22, r29
 808:	8c 2f       	mov	r24, r28
 80a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CleanerYUp>
 80e:	b6 cf       	rjmp	.-148    	; 0x77c <main+0x4a>
	}
	else
	{
		CleanerYLastInput(tempDownState, tempUpState);
 810:	6d 2f       	mov	r22, r29
 812:	8c 2f       	mov	r24, r28
 814:	0e 94 21 02 	call	0x442	; 0x442 <CleanerYLastInput>
 818:	b1 cf       	rjmp	.-158    	; 0x77c <main+0x4a>
		MainCleanerX(DirectionGetLeftState(), DirectionGetRightState());
		MainCleanerY(DirectionGetDownState(), DirectionGetUpState());
	}
	else
	{
		MainCleanerRemote(DirectionGetLeftState(), DirectionGetRightState(), DirectionGetDownState(), DirectionGetUpState());
 81a:	0e 94 93 03 	call	0x726	; 0x726 <DirectionGetUpState>
 81e:	d8 2f       	mov	r29, r24
 820:	0e 94 96 03 	call	0x72c	; 0x72c <DirectionGetDownState>
 824:	c8 2f       	mov	r28, r24
 826:	0e 94 90 03 	call	0x720	; 0x720 <DirectionGetRightState>
 82a:	18 2f       	mov	r17, r24
 82c:	0e 94 8d 03 	call	0x71a	; 0x71a <DirectionGetLeftState>
	}
}

static void MainCleanerRemote(uint8_t tempLeftState, uint8_t tempRightState, uint8_t tempDownState, uint8_t tempUpState)
{
	switch (remoteModeCode)
 830:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <remoteModeCode>
 834:	4e 2f       	mov	r20, r30
 836:	50 e0       	ldi	r21, 0x00	; 0
 838:	40 31       	cpi	r20, 0x10	; 16
 83a:	51 05       	cpc	r21, r1
 83c:	08 f0       	brcs	.+2      	; 0x840 <main+0x10e>
 83e:	9e cf       	rjmp	.-196    	; 0x77c <main+0x4a>
 840:	fa 01       	movw	r30, r20
 842:	e6 5c       	subi	r30, 0xC6	; 198
 844:	ff 4f       	sbci	r31, 0xFF	; 255
 846:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__tablejump2__>
	{
		case REMOTE_MODE_0:
			CleanerXNeutral(tempLeftState, tempRightState);
 84a:	61 2f       	mov	r22, r17
 84c:	0e 94 5e 00 	call	0xbc	; 0xbc <CleanerXNeutral>
			CleanerYNeutral(tempDownState, tempUpState);
 850:	6d 2f       	mov	r22, r29
 852:	8c 2f       	mov	r24, r28
 854:	0e 94 a3 01 	call	0x346	; 0x346 <CleanerYNeutral>
 858:	91 cf       	rjmp	.-222    	; 0x77c <main+0x4a>
			break;
		
		case REMOTE_MODE_1:
			CleanerXNeutral(tempLeftState, tempRightState);
 85a:	61 2f       	mov	r22, r17
 85c:	0e 94 5e 00 	call	0xbc	; 0xbc <CleanerXNeutral>
			CleanerYDown(tempDownState, tempUpState);
 860:	6d 2f       	mov	r22, r29
 862:	8c 2f       	mov	r24, r28
 864:	0e 94 cd 01 	call	0x39a	; 0x39a <CleanerYDown>
 868:	89 cf       	rjmp	.-238    	; 0x77c <main+0x4a>
			break;
		
		case REMOTE_MODE_2:
			CleanerXNeutral(tempLeftState, tempRightState);
 86a:	61 2f       	mov	r22, r17
 86c:	0e 94 5e 00 	call	0xbc	; 0xbc <CleanerXNeutral>
			CleanerYUp(tempDownState, tempUpState);
 870:	6d 2f       	mov	r22, r29
 872:	8c 2f       	mov	r24, r28
 874:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CleanerYUp>
 878:	81 cf       	rjmp	.-254    	; 0x77c <main+0x4a>
			break;
		
		case REMOTE_MODE_3:
			CleanerXNeutral(tempLeftState, tempRightState);
 87a:	61 2f       	mov	r22, r17
 87c:	0e 94 5e 00 	call	0xbc	; 0xbc <CleanerXNeutral>
			CleanerYLastInput(tempDownState, tempUpState);
 880:	6d 2f       	mov	r22, r29
 882:	8c 2f       	mov	r24, r28
 884:	0e 94 21 02 	call	0x442	; 0x442 <CleanerYLastInput>
 888:	79 cf       	rjmp	.-270    	; 0x77c <main+0x4a>
			break;
		
		case REMOTE_MODE_4:
			CleanerXLeft(tempLeftState, tempRightState);
 88a:	61 2f       	mov	r22, r17
 88c:	0e 94 88 00 	call	0x110	; 0x110 <CleanerXLeft>
			CleanerYNeutral(tempDownState, tempUpState);
 890:	6d 2f       	mov	r22, r29
 892:	8c 2f       	mov	r24, r28
 894:	0e 94 a3 01 	call	0x346	; 0x346 <CleanerYNeutral>
 898:	71 cf       	rjmp	.-286    	; 0x77c <main+0x4a>
			break;
		
		case REMOTE_MODE_5:
			CleanerXLeft(tempLeftState, tempRightState);
 89a:	61 2f       	mov	r22, r17
 89c:	0e 94 88 00 	call	0x110	; 0x110 <CleanerXLeft>
			CleanerYDown(tempDownState, tempUpState);
 8a0:	6d 2f       	mov	r22, r29
 8a2:	8c 2f       	mov	r24, r28
 8a4:	0e 94 cd 01 	call	0x39a	; 0x39a <CleanerYDown>
 8a8:	69 cf       	rjmp	.-302    	; 0x77c <main+0x4a>
			break;
		
		case REMOTE_MODE_6:
			CleanerXLeft(tempLeftState, tempRightState);
 8aa:	61 2f       	mov	r22, r17
 8ac:	0e 94 88 00 	call	0x110	; 0x110 <CleanerXLeft>
			CleanerYUp(tempDownState, tempUpState);
 8b0:	6d 2f       	mov	r22, r29
 8b2:	8c 2f       	mov	r24, r28
 8b4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CleanerYUp>
 8b8:	61 cf       	rjmp	.-318    	; 0x77c <main+0x4a>
			break;
		
		case REMOTE_MODE_7:
			CleanerXLeft(tempLeftState, tempRightState);
 8ba:	61 2f       	mov	r22, r17
 8bc:	0e 94 88 00 	call	0x110	; 0x110 <CleanerXLeft>
			CleanerYLastInput(tempDownState, tempUpState);
 8c0:	6d 2f       	mov	r22, r29
 8c2:	8c 2f       	mov	r24, r28
 8c4:	0e 94 21 02 	call	0x442	; 0x442 <CleanerYLastInput>
 8c8:	59 cf       	rjmp	.-334    	; 0x77c <main+0x4a>
			break;
		
		case REMOTE_MODE_8:
			CleanerXRight(tempLeftState, tempRightState);
 8ca:	61 2f       	mov	r22, r17
 8cc:	0e 94 b2 00 	call	0x164	; 0x164 <CleanerXRight>
			CleanerYNeutral(tempDownState, tempUpState);
 8d0:	6d 2f       	mov	r22, r29
 8d2:	8c 2f       	mov	r24, r28
 8d4:	0e 94 a3 01 	call	0x346	; 0x346 <CleanerYNeutral>
 8d8:	51 cf       	rjmp	.-350    	; 0x77c <main+0x4a>
			break;
		
		case REMOTE_MODE_9:
			CleanerXRight(tempLeftState, tempRightState);
 8da:	61 2f       	mov	r22, r17
 8dc:	0e 94 b2 00 	call	0x164	; 0x164 <CleanerXRight>
			CleanerYDown(tempDownState, tempUpState);
 8e0:	6d 2f       	mov	r22, r29
 8e2:	8c 2f       	mov	r24, r28
 8e4:	0e 94 cd 01 	call	0x39a	; 0x39a <CleanerYDown>
 8e8:	49 cf       	rjmp	.-366    	; 0x77c <main+0x4a>
			break;
		
		case REMOTE_MODE_10:
			CleanerXRight(tempLeftState, tempRightState);
 8ea:	61 2f       	mov	r22, r17
 8ec:	0e 94 b2 00 	call	0x164	; 0x164 <CleanerXRight>
			CleanerYUp(tempDownState, tempUpState);
 8f0:	6d 2f       	mov	r22, r29
 8f2:	8c 2f       	mov	r24, r28
 8f4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CleanerYUp>
 8f8:	41 cf       	rjmp	.-382    	; 0x77c <main+0x4a>
			break;
		
		case REMOTE_MODE_11:
			CleanerXRight(tempLeftState, tempRightState);
 8fa:	61 2f       	mov	r22, r17
 8fc:	0e 94 b2 00 	call	0x164	; 0x164 <CleanerXRight>
			CleanerYLastInput(tempDownState, tempUpState);
 900:	6d 2f       	mov	r22, r29
 902:	8c 2f       	mov	r24, r28
 904:	0e 94 21 02 	call	0x442	; 0x442 <CleanerYLastInput>
 908:	39 cf       	rjmp	.-398    	; 0x77c <main+0x4a>
			break;
		
		case REMOTE_MODE_12:
			CleanerXLastInput(tempLeftState, tempRightState);
 90a:	61 2f       	mov	r22, r17
 90c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <CleanerXLastInput>
			CleanerYNeutral(tempDownState, tempUpState);
 910:	6d 2f       	mov	r22, r29
 912:	8c 2f       	mov	r24, r28
 914:	0e 94 a3 01 	call	0x346	; 0x346 <CleanerYNeutral>
 918:	31 cf       	rjmp	.-414    	; 0x77c <main+0x4a>
			break;
		
		case REMOTE_MODE_13:
			CleanerXLastInput(tempLeftState, tempRightState);
 91a:	61 2f       	mov	r22, r17
 91c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <CleanerXLastInput>
			CleanerYDown(tempDownState, tempUpState);
 920:	6d 2f       	mov	r22, r29
 922:	8c 2f       	mov	r24, r28
 924:	0e 94 cd 01 	call	0x39a	; 0x39a <CleanerYDown>
 928:	29 cf       	rjmp	.-430    	; 0x77c <main+0x4a>
			break;
		
		case REMOTE_MODE_14:
			CleanerXLastInput(tempLeftState, tempRightState);
 92a:	61 2f       	mov	r22, r17
 92c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <CleanerXLastInput>
			CleanerYUp(tempDownState, tempUpState);
 930:	6d 2f       	mov	r22, r29
 932:	8c 2f       	mov	r24, r28
 934:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CleanerYUp>
 938:	21 cf       	rjmp	.-446    	; 0x77c <main+0x4a>
			break;
		
		case REMOTE_MODE_15:
			CleanerXLastInput(tempLeftState, tempRightState);
 93a:	61 2f       	mov	r22, r17
 93c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <CleanerXLastInput>
			CleanerYLastInput(tempDownState, tempUpState);
 940:	6d 2f       	mov	r22, r29
 942:	8c 2f       	mov	r24, r28
 944:	0e 94 21 02 	call	0x442	; 0x442 <CleanerYLastInput>
 948:	19 cf       	rjmp	.-462    	; 0x77c <main+0x4a>

0000094a <__tablejump2__>:
 94a:	ee 0f       	add	r30, r30
 94c:	ff 1f       	adc	r31, r31
 94e:	05 90       	lpm	r0, Z+
 950:	f4 91       	lpm	r31, Z
 952:	e0 2d       	mov	r30, r0
 954:	09 94       	ijmp

00000956 <_exit>:
 956:	f8 94       	cli

00000958 <__stop_program>:
 958:	ff cf       	rjmp	.-2      	; 0x958 <__stop_program>
