
magicians_socd_cleaner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000009b8  00000a4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  00000a4e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ae6  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004b7  00000000  00000000  0000275e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a38  00000000  00000000  00002c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  00003650  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000670  00000000  00000000  0000399c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cd6  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00005ce2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	73 00       	.word	0x0073	; ????
  76:	9b 00       	.word	0x009b	; ????
  78:	e2 00       	.word	0x00e2	; ????
  7a:	28 01       	movw	r4, r16
  7c:	6d 01       	movw	r12, r26
  7e:	b1 01       	movw	r22, r2
  80:	f4 01       	movw	r30, r8
  82:	37 02       	muls	r19, r23
  84:	79 02       	muls	r23, r25

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d4 e0       	ldi	r29, 0x04	; 4
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	e8 eb       	ldi	r30, 0xB8	; 184
  9a:	f9 e0       	ldi	r31, 0x09	; 9
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	a2 e0       	ldi	r26, 0x02	; 2
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a6 30       	cpi	r26, 0x06	; 6
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 1c 04 	call	0x838	; 0x838 <main>
  bc:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <CleanerTetris>:
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
				DirectionPressUp(ModeSwitchesOrientation());
				CleanerYAxisState = UP;
			}
			else if ( (tempUpState > 0) )
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
  c8:	92 2f       	mov	r25, r18
  ca:	e0 91 00 01 	lds	r30, 0x0100
  ce:	0e 2f       	mov	r16, r30
				DirectionPressDown(ModeSwitchesOrientation());
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	f8 01       	movw	r30, r16
  d4:	3a 97       	sbiw	r30, 0x0a	; 10
  d6:	e9 30       	cpi	r30, 0x09	; 9
				CleanerYAxisState = DOWN;
  d8:	f1 05       	cpc	r31, r1
  da:	08 f0       	brcs	.+2      	; 0xde <CleanerTetris+0x1a>
  dc:	60 c2       	rjmp	.+1216   	; 0x59e <__stack+0x9f>
  de:	e6 5c       	subi	r30, 0xC6	; 198
			}
			else
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	0c 94 ba 04 	jmp	0x974	; 0x974 <__tablejump2__>
  e6:	81 11       	cpse	r24, r1
				DirectionPressUp(ModeSwitchesOrientation());
  e8:	08 c0       	rjmp	.+16     	; 0xfa <CleanerTetris+0x36>
  ea:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
  ee:	0e 94 7e 03 	call	0x6fc	; 0x6fc <DirectionPressDown>
				CleanerYAxisState = DOWN_LOST;
  f2:	8f e0       	ldi	r24, 0x0F	; 15
  f4:	80 93 00 01 	sts	0x0100, r24
			}
			break;
		
		case UP:
			if ( (tempUpState > 0) )
  f8:	52 c2       	rjmp	.+1188   	; 0x59e <__stack+0x9f>
  fa:	61 11       	cpse	r22, r1
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
  fc:	08 c0       	rjmp	.+16     	; 0x10e <CleanerTetris+0x4a>
  fe:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 102:	0e 94 c8 03 	call	0x790	; 0x790 <DirectionPressUp>
				CleanerYAxisState = NEUTRAL_Y;
 106:	81 e1       	ldi	r24, 0x11	; 17
 108:	80 93 00 01 	sts	0x0100, r24
			}
			else if ( (tempDownState == 0) )
 10c:	48 c2       	rjmp	.+1168   	; 0x59e <__stack+0x9f>
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 10e:	41 11       	cpse	r20, r1
 110:	08 c0       	rjmp	.+16     	; 0x122 <CleanerTetris+0x5e>
 112:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
				DirectionPressDown(ModeSwitchesOrientation());
 116:	0e 94 34 03 	call	0x668	; 0x668 <DirectionPressLeft>
 11a:	8b e0       	ldi	r24, 0x0B	; 11
 11c:	80 93 00 01 	sts	0x0100, r24
				CleanerYAxisState = UP_LOST;
 120:	3e c2       	rjmp	.+1148   	; 0x59e <__stack+0x9f>
 122:	91 11       	cpse	r25, r1
 124:	3c c2       	rjmp	.+1144   	; 0x59e <__stack+0x9f>
			}
			else
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 126:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 12a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <DirectionPressRight>
				DirectionPressUp(ModeSwitchesOrientation());
 12e:	8d e0       	ldi	r24, 0x0D	; 13
 130:	80 93 00 01 	sts	0x0100, r24
 134:	34 c2       	rjmp	.+1128   	; 0x59e <__stack+0x9f>
				CleanerYAxisState = UP;
 136:	44 23       	and	r20, r20
 138:	d9 f0       	breq	.+54     	; 0x170 <CleanerTetris+0xac>
 13a:	99 23       	and	r25, r25
 13c:	d9 f0       	breq	.+54     	; 0x174 <CleanerTetris+0xb0>
			}
			break;
		
		case UP_LOST:
			if ( (tempUpState > 0) )
 13e:	88 23       	and	r24, r24
 140:	09 f4       	brne	.+2      	; 0x144 <CleanerTetris+0x80>
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 142:	21 c2       	rjmp	.+1090   	; 0x586 <__stack+0x87>
 144:	66 23       	and	r22, r22
 146:	21 f1       	breq	.+72     	; 0x190 <CleanerTetris+0xcc>
 148:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
				DirectionPressDown(ModeSwitchesOrientation());
 14c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <DirectionReleaseLeft>
 150:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
				CleanerYAxisState = DOWN;
 154:	0e 94 0f 03 	call	0x61e	; 0x61e <DirectionReleaseRight>
 158:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
			}
			else if ( (tempDownState > 0) )
 15c:	0e 94 a3 03 	call	0x746	; 0x746 <DirectionReleaseDown>
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 160:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 164:	0e 94 ed 03 	call	0x7da	; 0x7da <DirectionReleaseUp>
				DirectionPressUp(ModeSwitchesOrientation());
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	80 93 00 01 	sts	0x0100, r24
				CleanerYAxisState = UP;
 16e:	17 c2       	rjmp	.+1070   	; 0x59e <__stack+0x9f>
 170:	91 11       	cpse	r25, r1
 172:	0c c0       	rjmp	.+24     	; 0x18c <CleanerTetris+0xc8>
 174:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
			}
			else
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 178:	0e 94 59 03 	call	0x6b2	; 0x6b2 <DirectionReleaseLeft>
 17c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
				DirectionPressDown(ModeSwitchesOrientation());
 180:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <DirectionPressRight>
 184:	8c e0       	ldi	r24, 0x0C	; 12
				CleanerYAxisState = UP_LOST;
 186:	80 93 00 01 	sts	0x0100, r24
 18a:	09 c2       	rjmp	.+1042   	; 0x59e <__stack+0x9f>
 18c:	61 11       	cpse	r22, r1
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
				DirectionPressRight(ModeSwitchesOrientation());
				CleanerDirectionState = LEFT_LOST_TETRIS;
			}
			else if ( (tempUpState == 0) )
 18e:	0c c0       	rjmp	.+24     	; 0x1a8 <CleanerTetris+0xe4>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 190:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 194:	0e 94 59 03 	call	0x6b2	; 0x6b2 <DirectionReleaseLeft>
				DirectionPressUp(ModeSwitchesOrientation());
 198:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 19c:	0e 94 c8 03 	call	0x790	; 0x790 <DirectionPressUp>
				CleanerDirectionState = LEFT_LOST_TETRIS;
 1a0:	8c e0       	ldi	r24, 0x0C	; 12
 1a2:	80 93 00 01 	sts	0x0100, r24
 1a6:	fb c1       	rjmp	.+1014   	; 0x59e <__stack+0x9f>
			}
			else if ( (tempDownState == 0) )
 1a8:	81 11       	cpse	r24, r1
 1aa:	f9 c1       	rjmp	.+1010   	; 0x59e <__stack+0x9f>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 1ac:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 1b0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <DirectionReleaseLeft>
				DirectionPressDown(ModeSwitchesOrientation());
 1b4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 1b8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <DirectionPressDown>
				CleanerDirectionState = LEFT_LOST_TETRIS;
 1bc:	8c e0       	ldi	r24, 0x0C	; 12
 1be:	80 93 00 01 	sts	0x0100, r24
 1c2:	ed c1       	rjmp	.+986    	; 0x59e <__stack+0x9f>
			}
		//}
		break;
		//-----------------------------------------------------------------
		case LEFT_LOST_TETRIS:
		if ( (tempLeftState == 0) && (tempRightState > 0) && (tempDownState > 0) && (tempUpState > 0) )
 1c4:	41 11       	cpse	r20, r1
 1c6:	1a c0       	rjmp	.+52     	; 0x1fc <CleanerTetris+0x138>
 1c8:	99 23       	and	r25, r25
 1ca:	d1 f0       	breq	.+52     	; 0x200 <CleanerTetris+0x13c>
 1cc:	88 23       	and	r24, r24
 1ce:	31 f1       	breq	.+76     	; 0x21c <CleanerTetris+0x158>
 1d0:	66 23       	and	r22, r22
 1d2:	91 f1       	breq	.+100    	; 0x238 <CleanerTetris+0x174>
		{
			DirectionReleaseRight(ModeSwitchesOrientation());
 1d4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 1d8:	0e 94 0f 03 	call	0x61e	; 0x61e <DirectionReleaseRight>
			DirectionReleaseDown(ModeSwitchesOrientation());
 1dc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 1e0:	0e 94 a3 03 	call	0x746	; 0x746 <DirectionReleaseDown>
			DirectionReleaseUp(ModeSwitchesOrientation());
 1e4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 1e8:	0e 94 ed 03 	call	0x7da	; 0x7da <DirectionReleaseUp>
			DirectionPressLeft(ModeSwitchesOrientation());
 1ec:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 1f0:	0e 94 34 03 	call	0x668	; 0x668 <DirectionPressLeft>
			CleanerDirectionState = LEFT_TETRIS;
 1f4:	8b e0       	ldi	r24, 0x0B	; 11
 1f6:	80 93 00 01 	sts	0x0100, r24
 1fa:	d1 c1       	rjmp	.+930    	; 0x59e <__stack+0x9f>
		}
		else if ( (tempRightState == 0) )
 1fc:	91 11       	cpse	r25, r1
 1fe:	0c c0       	rjmp	.+24     	; 0x218 <CleanerTetris+0x154>
		{
			CleanerDirectionState = RIGHT_TETRIS;
 200:	8d e0       	ldi	r24, 0x0D	; 13
 202:	80 93 00 01 	sts	0x0100, r24
			while( (DirectionGetLeftState() == 0) && (DirectionGetRightState() == 0) ){}
 206:	0e 94 10 04 	call	0x820	; 0x820 <DirectionGetLeftState>
 20a:	81 11       	cpse	r24, r1
 20c:	c8 c1       	rjmp	.+912    	; 0x59e <__stack+0x9f>
 20e:	0e 94 13 04 	call	0x826	; 0x826 <DirectionGetRightState>
 212:	88 23       	and	r24, r24
 214:	c1 f3       	breq	.-16     	; 0x206 <CleanerTetris+0x142>
 216:	c3 c1       	rjmp	.+902    	; 0x59e <__stack+0x9f>
		}
		else if ( (tempDownState == 0) )
 218:	81 11       	cpse	r24, r1
 21a:	0c c0       	rjmp	.+24     	; 0x234 <CleanerTetris+0x170>
		{
			CleanerDirectionState = DOWN_TETRIS;
 21c:	8f e0       	ldi	r24, 0x0F	; 15
 21e:	80 93 00 01 	sts	0x0100, r24
			while( (DirectionGetLeftState() == 0) && (DirectionGetDownState() == 0) ){}
 222:	0e 94 10 04 	call	0x820	; 0x820 <DirectionGetLeftState>
 226:	81 11       	cpse	r24, r1
 228:	ba c1       	rjmp	.+884    	; 0x59e <__stack+0x9f>
 22a:	0e 94 19 04 	call	0x832	; 0x832 <DirectionGetDownState>
 22e:	88 23       	and	r24, r24
 230:	c1 f3       	breq	.-16     	; 0x222 <CleanerTetris+0x15e>
 232:	b5 c1       	rjmp	.+874    	; 0x59e <__stack+0x9f>
		}
		else if ( (tempUpState == 0) )
 234:	61 11       	cpse	r22, r1
 236:	b3 c1       	rjmp	.+870    	; 0x59e <__stack+0x9f>
		{
			CleanerDirectionState = UP_TETRIS;
 238:	81 e1       	ldi	r24, 0x11	; 17
 23a:	80 93 00 01 	sts	0x0100, r24
			while( (DirectionGetLeftState() == 0) && (DirectionGetUpState() == 0) ){}
 23e:	0e 94 10 04 	call	0x820	; 0x820 <DirectionGetLeftState>
 242:	81 11       	cpse	r24, r1
 244:	ac c1       	rjmp	.+856    	; 0x59e <__stack+0x9f>
 246:	0e 94 16 04 	call	0x82c	; 0x82c <DirectionGetUpState>
 24a:	88 23       	and	r24, r24
 24c:	c1 f3       	breq	.-16     	; 0x23e <CleanerTetris+0x17a>
 24e:	a7 c1       	rjmp	.+846    	; 0x59e <__stack+0x9f>
		break;
		//-----------------------------------------------------------------
		case RIGHT_TETRIS:
		//if ( (tempLeftState + tempRightState + tempDownState + tempUpState) > 2 )
		//{
			if ( (tempLeftState > 0) && (tempRightState > 0) && (tempDownState > 0) && (tempUpState > 0) )
 250:	44 23       	and	r20, r20
 252:	d9 f0       	breq	.+54     	; 0x28a <CleanerTetris+0x1c6>
 254:	99 23       	and	r25, r25
 256:	29 f1       	breq	.+74     	; 0x2a2 <CleanerTetris+0x1de>
 258:	88 23       	and	r24, r24
 25a:	09 f4       	brne	.+2      	; 0x25e <CleanerTetris+0x19a>
 25c:	97 c1       	rjmp	.+814    	; 0x58c <__stack+0x8d>
 25e:	66 23       	and	r22, r22
 260:	11 f1       	breq	.+68     	; 0x2a6 <CleanerTetris+0x1e2>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 262:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 266:	0e 94 59 03 	call	0x6b2	; 0x6b2 <DirectionReleaseLeft>
				DirectionReleaseRight(ModeSwitchesOrientation());
 26a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 26e:	0e 94 0f 03 	call	0x61e	; 0x61e <DirectionReleaseRight>
				DirectionReleaseDown(ModeSwitchesOrientation());
 272:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 276:	0e 94 a3 03 	call	0x746	; 0x746 <DirectionReleaseDown>
				DirectionReleaseUp(ModeSwitchesOrientation());
 27a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 27e:	0e 94 ed 03 	call	0x7da	; 0x7da <DirectionReleaseUp>
				CleanerDirectionState = NEUTRAL_TETRIS;
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	80 93 00 01 	sts	0x0100, r24
 288:	8a c1       	rjmp	.+788    	; 0x59e <__stack+0x9f>
			}
			else if ( (tempLeftState == 0) )
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 28a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 28e:	0e 94 0f 03 	call	0x61e	; 0x61e <DirectionReleaseRight>
				DirectionPressLeft(ModeSwitchesOrientation());
 292:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 296:	0e 94 34 03 	call	0x668	; 0x668 <DirectionPressLeft>
				CleanerDirectionState = RIGHT_LOST_TETRIS;
 29a:	8e e0       	ldi	r24, 0x0E	; 14
 29c:	80 93 00 01 	sts	0x0100, r24
 2a0:	7e c1       	rjmp	.+764    	; 0x59e <__stack+0x9f>
			}
			else if ( (tempUpState == 0) )
 2a2:	61 11       	cpse	r22, r1
 2a4:	0c c0       	rjmp	.+24     	; 0x2be <CleanerTetris+0x1fa>
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 2a6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 2aa:	0e 94 0f 03 	call	0x61e	; 0x61e <DirectionReleaseRight>
				DirectionPressUp(ModeSwitchesOrientation());
 2ae:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 2b2:	0e 94 c8 03 	call	0x790	; 0x790 <DirectionPressUp>
				CleanerDirectionState = RIGHT_LOST_TETRIS;
 2b6:	8e e0       	ldi	r24, 0x0E	; 14
 2b8:	80 93 00 01 	sts	0x0100, r24
 2bc:	70 c1       	rjmp	.+736    	; 0x59e <__stack+0x9f>
			}
			else if ( (tempDownState == 0) )
 2be:	81 11       	cpse	r24, r1
 2c0:	6e c1       	rjmp	.+732    	; 0x59e <__stack+0x9f>
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 2c2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 2c6:	0e 94 0f 03 	call	0x61e	; 0x61e <DirectionReleaseRight>
				DirectionPressDown(ModeSwitchesOrientation());
 2ca:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 2ce:	0e 94 7e 03 	call	0x6fc	; 0x6fc <DirectionPressDown>
				CleanerDirectionState = RIGHT_LOST_TETRIS;
 2d2:	8e e0       	ldi	r24, 0x0E	; 14
 2d4:	80 93 00 01 	sts	0x0100, r24
 2d8:	62 c1       	rjmp	.+708    	; 0x59e <__stack+0x9f>
			}
		//}
		break;
		//-----------------------------------------------------------------
		case RIGHT_LOST_TETRIS:
		if ( (tempLeftState > 0) && (tempRightState == 0) && (tempDownState > 0) && (tempUpState > 0) )
 2da:	44 23       	and	r20, r20
 2dc:	d1 f0       	breq	.+52     	; 0x312 <CleanerTetris+0x24e>
 2de:	91 11       	cpse	r25, r1
 2e0:	24 c0       	rjmp	.+72     	; 0x32a <CleanerTetris+0x266>
 2e2:	88 23       	and	r24, r24
 2e4:	21 f1       	breq	.+72     	; 0x32e <CleanerTetris+0x26a>
 2e6:	66 23       	and	r22, r22
 2e8:	81 f1       	breq	.+96     	; 0x34a <CleanerTetris+0x286>
		{
			DirectionReleaseLeft(ModeSwitchesOrientation());
 2ea:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 2ee:	0e 94 59 03 	call	0x6b2	; 0x6b2 <DirectionReleaseLeft>
			DirectionReleaseDown(ModeSwitchesOrientation());
 2f2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 2f6:	0e 94 a3 03 	call	0x746	; 0x746 <DirectionReleaseDown>
			DirectionReleaseUp(ModeSwitchesOrientation());
 2fa:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 2fe:	0e 94 ed 03 	call	0x7da	; 0x7da <DirectionReleaseUp>
			DirectionPressRight(ModeSwitchesOrientation());
 302:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 306:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <DirectionPressRight>
			CleanerDirectionState = RIGHT_TETRIS;
 30a:	8d e0       	ldi	r24, 0x0D	; 13
 30c:	80 93 00 01 	sts	0x0100, r24
 310:	46 c1       	rjmp	.+652    	; 0x59e <__stack+0x9f>
		}
		else if ( (tempLeftState == 0) )
		{
			CleanerDirectionState = LEFT_TETRIS;
 312:	8b e0       	ldi	r24, 0x0B	; 11
 314:	80 93 00 01 	sts	0x0100, r24
			while( (DirectionGetRightState() == 0) && (DirectionGetLeftState() == 0) ){}
 318:	0e 94 13 04 	call	0x826	; 0x826 <DirectionGetRightState>
 31c:	81 11       	cpse	r24, r1
 31e:	3f c1       	rjmp	.+638    	; 0x59e <__stack+0x9f>
 320:	0e 94 10 04 	call	0x820	; 0x820 <DirectionGetLeftState>
 324:	88 23       	and	r24, r24
 326:	c1 f3       	breq	.-16     	; 0x318 <CleanerTetris+0x254>
 328:	3a c1       	rjmp	.+628    	; 0x59e <__stack+0x9f>
		}
		else if ( (tempDownState == 0) )
 32a:	81 11       	cpse	r24, r1
 32c:	0c c0       	rjmp	.+24     	; 0x346 <CleanerTetris+0x282>
		{
			CleanerDirectionState = DOWN_TETRIS;
 32e:	8f e0       	ldi	r24, 0x0F	; 15
 330:	80 93 00 01 	sts	0x0100, r24
			while( (DirectionGetRightState() == 0) && (DirectionGetDownState() == 0) ){}
 334:	0e 94 13 04 	call	0x826	; 0x826 <DirectionGetRightState>
 338:	81 11       	cpse	r24, r1
 33a:	31 c1       	rjmp	.+610    	; 0x59e <__stack+0x9f>
 33c:	0e 94 19 04 	call	0x832	; 0x832 <DirectionGetDownState>
 340:	88 23       	and	r24, r24
 342:	c1 f3       	breq	.-16     	; 0x334 <CleanerTetris+0x270>
 344:	2c c1       	rjmp	.+600    	; 0x59e <__stack+0x9f>
		}
		else if ( (tempUpState == 0) )
 346:	61 11       	cpse	r22, r1
 348:	2a c1       	rjmp	.+596    	; 0x59e <__stack+0x9f>
		{
			CleanerDirectionState = UP_TETRIS;
 34a:	81 e1       	ldi	r24, 0x11	; 17
 34c:	80 93 00 01 	sts	0x0100, r24
			while( (DirectionGetRightState() == 0) && (DirectionGetUpState() == 0) ){}
 350:	0e 94 13 04 	call	0x826	; 0x826 <DirectionGetRightState>
 354:	81 11       	cpse	r24, r1
 356:	23 c1       	rjmp	.+582    	; 0x59e <__stack+0x9f>
 358:	0e 94 16 04 	call	0x82c	; 0x82c <DirectionGetUpState>
 35c:	88 23       	and	r24, r24
 35e:	c1 f3       	breq	.-16     	; 0x350 <CleanerTetris+0x28c>
 360:	1e c1       	rjmp	.+572    	; 0x59e <__stack+0x9f>
		break;
		//-----------------------------------------------------------------
		case DOWN_TETRIS:
		//if ( (tempLeftState + tempRightState + tempDownState + tempUpState) > 2 )
		//{
			if ( (tempLeftState > 0) && (tempRightState > 0) && (tempDownState > 0) && (tempUpState > 0) )
 362:	44 23       	and	r20, r20
 364:	d9 f0       	breq	.+54     	; 0x39c <CleanerTetris+0x2d8>
 366:	99 23       	and	r25, r25
 368:	d9 f0       	breq	.+54     	; 0x3a0 <CleanerTetris+0x2dc>
 36a:	88 23       	and	r24, r24
 36c:	09 f4       	brne	.+2      	; 0x370 <CleanerTetris+0x2ac>
 36e:	11 c1       	rjmp	.+546    	; 0x592 <__stack+0x93>
 370:	66 23       	and	r22, r22
 372:	11 f1       	breq	.+68     	; 0x3b8 <CleanerTetris+0x2f4>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 374:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 378:	0e 94 59 03 	call	0x6b2	; 0x6b2 <DirectionReleaseLeft>
				DirectionReleaseRight(ModeSwitchesOrientation());
 37c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 380:	0e 94 0f 03 	call	0x61e	; 0x61e <DirectionReleaseRight>
				DirectionReleaseDown(ModeSwitchesOrientation());
 384:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 388:	0e 94 a3 03 	call	0x746	; 0x746 <DirectionReleaseDown>
				DirectionReleaseUp(ModeSwitchesOrientation());
 38c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 390:	0e 94 ed 03 	call	0x7da	; 0x7da <DirectionReleaseUp>
				CleanerDirectionState = NEUTRAL_TETRIS;
 394:	8a e0       	ldi	r24, 0x0A	; 10
 396:	80 93 00 01 	sts	0x0100, r24
 39a:	01 c1       	rjmp	.+514    	; 0x59e <__stack+0x9f>
			}
			else if ( (tempRightState == 0) )
 39c:	91 11       	cpse	r25, r1
 39e:	fc c0       	rjmp	.+504    	; 0x598 <__stack+0x99>
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 3a0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 3a4:	0e 94 a3 03 	call	0x746	; 0x746 <DirectionReleaseDown>
				DirectionPressRight(ModeSwitchesOrientation());
 3a8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 3ac:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <DirectionPressRight>
				CleanerDirectionState = DOWN_LOST_TETRIS;
 3b0:	80 e1       	ldi	r24, 0x10	; 16
 3b2:	80 93 00 01 	sts	0x0100, r24
 3b6:	f3 c0       	rjmp	.+486    	; 0x59e <__stack+0x9f>
			}
			else if ( (tempUpState == 0) )
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 3b8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 3bc:	0e 94 a3 03 	call	0x746	; 0x746 <DirectionReleaseDown>
				DirectionPressUp(ModeSwitchesOrientation());
 3c0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 3c4:	0e 94 c8 03 	call	0x790	; 0x790 <DirectionPressUp>
				CleanerDirectionState = DOWN_LOST_TETRIS;
 3c8:	80 e1       	ldi	r24, 0x10	; 16
 3ca:	80 93 00 01 	sts	0x0100, r24
 3ce:	e7 c0       	rjmp	.+462    	; 0x59e <__stack+0x9f>
			}
			else if ( (tempLeftState == 0) )
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 3d0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 3d4:	0e 94 a3 03 	call	0x746	; 0x746 <DirectionReleaseDown>
				DirectionPressLeft(ModeSwitchesOrientation());
 3d8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 3dc:	0e 94 34 03 	call	0x668	; 0x668 <DirectionPressLeft>
				CleanerDirectionState = DOWN_LOST_TETRIS;
 3e0:	80 e1       	ldi	r24, 0x10	; 16
 3e2:	80 93 00 01 	sts	0x0100, r24
 3e6:	db c0       	rjmp	.+438    	; 0x59e <__stack+0x9f>
			}
		//}
		break;
		//-----------------------------------------------------------------
		case DOWN_LOST_TETRIS:
		if ( (tempLeftState > 0) && (tempRightState > 0) && (tempDownState == 0) && (tempUpState > 0) )
 3e8:	44 23       	and	r20, r20
 3ea:	09 f4       	brne	.+2      	; 0x3ee <CleanerTetris+0x32a>
 3ec:	c6 c0       	rjmp	.+396    	; 0x57a <__stack+0x7b>
 3ee:	99 23       	and	r25, r25
 3f0:	c1 f0       	breq	.+48     	; 0x422 <CleanerTetris+0x35e>
 3f2:	81 11       	cpse	r24, r1
 3f4:	2e c0       	rjmp	.+92     	; 0x452 <CleanerTetris+0x38e>
 3f6:	66 23       	and	r22, r22
 3f8:	71 f1       	breq	.+92     	; 0x456 <CleanerTetris+0x392>
		{
			DirectionReleaseRight(ModeSwitchesOrientation());
 3fa:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 3fe:	0e 94 0f 03 	call	0x61e	; 0x61e <DirectionReleaseRight>
			DirectionReleaseLeft(ModeSwitchesOrientation());
 402:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 406:	0e 94 59 03 	call	0x6b2	; 0x6b2 <DirectionReleaseLeft>
			DirectionReleaseUp(ModeSwitchesOrientation());
 40a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 40e:	0e 94 ed 03 	call	0x7da	; 0x7da <DirectionReleaseUp>
			DirectionPressDown(ModeSwitchesOrientation());
 412:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 416:	0e 94 7e 03 	call	0x6fc	; 0x6fc <DirectionPressDown>
			CleanerDirectionState = DOWN_TETRIS;
 41a:	8f e0       	ldi	r24, 0x0F	; 15
 41c:	80 93 00 01 	sts	0x0100, r24
 420:	be c0       	rjmp	.+380    	; 0x59e <__stack+0x9f>
		}
		else if ( (tempRightState == 0) )
		{
			CleanerDirectionState = RIGHT_TETRIS;
 422:	8d e0       	ldi	r24, 0x0D	; 13
 424:	80 93 00 01 	sts	0x0100, r24
			while( (DirectionGetDownState() == 0) && (DirectionGetRightState() == 0) ){}
 428:	0e 94 19 04 	call	0x832	; 0x832 <DirectionGetDownState>
 42c:	81 11       	cpse	r24, r1
 42e:	b7 c0       	rjmp	.+366    	; 0x59e <__stack+0x9f>
 430:	0e 94 13 04 	call	0x826	; 0x826 <DirectionGetRightState>
 434:	88 23       	and	r24, r24
 436:	c1 f3       	breq	.-16     	; 0x428 <CleanerTetris+0x364>
 438:	b2 c0       	rjmp	.+356    	; 0x59e <__stack+0x9f>
		}
		else if ( (tempLeftState == 0) )
		{
			CleanerDirectionState = LEFT_TETRIS;
 43a:	8b e0       	ldi	r24, 0x0B	; 11
 43c:	80 93 00 01 	sts	0x0100, r24
			while( (DirectionGetDownState() == 0) && (DirectionGetLeftState() == 0) ){}
 440:	0e 94 19 04 	call	0x832	; 0x832 <DirectionGetDownState>
 444:	81 11       	cpse	r24, r1
 446:	ab c0       	rjmp	.+342    	; 0x59e <__stack+0x9f>
 448:	0e 94 10 04 	call	0x820	; 0x820 <DirectionGetLeftState>
 44c:	88 23       	and	r24, r24
 44e:	c1 f3       	breq	.-16     	; 0x440 <CleanerTetris+0x37c>
 450:	a6 c0       	rjmp	.+332    	; 0x59e <__stack+0x9f>
		}
		else if ( (tempUpState == 0) )
 452:	61 11       	cpse	r22, r1
 454:	a4 c0       	rjmp	.+328    	; 0x59e <__stack+0x9f>
		{
			CleanerDirectionState = UP_TETRIS;
 456:	81 e1       	ldi	r24, 0x11	; 17
 458:	80 93 00 01 	sts	0x0100, r24
			while( (DirectionGetDownState() == 0) && (DirectionGetUpState() == 0) ){}
 45c:	0e 94 19 04 	call	0x832	; 0x832 <DirectionGetDownState>
 460:	81 11       	cpse	r24, r1
 462:	9d c0       	rjmp	.+314    	; 0x59e <__stack+0x9f>
 464:	0e 94 16 04 	call	0x82c	; 0x82c <DirectionGetUpState>
 468:	88 23       	and	r24, r24
 46a:	c1 f3       	breq	.-16     	; 0x45c <CleanerTetris+0x398>
 46c:	98 c0       	rjmp	.+304    	; 0x59e <__stack+0x9f>
		break;
		//-----------------------------------------------------------------
		case UP_TETRIS:
		//if ( (tempLeftState + tempRightState + tempDownState + tempUpState) > 2 )
		//{
			if ( (tempLeftState > 0) && (tempRightState > 0) && (tempDownState > 0) && (tempUpState > 0) )
 46e:	44 23       	and	r20, r20
 470:	09 f4       	brne	.+2      	; 0x474 <CleanerTetris+0x3b0>
 472:	86 c0       	rjmp	.+268    	; 0x580 <__stack+0x81>
 474:	99 23       	and	r25, r25
 476:	c9 f0       	breq	.+50     	; 0x4aa <CleanerTetris+0x3e6>
 478:	88 23       	and	r24, r24
 47a:	79 f1       	breq	.+94     	; 0x4da <CleanerTetris+0x416>
 47c:	66 23       	and	r22, r22
 47e:	09 f4       	brne	.+2      	; 0x482 <CleanerTetris+0x3be>
 480:	8e c0       	rjmp	.+284    	; 0x59e <__stack+0x9f>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 482:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 486:	0e 94 59 03 	call	0x6b2	; 0x6b2 <DirectionReleaseLeft>
				DirectionReleaseRight(ModeSwitchesOrientation());
 48a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 48e:	0e 94 0f 03 	call	0x61e	; 0x61e <DirectionReleaseRight>
				DirectionReleaseDown(ModeSwitchesOrientation());
 492:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 496:	0e 94 a3 03 	call	0x746	; 0x746 <DirectionReleaseDown>
				DirectionReleaseUp(ModeSwitchesOrientation());
 49a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 49e:	0e 94 ed 03 	call	0x7da	; 0x7da <DirectionReleaseUp>
				CleanerDirectionState = NEUTRAL_TETRIS;
 4a2:	8a e0       	ldi	r24, 0x0A	; 10
 4a4:	80 93 00 01 	sts	0x0100, r24
 4a8:	7a c0       	rjmp	.+244    	; 0x59e <__stack+0x9f>
			}
			else if ( (tempRightState == 0) )
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 4aa:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 4ae:	0e 94 ed 03 	call	0x7da	; 0x7da <DirectionReleaseUp>
				DirectionPressRight(ModeSwitchesOrientation());
 4b2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 4b6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <DirectionPressRight>
				CleanerDirectionState = UP_LOST_TETRIS;
 4ba:	82 e1       	ldi	r24, 0x12	; 18
 4bc:	80 93 00 01 	sts	0x0100, r24
 4c0:	6e c0       	rjmp	.+220    	; 0x59e <__stack+0x9f>
			}
			else if ( (tempLeftState == 0) )
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 4c2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 4c6:	0e 94 ed 03 	call	0x7da	; 0x7da <DirectionReleaseUp>
				DirectionPressLeft(ModeSwitchesOrientation());
 4ca:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 4ce:	0e 94 34 03 	call	0x668	; 0x668 <DirectionPressLeft>
				CleanerDirectionState = UP_LOST_TETRIS;
 4d2:	82 e1       	ldi	r24, 0x12	; 18
 4d4:	80 93 00 01 	sts	0x0100, r24
 4d8:	62 c0       	rjmp	.+196    	; 0x59e <__stack+0x9f>
			}
			else if ( (tempDownState == 0) )
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 4da:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 4de:	0e 94 ed 03 	call	0x7da	; 0x7da <DirectionReleaseUp>
				DirectionPressDown(ModeSwitchesOrientation());
 4e2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 4e6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <DirectionPressDown>
				CleanerDirectionState = UP_LOST_TETRIS;
 4ea:	82 e1       	ldi	r24, 0x12	; 18
 4ec:	80 93 00 01 	sts	0x0100, r24
 4f0:	56 c0       	rjmp	.+172    	; 0x59e <__stack+0x9f>
			}
		//}
		break;
		//-----------------------------------------------------------------
		case UP_LOST_TETRIS:
		if ( (tempLeftState > 0) && (tempRightState > 0) && (tempDownState > 0) && (tempUpState == 0) )
 4f2:	44 23       	and	r20, r20
 4f4:	d1 f0       	breq	.+52     	; 0x52a <__stack+0x2b>
 4f6:	99 23       	and	r25, r25
 4f8:	d1 f0       	breq	.+52     	; 0x52e <__stack+0x2f>
 4fa:	88 23       	and	r24, r24
 4fc:	31 f1       	breq	.+76     	; 0x54a <__stack+0x4b>
 4fe:	61 11       	cpse	r22, r1
 500:	4e c0       	rjmp	.+156    	; 0x59e <__stack+0x9f>
		{
			DirectionReleaseRight(ModeSwitchesOrientation());
 502:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 506:	0e 94 0f 03 	call	0x61e	; 0x61e <DirectionReleaseRight>
			DirectionReleaseDown(ModeSwitchesOrientation());
 50a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 50e:	0e 94 a3 03 	call	0x746	; 0x746 <DirectionReleaseDown>
			DirectionReleaseUp(ModeSwitchesOrientation());
 512:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 516:	0e 94 ed 03 	call	0x7da	; 0x7da <DirectionReleaseUp>
			DirectionPressLeft(ModeSwitchesOrientation());
 51a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ModeSwitchesOrientation>
 51e:	0e 94 34 03 	call	0x668	; 0x668 <DirectionPressLeft>
			CleanerDirectionState = UP_TETRIS;
 522:	81 e1       	ldi	r24, 0x11	; 17
 524:	80 93 00 01 	sts	0x0100, r24
 528:	3a c0       	rjmp	.+116    	; 0x59e <__stack+0x9f>
		}
		else if ( (tempRightState == 0) )
 52a:	91 11       	cpse	r25, r1
 52c:	0c c0       	rjmp	.+24     	; 0x546 <__stack+0x47>
		{
			CleanerDirectionState = RIGHT_TETRIS;
 52e:	8d e0       	ldi	r24, 0x0D	; 13
 530:	80 93 00 01 	sts	0x0100, r24
			while( (DirectionGetUpState() == 0) && (DirectionGetRightState() == 0) ){}
 534:	0e 94 16 04 	call	0x82c	; 0x82c <DirectionGetUpState>
 538:	81 11       	cpse	r24, r1
 53a:	31 c0       	rjmp	.+98     	; 0x59e <__stack+0x9f>
 53c:	0e 94 13 04 	call	0x826	; 0x826 <DirectionGetRightState>
 540:	88 23       	and	r24, r24
 542:	c1 f3       	breq	.-16     	; 0x534 <__stack+0x35>
 544:	2c c0       	rjmp	.+88     	; 0x59e <__stack+0x9f>
		}
		else if ( (tempDownState == 0) )
 546:	81 11       	cpse	r24, r1
 548:	0c c0       	rjmp	.+24     	; 0x562 <__stack+0x63>
		{
			CleanerDirectionState = DOWN_TETRIS;
 54a:	8f e0       	ldi	r24, 0x0F	; 15
 54c:	80 93 00 01 	sts	0x0100, r24
			while( (DirectionGetUpState() == 0) && (DirectionGetDownState() == 0) ){}
 550:	0e 94 16 04 	call	0x82c	; 0x82c <DirectionGetUpState>
 554:	81 11       	cpse	r24, r1
 556:	23 c0       	rjmp	.+70     	; 0x59e <__stack+0x9f>
 558:	0e 94 19 04 	call	0x832	; 0x832 <DirectionGetDownState>
 55c:	88 23       	and	r24, r24
 55e:	c1 f3       	breq	.-16     	; 0x550 <__stack+0x51>
 560:	1e c0       	rjmp	.+60     	; 0x59e <__stack+0x9f>
		}
		else if ( (tempLeftState == 0) )
		{
			CleanerDirectionState = LEFT_TETRIS;
 562:	8b e0       	ldi	r24, 0x0B	; 11
 564:	80 93 00 01 	sts	0x0100, r24
			while( (DirectionGetUpState() == 0) && (DirectionGetLeftState() == 0) ){}
 568:	0e 94 16 04 	call	0x82c	; 0x82c <DirectionGetUpState>
 56c:	81 11       	cpse	r24, r1
 56e:	17 c0       	rjmp	.+46     	; 0x59e <__stack+0x9f>
 570:	0e 94 10 04 	call	0x820	; 0x820 <DirectionGetLeftState>
 574:	88 23       	and	r24, r24
 576:	c1 f3       	breq	.-16     	; 0x568 <__stack+0x69>
 578:	12 c0       	rjmp	.+36     	; 0x59e <__stack+0x9f>
			DirectionReleaseLeft(ModeSwitchesOrientation());
			DirectionReleaseUp(ModeSwitchesOrientation());
			DirectionPressDown(ModeSwitchesOrientation());
			CleanerDirectionState = DOWN_TETRIS;
		}
		else if ( (tempRightState == 0) )
 57a:	91 11       	cpse	r25, r1
 57c:	5e cf       	rjmp	.-324    	; 0x43a <CleanerTetris+0x376>
 57e:	51 cf       	rjmp	.-350    	; 0x422 <CleanerTetris+0x35e>
				DirectionReleaseRight(ModeSwitchesOrientation());
				DirectionReleaseDown(ModeSwitchesOrientation());
				DirectionReleaseUp(ModeSwitchesOrientation());
				CleanerDirectionState = NEUTRAL_TETRIS;
			}
			else if ( (tempRightState == 0) )
 580:	91 11       	cpse	r25, r1
 582:	9f cf       	rjmp	.-194    	; 0x4c2 <CleanerTetris+0x3fe>
 584:	92 cf       	rjmp	.-220    	; 0x4aa <CleanerTetris+0x3e6>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
				DirectionPressRight(ModeSwitchesOrientation());
				CleanerDirectionState = LEFT_LOST_TETRIS;
			}
			else if ( (tempUpState == 0) )
 586:	61 11       	cpse	r22, r1
 588:	11 ce       	rjmp	.-990    	; 0x1ac <CleanerTetris+0xe8>
 58a:	02 ce       	rjmp	.-1020   	; 0x190 <CleanerTetris+0xcc>
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
				DirectionPressLeft(ModeSwitchesOrientation());
				CleanerDirectionState = RIGHT_LOST_TETRIS;
			}
			else if ( (tempUpState == 0) )
 58c:	61 11       	cpse	r22, r1
 58e:	99 ce       	rjmp	.-718    	; 0x2c2 <CleanerTetris+0x1fe>
 590:	8a ce       	rjmp	.-748    	; 0x2a6 <CleanerTetris+0x1e2>
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
				DirectionPressRight(ModeSwitchesOrientation());
				CleanerDirectionState = DOWN_LOST_TETRIS;
			}
			else if ( (tempUpState == 0) )
 592:	61 11       	cpse	r22, r1
 594:	04 c0       	rjmp	.+8      	; 0x59e <__stack+0x9f>
 596:	10 cf       	rjmp	.-480    	; 0x3b8 <CleanerTetris+0x2f4>
 598:	61 11       	cpse	r22, r1
 59a:	1a cf       	rjmp	.-460    	; 0x3d0 <CleanerTetris+0x30c>
 59c:	0d cf       	rjmp	.-486    	; 0x3b8 <CleanerTetris+0x2f4>
		{
			// leave outputs as they were when entering state
		}
		break;
	}
}
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	08 95       	ret

000005a4 <ModeSwitchesOrientation>:

uint8_t ModeSwitchesOrientation()
{
	// Decide mode for default OEM controller
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() > 0) )
 5a4:	49 9b       	sbis	0x09, 1	; 9
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <ModeSwitchesOrientation+0x8>
 5a8:	4a 99       	sbic	0x09, 2	; 9
 5aa:	0a c0       	rjmp	.+20     	; 0x5c0 <ModeSwitchesOrientation+0x1c>
	{
		// Mode code for G  R  L  U  D on JST connector
		modeCode = 0;
	}
	else if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() == 0) )
 5ac:	49 9b       	sbis	0x09, 1	; 9
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <ModeSwitchesOrientation+0x10>
 5b0:	4a 9b       	sbis	0x09, 2	; 9
 5b2:	08 c0       	rjmp	.+16     	; 0x5c4 <ModeSwitchesOrientation+0x20>
	{
		// Mode code for G  L  R  D  U on JST connector
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip2Sw1() == 0) && (ModeSwitchesReadDip2Sw2() > 0) )
 5b4:	49 99       	sbic	0x09, 1	; 9
 5b6:	08 c0       	rjmp	.+16     	; 0x5c8 <ModeSwitchesOrientation+0x24>
 5b8:	4a 99       	sbic	0x09, 2	; 9
 5ba:	08 c0       	rjmp	.+16     	; 0x5cc <ModeSwitchesOrientation+0x28>
		modeCode = 2;
	}
	else
	{
		// Mode code for future orientation
		modeCode = 3;
 5bc:	83 e0       	ldi	r24, 0x03	; 3
 5be:	08 95       	ret
	// Decide mode for default OEM controller
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() > 0) )
	{
		// Mode code for G  R  L  U  D on JST connector
		modeCode = 0;
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	08 95       	ret
	}
	else if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() == 0) )
	{
		// Mode code for G  L  R  D  U on JST connector
		modeCode = 1;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	08 95       	ret
		modeCode = 2;
	}
	else
	{
		// Mode code for future orientation
		modeCode = 3;
 5c8:	83 e0       	ldi	r24, 0x03	; 3
 5ca:	08 95       	ret
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip2Sw1() == 0) && (ModeSwitchesReadDip2Sw2() > 0) )
	{
		// Mode code for G  R  U  L  D on JST connector
		modeCode = 2;
 5cc:	82 e0       	ldi	r24, 0x02	; 2
		// Mode code for future orientation
		modeCode = 3;
	}
	
	return modeCode;
 5ce:	08 95       	ret

000005d0 <DirectionPressRightLed>:
}

// LED Outputs
void DirectionPressRightLed()
{
	PORTD &= ~(1 << DIRECTION_RIGHT_LED);
 5d0:	58 98       	cbi	0x0b, 0	; 11
 5d2:	08 95       	ret

000005d4 <DirectionPressRight>:
	}
	DirectionReleaseLeftLed();
}

void DirectionPressRight(uint8_t tempOrientation)
{
 5d4:	cf 93       	push	r28
 5d6:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 5d8:	88 e3       	ldi	r24, 0x38	; 56
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 c0 04 	call	0x980	; 0x980 <eeprom_read_byte>
 5e0:	80 93 02 01 	sts	0x0102, r24
	
	// Press right on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 5e4:	c1 11       	cpse	r28, r1
 5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <DirectionPressRight+0x20>
	{
		// G  R  L  U  D on JST connector
		if(invertModeCode == 0)
 5e8:	81 11       	cpse	r24, r1
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DirectionPressRight+0x1c>
		{
			PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 5ec:	5b 98       	cbi	0x0b, 3	; 11
 5ee:	11 c0       	rjmp	.+34     	; 0x612 <DirectionPressRight+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW1_CLEAN);
 5f0:	5b 9a       	sbi	0x0b, 3	; 11
 5f2:	0f c0       	rjmp	.+30     	; 0x612 <DirectionPressRight+0x3e>
		}
	}
	else if(tempOrientation == 1)
 5f4:	c1 30       	cpi	r28, 0x01	; 1
 5f6:	31 f4       	brne	.+12     	; 0x604 <DirectionPressRight+0x30>
	{
		// G  L  R  D  U on JST connector
		if(invertModeCode == 0)
 5f8:	81 11       	cpse	r24, r1
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DirectionPressRight+0x2c>
		{
			PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 5fc:	5c 98       	cbi	0x0b, 4	; 11
 5fe:	09 c0       	rjmp	.+18     	; 0x612 <DirectionPressRight+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW2_CLEAN);
 600:	5c 9a       	sbi	0x0b, 4	; 11
 602:	07 c0       	rjmp	.+14     	; 0x612 <DirectionPressRight+0x3e>
		}
	}
	else if(tempOrientation == 2)
 604:	c2 30       	cpi	r28, 0x02	; 2
 606:	29 f4       	brne	.+10     	; 0x612 <DirectionPressRight+0x3e>
	{
		// G  R  U  L  D on JST connector
		if(invertModeCode == 0)
 608:	81 11       	cpse	r24, r1
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DirectionPressRight+0x3c>
		{
			PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 60c:	5b 98       	cbi	0x0b, 3	; 11
 60e:	01 c0       	rjmp	.+2      	; 0x612 <DirectionPressRight+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW1_CLEAN);
 610:	5b 9a       	sbi	0x0b, 3	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionPressRightLed();
 612:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DirectionPressRightLed>
}
 616:	cf 91       	pop	r28
 618:	08 95       	ret

0000061a <DirectionReleaseRightLed>:
	PORTD &= ~(1 << DIRECTION_RIGHT_LED);
}

void DirectionReleaseRightLed()
{
	PORTD |= (1 << DIRECTION_RIGHT_LED);
 61a:	58 9a       	sbi	0x0b, 0	; 11
 61c:	08 95       	ret

0000061e <DirectionReleaseRight>:
	}
	DirectionPressRightLed();
}

void DirectionReleaseRight(uint8_t tempOrientation)
{
 61e:	cf 93       	push	r28
 620:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 622:	88 e3       	ldi	r24, 0x38	; 56
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	0e 94 c0 04 	call	0x980	; 0x980 <eeprom_read_byte>
 62a:	80 93 02 01 	sts	0x0102, r24
	
	// Release right on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 62e:	c1 11       	cpse	r28, r1
 630:	06 c0       	rjmp	.+12     	; 0x63e <DirectionReleaseRight+0x20>
	{
		// G  R  L  U  D on JST connector
		if(invertModeCode == 0)
 632:	81 11       	cpse	r24, r1
 634:	02 c0       	rjmp	.+4      	; 0x63a <DirectionReleaseRight+0x1c>
		{
			PORTD |= (1 << DIRECTION_SW1_CLEAN);
 636:	5b 9a       	sbi	0x0b, 3	; 11
 638:	11 c0       	rjmp	.+34     	; 0x65c <DirectionReleaseRight+0x3e>
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 63a:	5b 98       	cbi	0x0b, 3	; 11
 63c:	0f c0       	rjmp	.+30     	; 0x65c <DirectionReleaseRight+0x3e>
		}
	}
	else if(tempOrientation == 1)
 63e:	c1 30       	cpi	r28, 0x01	; 1
 640:	31 f4       	brne	.+12     	; 0x64e <DirectionReleaseRight+0x30>
	{
		// G  L  R  D  U on JST connector
		if(invertModeCode == 0)
 642:	81 11       	cpse	r24, r1
 644:	02 c0       	rjmp	.+4      	; 0x64a <DirectionReleaseRight+0x2c>
		{
			PORTD |= (1 << DIRECTION_SW2_CLEAN);
 646:	5c 9a       	sbi	0x0b, 4	; 11
 648:	09 c0       	rjmp	.+18     	; 0x65c <DirectionReleaseRight+0x3e>
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 64a:	5c 98       	cbi	0x0b, 4	; 11
 64c:	07 c0       	rjmp	.+14     	; 0x65c <DirectionReleaseRight+0x3e>
		}
	}
	else if(tempOrientation == 2)
 64e:	c2 30       	cpi	r28, 0x02	; 2
 650:	29 f4       	brne	.+10     	; 0x65c <DirectionReleaseRight+0x3e>
	{
		// G  R  U  L  D on JST connector
		if(invertModeCode == 0)
 652:	81 11       	cpse	r24, r1
 654:	02 c0       	rjmp	.+4      	; 0x65a <DirectionReleaseRight+0x3c>
		{
			PORTD |= (1 << DIRECTION_SW1_CLEAN);
 656:	5b 9a       	sbi	0x0b, 3	; 11
 658:	01 c0       	rjmp	.+2      	; 0x65c <DirectionReleaseRight+0x3e>
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 65a:	5b 98       	cbi	0x0b, 3	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionReleaseRightLed();
 65c:	0e 94 0d 03 	call	0x61a	; 0x61a <DirectionReleaseRightLed>
}
 660:	cf 91       	pop	r28
 662:	08 95       	ret

00000664 <DirectionPressLeftLed>:
	PORTD |= (1 << DIRECTION_RIGHT_LED);
}

void DirectionPressLeftLed()
{
	PORTB &= ~(1 << DIRECTION_LEFT_LED);
 664:	2c 98       	cbi	0x05, 4	; 5
 666:	08 95       	ret

00000668 <DirectionPressLeft>:

/* Function Definitions */

// Setting Outputs
void DirectionPressLeft(uint8_t tempOrientation)
{
 668:	cf 93       	push	r28
 66a:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 66c:	88 e3       	ldi	r24, 0x38	; 56
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 94 c0 04 	call	0x980	; 0x980 <eeprom_read_byte>
 674:	80 93 02 01 	sts	0x0102, r24
	
	// Press left on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 678:	c1 11       	cpse	r28, r1
 67a:	06 c0       	rjmp	.+12     	; 0x688 <DirectionPressLeft+0x20>
	{
		// G  R  L  U  D on JST connector
		if(invertModeCode == 0)
 67c:	81 11       	cpse	r24, r1
 67e:	02 c0       	rjmp	.+4      	; 0x684 <DirectionPressLeft+0x1c>
		{
			PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 680:	5c 98       	cbi	0x0b, 4	; 11
 682:	11 c0       	rjmp	.+34     	; 0x6a6 <DirectionPressLeft+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW2_CLEAN);
 684:	5c 9a       	sbi	0x0b, 4	; 11
 686:	0f c0       	rjmp	.+30     	; 0x6a6 <DirectionPressLeft+0x3e>
		}
		
	}
	else if(tempOrientation == 1)
 688:	c1 30       	cpi	r28, 0x01	; 1
 68a:	31 f4       	brne	.+12     	; 0x698 <DirectionPressLeft+0x30>
	{
		// G  L  R  D  U on JST connector
		if(invertModeCode == 0)
 68c:	81 11       	cpse	r24, r1
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DirectionPressLeft+0x2c>
		{
			PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 690:	5b 98       	cbi	0x0b, 3	; 11
 692:	09 c0       	rjmp	.+18     	; 0x6a6 <DirectionPressLeft+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW1_CLEAN);
 694:	5b 9a       	sbi	0x0b, 3	; 11
 696:	07 c0       	rjmp	.+14     	; 0x6a6 <DirectionPressLeft+0x3e>
		}
	}
	else if(tempOrientation == 2)
 698:	c2 30       	cpi	r28, 0x02	; 2
 69a:	29 f4       	brne	.+10     	; 0x6a6 <DirectionPressLeft+0x3e>
	{
		// G  R  U  L  D on JST connector
		if(invertModeCode == 0)
 69c:	81 11       	cpse	r24, r1
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DirectionPressLeft+0x3c>
		{
			PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 6a0:	5d 98       	cbi	0x0b, 5	; 11
 6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <DirectionPressLeft+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW3_CLEAN);
 6a4:	5d 9a       	sbi	0x0b, 5	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionPressLeftLed();
 6a6:	0e 94 32 03 	call	0x664	; 0x664 <DirectionPressLeftLed>
}
 6aa:	cf 91       	pop	r28
 6ac:	08 95       	ret

000006ae <DirectionReleaseLeftLed>:
	PORTB &= ~(1 << DIRECTION_LEFT_LED);
}

void DirectionReleaseLeftLed()
{
	PORTB |= (1 << DIRECTION_LEFT_LED);
 6ae:	2c 9a       	sbi	0x05, 4	; 5
 6b0:	08 95       	ret

000006b2 <DirectionReleaseLeft>:
	}
	DirectionPressLeftLed();
}

void DirectionReleaseLeft(uint8_t tempOrientation)
{
 6b2:	cf 93       	push	r28
 6b4:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 6b6:	88 e3       	ldi	r24, 0x38	; 56
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	0e 94 c0 04 	call	0x980	; 0x980 <eeprom_read_byte>
 6be:	80 93 02 01 	sts	0x0102, r24
	
	// Release left on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 6c2:	c1 11       	cpse	r28, r1
 6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <DirectionReleaseLeft+0x20>
	{
		// G  R  L  U  D on JST connector
		if(invertModeCode == 0)
 6c6:	81 11       	cpse	r24, r1
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DirectionReleaseLeft+0x1c>
		{
			PORTD |= (1 << DIRECTION_SW2_CLEAN);
 6ca:	5c 9a       	sbi	0x0b, 4	; 11
 6cc:	11 c0       	rjmp	.+34     	; 0x6f0 <DirectionReleaseLeft+0x3e>
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 6ce:	5c 98       	cbi	0x0b, 4	; 11
 6d0:	0f c0       	rjmp	.+30     	; 0x6f0 <DirectionReleaseLeft+0x3e>
		}
	}
	else if(tempOrientation == 1)
 6d2:	c1 30       	cpi	r28, 0x01	; 1
 6d4:	31 f4       	brne	.+12     	; 0x6e2 <DirectionReleaseLeft+0x30>
	{
		// G  L  R  D  U on JST connector
		if(invertModeCode == 0)
 6d6:	81 11       	cpse	r24, r1
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DirectionReleaseLeft+0x2c>
		{
			PORTD |= (1 << DIRECTION_SW1_CLEAN);
 6da:	5b 9a       	sbi	0x0b, 3	; 11
 6dc:	09 c0       	rjmp	.+18     	; 0x6f0 <DirectionReleaseLeft+0x3e>
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 6de:	5b 98       	cbi	0x0b, 3	; 11
 6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <DirectionReleaseLeft+0x3e>
		}
	}
	else if(tempOrientation == 2)
 6e2:	c2 30       	cpi	r28, 0x02	; 2
 6e4:	29 f4       	brne	.+10     	; 0x6f0 <DirectionReleaseLeft+0x3e>
	{
		// G  R  U  L  D on JST connector
		if(invertModeCode == 0)
 6e6:	81 11       	cpse	r24, r1
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <DirectionReleaseLeft+0x3c>
		{
			PORTD |= (1 << DIRECTION_SW3_CLEAN);
 6ea:	5d 9a       	sbi	0x0b, 5	; 11
 6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <DirectionReleaseLeft+0x3e>
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 6ee:	5d 98       	cbi	0x0b, 5	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionReleaseLeftLed();
 6f0:	0e 94 57 03 	call	0x6ae	; 0x6ae <DirectionReleaseLeftLed>
}
 6f4:	cf 91       	pop	r28
 6f6:	08 95       	ret

000006f8 <DirectionPressDownLed>:
	PORTB |= (1 << DIRECTION_LEFT_LED);
}

void DirectionPressDownLed()
{
	PORTB &= ~(1 << DIRECTION_DOWN_LED);
 6f8:	2d 98       	cbi	0x05, 5	; 5
 6fa:	08 95       	ret

000006fc <DirectionPressDown>:
	}
	DirectionReleaseRightLed();
}

void DirectionPressDown(uint8_t tempOrientation)
{
 6fc:	cf 93       	push	r28
 6fe:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 700:	88 e3       	ldi	r24, 0x38	; 56
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 c0 04 	call	0x980	; 0x980 <eeprom_read_byte>
 708:	80 93 02 01 	sts	0x0102, r24
	
	// Press down on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 70c:	c1 11       	cpse	r28, r1
 70e:	06 c0       	rjmp	.+12     	; 0x71c <DirectionPressDown+0x20>
	{
		// G  R  L  U  D on JST connector
		if(invertModeCode == 0)
 710:	81 11       	cpse	r24, r1
 712:	02 c0       	rjmp	.+4      	; 0x718 <DirectionPressDown+0x1c>
		{
			PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 714:	5e 98       	cbi	0x0b, 6	; 11
 716:	11 c0       	rjmp	.+34     	; 0x73a <DirectionPressDown+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW4_CLEAN);
 718:	5e 9a       	sbi	0x0b, 6	; 11
 71a:	0f c0       	rjmp	.+30     	; 0x73a <DirectionPressDown+0x3e>
		}
	}
	else if(tempOrientation == 1)
 71c:	c1 30       	cpi	r28, 0x01	; 1
 71e:	31 f4       	brne	.+12     	; 0x72c <DirectionPressDown+0x30>
	{
		// G  L  R  D  U on JST connector
		if(invertModeCode == 0)
 720:	81 11       	cpse	r24, r1
 722:	02 c0       	rjmp	.+4      	; 0x728 <DirectionPressDown+0x2c>
		{
			PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 724:	5d 98       	cbi	0x0b, 5	; 11
 726:	09 c0       	rjmp	.+18     	; 0x73a <DirectionPressDown+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW3_CLEAN);
 728:	5d 9a       	sbi	0x0b, 5	; 11
 72a:	07 c0       	rjmp	.+14     	; 0x73a <DirectionPressDown+0x3e>
		}
	}
	else if(tempOrientation == 2)
 72c:	c2 30       	cpi	r28, 0x02	; 2
 72e:	29 f4       	brne	.+10     	; 0x73a <DirectionPressDown+0x3e>
	{
		// G  R  U  L  D on JST connector
		if(invertModeCode == 0)
 730:	81 11       	cpse	r24, r1
 732:	02 c0       	rjmp	.+4      	; 0x738 <DirectionPressDown+0x3c>
		{
			PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 734:	5e 98       	cbi	0x0b, 6	; 11
 736:	01 c0       	rjmp	.+2      	; 0x73a <DirectionPressDown+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW4_CLEAN);
 738:	5e 9a       	sbi	0x0b, 6	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionPressDownLed();
 73a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DirectionPressDownLed>
}
 73e:	cf 91       	pop	r28
 740:	08 95       	ret

00000742 <DirectionReleaseDownLed>:
	PORTB &= ~(1 << DIRECTION_DOWN_LED);
}

void DirectionReleaseDownLed()
{
	PORTB |= (1 << DIRECTION_DOWN_LED);
 742:	2d 9a       	sbi	0x05, 5	; 5
 744:	08 95       	ret

00000746 <DirectionReleaseDown>:
	}
	DirectionPressDownLed();
}

void DirectionReleaseDown(uint8_t tempOrientation)
{
 746:	cf 93       	push	r28
 748:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 74a:	88 e3       	ldi	r24, 0x38	; 56
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 c0 04 	call	0x980	; 0x980 <eeprom_read_byte>
 752:	80 93 02 01 	sts	0x0102, r24
	
	// Release down on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 756:	c1 11       	cpse	r28, r1
 758:	06 c0       	rjmp	.+12     	; 0x766 <DirectionReleaseDown+0x20>
	{
		// G  R  L  U  D on JST connector
		if(invertModeCode == 0)
 75a:	81 11       	cpse	r24, r1
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DirectionReleaseDown+0x1c>
		{
			PORTD |= (1 << DIRECTION_SW4_CLEAN);
 75e:	5e 9a       	sbi	0x0b, 6	; 11
 760:	11 c0       	rjmp	.+34     	; 0x784 <DirectionReleaseDown+0x3e>
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 762:	5e 98       	cbi	0x0b, 6	; 11
 764:	0f c0       	rjmp	.+30     	; 0x784 <DirectionReleaseDown+0x3e>
		}
	}
	else if(tempOrientation == 1)
 766:	c1 30       	cpi	r28, 0x01	; 1
 768:	31 f4       	brne	.+12     	; 0x776 <DirectionReleaseDown+0x30>
	{
		// G  L  R  D  U on JST connector
		if(invertModeCode == 0)
 76a:	81 11       	cpse	r24, r1
 76c:	02 c0       	rjmp	.+4      	; 0x772 <DirectionReleaseDown+0x2c>
		{
			PORTD |= (1 << DIRECTION_SW3_CLEAN);
 76e:	5d 9a       	sbi	0x0b, 5	; 11
 770:	09 c0       	rjmp	.+18     	; 0x784 <DirectionReleaseDown+0x3e>
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 772:	5d 98       	cbi	0x0b, 5	; 11
 774:	07 c0       	rjmp	.+14     	; 0x784 <DirectionReleaseDown+0x3e>
		}
	}
	else if(tempOrientation == 2)
 776:	c2 30       	cpi	r28, 0x02	; 2
 778:	29 f4       	brne	.+10     	; 0x784 <DirectionReleaseDown+0x3e>
	{
		// G  R  U  L  D on JST connector
		if(invertModeCode == 0)
 77a:	81 11       	cpse	r24, r1
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DirectionReleaseDown+0x3c>
		{
			PORTD |= (1 << DIRECTION_SW4_CLEAN);
 77e:	5e 9a       	sbi	0x0b, 6	; 11
 780:	01 c0       	rjmp	.+2      	; 0x784 <DirectionReleaseDown+0x3e>
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 782:	5e 98       	cbi	0x0b, 6	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionReleaseDownLed();
 784:	0e 94 a1 03 	call	0x742	; 0x742 <DirectionReleaseDownLed>
}
 788:	cf 91       	pop	r28
 78a:	08 95       	ret

0000078c <DirectionPressUpLed>:
	PORTB |= (1 << DIRECTION_DOWN_LED);
}

void DirectionPressUpLed()
{
	PORTB &= ~(1 << DIRECTION_UP_LED);
 78c:	2e 98       	cbi	0x05, 6	; 5
 78e:	08 95       	ret

00000790 <DirectionPressUp>:
	}
	DirectionReleaseDownLed();
}

void DirectionPressUp(uint8_t tempOrientation)
{
 790:	cf 93       	push	r28
 792:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 794:	88 e3       	ldi	r24, 0x38	; 56
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 c0 04 	call	0x980	; 0x980 <eeprom_read_byte>
 79c:	80 93 02 01 	sts	0x0102, r24
	
	// Press up on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 7a0:	c1 11       	cpse	r28, r1
 7a2:	06 c0       	rjmp	.+12     	; 0x7b0 <DirectionPressUp+0x20>
	{
		// G  R  L  U  D on JST connector
		if(invertModeCode == 0)
 7a4:	81 11       	cpse	r24, r1
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DirectionPressUp+0x1c>
		{
			PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 7a8:	5d 98       	cbi	0x0b, 5	; 11
 7aa:	11 c0       	rjmp	.+34     	; 0x7ce <DirectionPressUp+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW3_CLEAN);
 7ac:	5d 9a       	sbi	0x0b, 5	; 11
 7ae:	0f c0       	rjmp	.+30     	; 0x7ce <DirectionPressUp+0x3e>
		}
	}
	else if(tempOrientation == 1)
 7b0:	c1 30       	cpi	r28, 0x01	; 1
 7b2:	31 f4       	brne	.+12     	; 0x7c0 <DirectionPressUp+0x30>
	{
		// G  L  R  D  U on JST connector
		if(invertModeCode == 0)
 7b4:	81 11       	cpse	r24, r1
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <DirectionPressUp+0x2c>
		{
			PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 7b8:	5e 98       	cbi	0x0b, 6	; 11
 7ba:	09 c0       	rjmp	.+18     	; 0x7ce <DirectionPressUp+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW4_CLEAN);
 7bc:	5e 9a       	sbi	0x0b, 6	; 11
 7be:	07 c0       	rjmp	.+14     	; 0x7ce <DirectionPressUp+0x3e>
		}
	}
	else if(tempOrientation == 2)
 7c0:	c2 30       	cpi	r28, 0x02	; 2
 7c2:	29 f4       	brne	.+10     	; 0x7ce <DirectionPressUp+0x3e>
	{
		// G  R  U  L  D on JST connector
		if(invertModeCode == 0)
 7c4:	81 11       	cpse	r24, r1
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <DirectionPressUp+0x3c>
		{
			PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 7c8:	5c 98       	cbi	0x0b, 4	; 11
 7ca:	01 c0       	rjmp	.+2      	; 0x7ce <DirectionPressUp+0x3e>
		}
		else
		{
			PORTD |= (1 << DIRECTION_SW2_CLEAN);
 7cc:	5c 9a       	sbi	0x0b, 4	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionPressUpLed();
 7ce:	0e 94 c6 03 	call	0x78c	; 0x78c <DirectionPressUpLed>
}
 7d2:	cf 91       	pop	r28
 7d4:	08 95       	ret

000007d6 <DirectionReleaseUpLed>:
	PORTB &= ~(1 << DIRECTION_UP_LED);
}

void DirectionReleaseUpLed()
{
	PORTB |= (1 << DIRECTION_UP_LED);
 7d6:	2e 9a       	sbi	0x05, 6	; 5
 7d8:	08 95       	ret

000007da <DirectionReleaseUp>:
	}
	DirectionPressUpLed();
}

void DirectionReleaseUp(uint8_t tempOrientation)
{
 7da:	cf 93       	push	r28
 7dc:	c8 2f       	mov	r28, r24
	invertModeCode = eeprom_read_byte (( uint8_t *) 56);
 7de:	88 e3       	ldi	r24, 0x38	; 56
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 c0 04 	call	0x980	; 0x980 <eeprom_read_byte>
 7e6:	80 93 02 01 	sts	0x0102, r24
	
	// Release left on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 7ea:	c1 11       	cpse	r28, r1
 7ec:	06 c0       	rjmp	.+12     	; 0x7fa <DirectionReleaseUp+0x20>
	{
		// G  R  L  U  D on JST connector
		if(invertModeCode == 0)
 7ee:	81 11       	cpse	r24, r1
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DirectionReleaseUp+0x1c>
		{
			PORTD |= (1 << DIRECTION_SW3_CLEAN);
 7f2:	5d 9a       	sbi	0x0b, 5	; 11
 7f4:	11 c0       	rjmp	.+34     	; 0x818 <DirectionReleaseUp+0x3e>
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 7f6:	5d 98       	cbi	0x0b, 5	; 11
 7f8:	0f c0       	rjmp	.+30     	; 0x818 <DirectionReleaseUp+0x3e>
		}
	}
	else if(tempOrientation == 1)
 7fa:	c1 30       	cpi	r28, 0x01	; 1
 7fc:	31 f4       	brne	.+12     	; 0x80a <DirectionReleaseUp+0x30>
	{
		// G  L  R  D  U on JST connector
		if(invertModeCode == 0)
 7fe:	81 11       	cpse	r24, r1
 800:	02 c0       	rjmp	.+4      	; 0x806 <DirectionReleaseUp+0x2c>
		{
			PORTD |= (1 << DIRECTION_SW4_CLEAN);
 802:	5e 9a       	sbi	0x0b, 6	; 11
 804:	09 c0       	rjmp	.+18     	; 0x818 <DirectionReleaseUp+0x3e>
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 806:	5e 98       	cbi	0x0b, 6	; 11
 808:	07 c0       	rjmp	.+14     	; 0x818 <DirectionReleaseUp+0x3e>
		}
	}
	else if(tempOrientation == 2)
 80a:	c2 30       	cpi	r28, 0x02	; 2
 80c:	29 f4       	brne	.+10     	; 0x818 <DirectionReleaseUp+0x3e>
	{
		// G  R  U  L  D on JST connector
		if(invertModeCode == 0)
 80e:	81 11       	cpse	r24, r1
 810:	02 c0       	rjmp	.+4      	; 0x816 <DirectionReleaseUp+0x3c>
		{
			PORTD |= (1 << DIRECTION_SW2_CLEAN);
 812:	5c 9a       	sbi	0x0b, 4	; 11
 814:	01 c0       	rjmp	.+2      	; 0x818 <DirectionReleaseUp+0x3e>
		}
		else
		{
			PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 816:	5c 98       	cbi	0x0b, 4	; 11
	}
	else
	{
		// Future orientation...do nothing for now
	}
	DirectionReleaseUpLed();
 818:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <DirectionReleaseUpLed>
}
 81c:	cf 91       	pop	r28
 81e:	08 95       	ret

00000820 <DirectionGetLeftState>:
}

// Reading Inputs
uint8_t DirectionGetLeftState()
{
	return (PINB & (1 << DIRECTION_LEFT_BUTTON));
 820:	83 b1       	in	r24, 0x03	; 3
}
 822:	82 70       	andi	r24, 0x02	; 2
 824:	08 95       	ret

00000826 <DirectionGetRightState>:

uint8_t DirectionGetRightState()
{
	return (PINB & (1 << DIRECTION_RIGHT_BUTTON));
 826:	83 b1       	in	r24, 0x03	; 3
}
 828:	81 70       	andi	r24, 0x01	; 1
 82a:	08 95       	ret

0000082c <DirectionGetUpState>:

uint8_t DirectionGetUpState()
{
	return (PINB & (1 << DIRECTION_UP_BUTTON));
 82c:	83 b1       	in	r24, 0x03	; 3
}
 82e:	88 70       	andi	r24, 0x08	; 8
 830:	08 95       	ret

00000832 <DirectionGetDownState>:

uint8_t DirectionGetDownState()
{
	return (PINB & (1 << DIRECTION_DOWN_BUTTON));
 832:	83 b1       	in	r24, 0x03	; 3
 834:	84 70       	andi	r24, 0x04	; 4
 836:	08 95       	ret

00000838 <main>:
}

static void MainInitialize()
{
	// Set all ports to be configured as inputs
	DDRB = 0b00000000;
 838:	14 b8       	out	0x04, r1	; 4
	DDRC = 0b00000000;
 83a:	17 b8       	out	0x07, r1	; 7
	DDRD = 0b00000000;
 83c:	1a b8       	out	0x0a, r1	; 10

	// Disable all internal pull-up resistors
	PORTB = 0b00000000;
 83e:	15 b8       	out	0x05, r1	; 5
	PORTC = 0b00000000;
 840:	18 b8       	out	0x08, r1	; 8
	PORTD = 0b00000000;
 842:	1b b8       	out	0x0b, r1	; 11

	// Enable necessary internal pull-up resistors
	PORTB |= (1 << MAIN_RIGHT_BUTTON_PULLUP);
 844:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1 << MAIN_LEFT_BUTTON_PULLUP);
 846:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1 << MAIN_DOWN_BUTTON_PULLUP);
 848:	2a 9a       	sbi	0x05, 2	; 5
	PORTB |= (1 << MAIN_UP_BUTTON_PULLUP);
 84a:	2b 9a       	sbi	0x05, 3	; 5
	PORTC |= (1 << MAIN_DIP5_SW1_PULLUP);
 84c:	47 9a       	sbi	0x08, 7	; 8
	PORTC |= (1 << MAIN_DIP5_SW2_PULLUP);
 84e:	45 9a       	sbi	0x08, 5	; 8
	PORTC |= (1 << MAIN_DIP5_SW3_PULLUP);
 850:	46 9a       	sbi	0x08, 6	; 8
	PORTC |= (1 << MAIN_DIP5_SW4_PULLUP);
 852:	44 9a       	sbi	0x08, 4	; 8
	PORTC |= (1 << MAIN_DIP5_SW5_PULLUP);
 854:	42 9a       	sbi	0x08, 2	; 8
	PORTD |= (1 << MAIN_DIP2_SW1_PULLUP);
 856:	59 9a       	sbi	0x0b, 1	; 11
	PORTD |= (1 << MAIN_DIP2_SW2_PULLUP);
 858:	5a 9a       	sbi	0x0b, 2	; 11
	PORTB |= (1 << MAIN_PRESET_BUTTON_PULLUP);
 85a:	2f 9a       	sbi	0x05, 7	; 5

	// Set specific port bits to be configured as outputs
	DDRD = DDRD | (1 << DIRECTION_SW1_CLEAN);
 85c:	53 9a       	sbi	0x0a, 3	; 10
	DDRD = DDRD | (1 << DIRECTION_SW2_CLEAN);
 85e:	54 9a       	sbi	0x0a, 4	; 10
	DDRD = DDRD | (1 << DIRECTION_SW3_CLEAN);
 860:	55 9a       	sbi	0x0a, 5	; 10
	DDRD = DDRD | (1 << DIRECTION_SW4_CLEAN);
 862:	56 9a       	sbi	0x0a, 6	; 10
	DDRD = DDRD | (1 << DIRECTION_RIGHT_LED);
 864:	50 9a       	sbi	0x0a, 0	; 10
	DDRB = DDRB | (1 << DIRECTION_LEFT_LED);
 866:	24 9a       	sbi	0x04, 4	; 4
	DDRB = DDRB | (1 << DIRECTION_DOWN_LED);
 868:	25 9a       	sbi	0x04, 5	; 4
	DDRB = DDRB | (1 << DIRECTION_UP_LED);
 86a:	26 9a       	sbi	0x04, 6	; 4
	DDRD = DDRD | (1 << MAIN_PRESET_LED);
 86c:	57 9a       	sbi	0x0a, 7	; 10

	// Check to see if inversion of signals are requested
	if ( (DirectionGetRightState() == 0) && (DirectionGetDownState() == 0) )
 86e:	0e 94 13 04 	call	0x826	; 0x826 <DirectionGetRightState>
 872:	81 11       	cpse	r24, r1
 874:	15 c0       	rjmp	.+42     	; 0x8a0 <main+0x68>
 876:	0e 94 19 04 	call	0x832	; 0x832 <DirectionGetDownState>
 87a:	81 11       	cpse	r24, r1
 87c:	11 c0       	rjmp	.+34     	; 0x8a0 <main+0x68>
	{
		if(eeprom_read_byte (( uint8_t *) 56) == COMMON_GROUND)
 87e:	88 e3       	ldi	r24, 0x38	; 56
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	0e 94 c0 04 	call	0x980	; 0x980 <eeprom_read_byte>
 886:	81 11       	cpse	r24, r1
 888:	06 c0       	rjmp	.+12     	; 0x896 <main+0x5e>
		{
			eeprom_update_byte (( uint8_t *) 56, COMMON_RAIL);
 88a:	61 e0       	ldi	r22, 0x01	; 1
 88c:	88 e3       	ldi	r24, 0x38	; 56
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 c8 04 	call	0x990	; 0x990 <eeprom_update_byte>
 894:	05 c0       	rjmp	.+10     	; 0x8a0 <main+0x68>
		}
		else
		{
			eeprom_update_byte (( uint8_t *) 56, COMMON_GROUND);
 896:	60 e0       	ldi	r22, 0x00	; 0
 898:	88 e3       	ldi	r24, 0x38	; 56
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	0e 94 c8 04 	call	0x990	; 0x990 <eeprom_update_byte>
		}
	}
	
	// Check to see if we need to bypass the cleaner
	if ( (DirectionGetLeftState() == 0) && (DirectionGetUpState() == 0) )
 8a0:	0e 94 10 04 	call	0x820	; 0x820 <DirectionGetLeftState>
 8a4:	81 11       	cpse	r24, r1
 8a6:	08 c0       	rjmp	.+16     	; 0x8b8 <main+0x80>
 8a8:	0e 94 16 04 	call	0x82c	; 0x82c <DirectionGetUpState>
 8ac:	81 11       	cpse	r24, r1
 8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <main+0x80>
	{
		bypassCleaner = 1;
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	80 93 03 01 	sts	0x0103, r24
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <main+0x84>
	}
	else
	{
		bypassCleaner = 0;
 8b8:	10 92 03 01 	sts	0x0103, r1
	}
	
	DirectionReleaseLeftLed();
 8bc:	0e 94 57 03 	call	0x6ae	; 0x6ae <DirectionReleaseLeftLed>
	DirectionReleaseRightLed();
 8c0:	0e 94 0d 03 	call	0x61a	; 0x61a <DirectionReleaseRightLed>
	DirectionReleaseDownLed();
 8c4:	0e 94 a1 03 	call	0x742	; 0x742 <DirectionReleaseDownLed>
	DirectionReleaseUpLed();
 8c8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <DirectionReleaseUpLed>
	
	// Signal to show which signal inversion mode you are in
	if(eeprom_read_byte (( uint8_t *) 56) == COMMON_GROUND)
 8cc:	88 e3       	ldi	r24, 0x38	; 56
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	0e 94 c0 04 	call	0x980	; 0x980 <eeprom_read_byte>
 8d4:	81 11       	cpse	r24, r1
 8d6:	03 c0       	rjmp	.+6      	; 0x8de <main+0xa6>
	{
		DirectionPressDownLed();
 8d8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DirectionPressDownLed>
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <main+0xaa>
	}
	else
	{
		DirectionPressUpLed();
 8de:	0e 94 c6 03 	call	0x78c	; 0x78c <DirectionPressUpLed>
	}
	
	// Signal to show if you have bypassed the cleaner
	if(bypassCleaner == 0)
 8e2:	80 91 03 01 	lds	r24, 0x0103
 8e6:	81 11       	cpse	r24, r1
 8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <main+0xb8>
	{
		DirectionPressLeftLed();
 8ea:	0e 94 32 03 	call	0x664	; 0x664 <DirectionPressLeftLed>
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <main+0xbc>
	}
	else
	{
		DirectionPressRightLed();
 8f0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DirectionPressRightLed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8f4:	2f e7       	ldi	r18, 0x7F	; 127
 8f6:	8a e1       	ldi	r24, 0x1A	; 26
 8f8:	96 e0       	ldi	r25, 0x06	; 6
 8fa:	21 50       	subi	r18, 0x01	; 1
 8fc:	80 40       	sbci	r24, 0x00	; 0
 8fe:	90 40       	sbci	r25, 0x00	; 0
 900:	e1 f7       	brne	.-8      	; 0x8fa <main+0xc2>
 902:	00 c0       	rjmp	.+0      	; 0x904 <main+0xcc>
 904:	00 00       	nop
	}
	
	// Hold all animation for two seconds then release
	_delay_ms(2000);
	DirectionReleaseLeftLed();
 906:	0e 94 57 03 	call	0x6ae	; 0x6ae <DirectionReleaseLeftLed>
	DirectionReleaseRightLed();
 90a:	0e 94 0d 03 	call	0x61a	; 0x61a <DirectionReleaseRightLed>
	DirectionReleaseDownLed();
 90e:	0e 94 a1 03 	call	0x742	; 0x742 <DirectionReleaseDownLed>
	DirectionReleaseUpLed();
 912:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <DirectionReleaseUpLed>
	
	// Default button positions
	DirectionReleaseLeft(0);
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	0e 94 59 03 	call	0x6b2	; 0x6b2 <DirectionReleaseLeft>
	DirectionReleaseRight(0);
 91c:	80 e0       	ldi	r24, 0x00	; 0
 91e:	0e 94 0f 03 	call	0x61e	; 0x61e <DirectionReleaseRight>
	DirectionReleaseDown(0);
 922:	80 e0       	ldi	r24, 0x00	; 0
 924:	0e 94 a3 03 	call	0x746	; 0x746 <DirectionReleaseDown>
	DirectionReleaseUp(0);
 928:	80 e0       	ldi	r24, 0x00	; 0
 92a:	0e 94 ed 03 	call	0x7da	; 0x7da <DirectionReleaseUp>
	
	// Read in saved remote mode code, but
	// default to REMOTE_MODE_1 if eeprom data is not in range
	uint8_t tempData = eeprom_read_byte (( uint8_t *) 46);
 92e:	8e e2       	ldi	r24, 0x2E	; 46
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 94 c0 04 	call	0x980	; 0x980 <eeprom_read_byte>
	if (tempData > 15)
 936:	80 31       	cpi	r24, 0x10	; 16
 938:	18 f0       	brcs	.+6      	; 0x940 <main+0x108>
	{
		remoteModeCode = REMOTE_MODE_0;
 93a:	10 92 05 01 	sts	0x0105, r1
 93e:	02 c0       	rjmp	.+4      	; 0x944 <main+0x10c>
	}
	else
	{
		remoteModeCode = tempData;
 940:	80 93 05 01 	sts	0x0105, r24
	}
	
	// Set up the 16 bit timer to keep counting up
	TCCR1B |= (1 << CS10);
 944:	e1 e8       	ldi	r30, 0x81	; 129
 946:	f0 e0       	ldi	r31, 0x00	; 0
 948:	80 81       	ld	r24, Z
 94a:	81 60       	ori	r24, 0x01	; 1
 94c:	80 83       	st	Z, r24
	
	// Default program mode counter
	programModeCounter = 0;
 94e:	10 92 04 01 	sts	0x0104, r1
	// Main program loop
    while(1) 
    {
		// Go and clean
		//MainGoClean();	
		CleanerTetris(DirectionGetDownState(), DirectionGetUpState(), DirectionGetLeftState(), DirectionGetRightState());	
 952:	0e 94 13 04 	call	0x826	; 0x826 <DirectionGetRightState>
 956:	18 2f       	mov	r17, r24
 958:	0e 94 10 04 	call	0x820	; 0x820 <DirectionGetLeftState>
 95c:	d8 2f       	mov	r29, r24
 95e:	0e 94 16 04 	call	0x82c	; 0x82c <DirectionGetUpState>
 962:	c8 2f       	mov	r28, r24
 964:	0e 94 19 04 	call	0x832	; 0x832 <DirectionGetDownState>
 968:	21 2f       	mov	r18, r17
 96a:	4d 2f       	mov	r20, r29
 96c:	6c 2f       	mov	r22, r28
 96e:	0e 94 62 00 	call	0xc4	; 0xc4 <CleanerTetris>
	}
 972:	ef cf       	rjmp	.-34     	; 0x952 <main+0x11a>

00000974 <__tablejump2__>:
 974:	ee 0f       	add	r30, r30
 976:	ff 1f       	adc	r31, r31
 978:	05 90       	lpm	r0, Z+
 97a:	f4 91       	lpm	r31, Z
 97c:	e0 2d       	mov	r30, r0
 97e:	09 94       	ijmp

00000980 <eeprom_read_byte>:
 980:	f9 99       	sbic	0x1f, 1	; 31
 982:	fe cf       	rjmp	.-4      	; 0x980 <eeprom_read_byte>
 984:	92 bd       	out	0x22, r25	; 34
 986:	81 bd       	out	0x21, r24	; 33
 988:	f8 9a       	sbi	0x1f, 0	; 31
 98a:	99 27       	eor	r25, r25
 98c:	80 b5       	in	r24, 0x20	; 32
 98e:	08 95       	ret

00000990 <eeprom_update_byte>:
 990:	26 2f       	mov	r18, r22

00000992 <eeprom_update_r18>:
 992:	f9 99       	sbic	0x1f, 1	; 31
 994:	fe cf       	rjmp	.-4      	; 0x992 <eeprom_update_r18>
 996:	92 bd       	out	0x22, r25	; 34
 998:	81 bd       	out	0x21, r24	; 33
 99a:	f8 9a       	sbi	0x1f, 0	; 31
 99c:	01 97       	sbiw	r24, 0x01	; 1
 99e:	00 b4       	in	r0, 0x20	; 32
 9a0:	02 16       	cp	r0, r18
 9a2:	39 f0       	breq	.+14     	; 0x9b2 <eeprom_update_r18+0x20>
 9a4:	1f ba       	out	0x1f, r1	; 31
 9a6:	20 bd       	out	0x20, r18	; 32
 9a8:	0f b6       	in	r0, 0x3f	; 63
 9aa:	f8 94       	cli
 9ac:	fa 9a       	sbi	0x1f, 2	; 31
 9ae:	f9 9a       	sbi	0x1f, 1	; 31
 9b0:	0f be       	out	0x3f, r0	; 63
 9b2:	08 95       	ret

000009b4 <_exit>:
 9b4:	f8 94       	cli

000009b6 <__stop_program>:
 9b6:	ff cf       	rjmp	.-2      	; 0x9b6 <__stop_program>
