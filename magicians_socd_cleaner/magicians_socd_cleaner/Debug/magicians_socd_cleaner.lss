
magicians_socd_cleaner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000bba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b46  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000bba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000c30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020f9  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d4  00000000  00000000  00002e99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010b7  00000000  00000000  0000386d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00004924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082d  00000000  00000000  00004b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ea0  00000000  00000000  00005341  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000061e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	3d 04       	cpc	r3, r13
  76:	45 04       	cpc	r4, r5
  78:	4d 04       	cpc	r4, r13
  7a:	55 04       	cpc	r5, r5
  7c:	5d 04       	cpc	r5, r13
  7e:	65 04       	cpc	r6, r5
  80:	6d 04       	cpc	r6, r13
  82:	75 04       	cpc	r7, r5
  84:	7d 04       	cpc	r7, r13
  86:	85 04       	cpc	r8, r5
  88:	8d 04       	cpc	r8, r13
  8a:	95 04       	cpc	r9, r5
  8c:	9d 04       	cpc	r9, r13
  8e:	a5 04       	cpc	r10, r5
  90:	ad 04       	cpc	r10, r13
  92:	b5 04       	cpc	r11, r5

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a4 30       	cpi	r26, 0x04	; 4
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 9d 03 	call	0x73a	; 0x73a <main>
  b4:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <CleanerXNeutral>:
/* Function Definitions */
// SOCD Cleaners
void CleanerXNeutral(uint8_t tempLeftState, uint8_t tempRightState)
{
	// Left and Right = Neutral
	if ( (tempLeftState == 0) && (tempRightState == 0) )
  bc:	81 11       	cpse	r24, r1
  be:	14 c0       	rjmp	.+40     	; 0xe8 <CleanerXNeutral+0x2c>
  c0:	61 11       	cpse	r22, r1
  c2:	09 c0       	rjmp	.+18     	; 0xd6 <CleanerXNeutral+0x1a>
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
  c4:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
  c8:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
  cc:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
  d0:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
  d4:	08 95       	ret
	}
	else if ( (tempLeftState == 0) && (tempRightState > 0) )
	{
		DirectionPressLeft(ModeSwitchesOrientation());
  d6:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
  da:	0e 94 31 03 	call	0x662	; 0x662 <DirectionPressLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
  de:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
  e2:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
  e6:	08 95       	ret
	}
	else if ( (tempLeftState > 0) && (tempRightState == 0) )
  e8:	61 11       	cpse	r22, r1
  ea:	09 c0       	rjmp	.+18     	; 0xfe <CleanerXNeutral+0x42>
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
  ec:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
  f0:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
		DirectionPressRight(ModeSwitchesOrientation());
  f4:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
  f8:	0e 94 49 03 	call	0x692	; 0x692 <DirectionPressRight>
  fc:	08 95       	ret
	}
	else
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
  fe:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 102:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 106:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 10a:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
 10e:	08 95       	ret

00000110 <CleanerXLeft>:
}

void CleanerXLeft(uint8_t tempLeftState, uint8_t tempRightState)
{
	// Left and Right = Left
	if ( (tempLeftState == 0) && (tempRightState == 0) )
 110:	81 11       	cpse	r24, r1
 112:	14 c0       	rjmp	.+40     	; 0x13c <CleanerXLeft+0x2c>
 114:	61 11       	cpse	r22, r1
 116:	09 c0       	rjmp	.+18     	; 0x12a <CleanerXLeft+0x1a>
	{
		DirectionPressLeft(ModeSwitchesOrientation());
 118:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 11c:	0e 94 31 03 	call	0x662	; 0x662 <DirectionPressLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 120:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 124:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
 128:	08 95       	ret
	}
	else if ( (tempLeftState == 0) && (tempRightState > 0) )
	{
		DirectionPressLeft(ModeSwitchesOrientation());
 12a:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 12e:	0e 94 31 03 	call	0x662	; 0x662 <DirectionPressLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 132:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 136:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
 13a:	08 95       	ret
	}
	else if ( (tempLeftState > 0) && (tempRightState == 0) )
 13c:	61 11       	cpse	r22, r1
 13e:	09 c0       	rjmp	.+18     	; 0x152 <CleanerXLeft+0x42>
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
 140:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 144:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
		DirectionPressRight(ModeSwitchesOrientation());
 148:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 14c:	0e 94 49 03 	call	0x692	; 0x692 <DirectionPressRight>
 150:	08 95       	ret
	}
	else
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
 152:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 156:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 15a:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 15e:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
 162:	08 95       	ret

00000164 <CleanerXRight>:
}

void CleanerXRight(uint8_t tempLeftState, uint8_t tempRightState)
{
	// Left and Right = Right
	if ( (tempLeftState == 0) && (tempRightState == 0) )
 164:	81 11       	cpse	r24, r1
 166:	14 c0       	rjmp	.+40     	; 0x190 <CleanerXRight+0x2c>
 168:	61 11       	cpse	r22, r1
 16a:	09 c0       	rjmp	.+18     	; 0x17e <CleanerXRight+0x1a>
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
 16c:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 170:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
		DirectionPressRight(ModeSwitchesOrientation());
 174:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 178:	0e 94 49 03 	call	0x692	; 0x692 <DirectionPressRight>
 17c:	08 95       	ret
	}
	else if ( (tempLeftState == 0) && (tempRightState > 0) )
	{
		DirectionPressLeft(ModeSwitchesOrientation());
 17e:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 182:	0e 94 31 03 	call	0x662	; 0x662 <DirectionPressLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 186:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 18a:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
 18e:	08 95       	ret
	}
	else if ( (tempLeftState > 0) && (tempRightState == 0) )
 190:	61 11       	cpse	r22, r1
 192:	09 c0       	rjmp	.+18     	; 0x1a6 <CleanerXRight+0x42>
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
 194:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 198:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
		DirectionPressRight(ModeSwitchesOrientation());
 19c:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 1a0:	0e 94 49 03 	call	0x692	; 0x692 <DirectionPressRight>
 1a4:	08 95       	ret
	}
	else
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
 1a6:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 1aa:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 1ae:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 1b2:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
 1b6:	08 95       	ret

000001b8 <CleanerXLastInput>:
}

void CleanerXLastInput(uint8_t tempLeftState, uint8_t tempRightState)
{
	// Left and Right = Last Input
	switch (CleanerXAxisState)
 1b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <CleanerXAxisState>
 1bc:	92 30       	cpi	r25, 0x02	; 2
 1be:	09 f4       	brne	.+2      	; 0x1c2 <CleanerXLastInput+0xa>
 1c0:	4f c0       	rjmp	.+158    	; 0x260 <CleanerXLastInput+0xa8>
 1c2:	28 f4       	brcc	.+10     	; 0x1ce <CleanerXLastInput+0x16>
 1c4:	99 23       	and	r25, r25
 1c6:	51 f0       	breq	.+20     	; 0x1dc <CleanerXLastInput+0x24>
 1c8:	91 30       	cpi	r25, 0x01	; 1
 1ca:	39 f1       	breq	.+78     	; 0x21a <CleanerXLastInput+0x62>
 1cc:	08 95       	ret
 1ce:	93 30       	cpi	r25, 0x03	; 3
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <CleanerXLastInput+0x1c>
 1d2:	6e c0       	rjmp	.+220    	; 0x2b0 <CleanerXLastInput+0xf8>
 1d4:	94 30       	cpi	r25, 0x04	; 4
 1d6:	09 f4       	brne	.+2      	; 0x1da <CleanerXLastInput+0x22>
 1d8:	8e c0       	rjmp	.+284    	; 0x2f6 <CleanerXLastInput+0x13e>
 1da:	08 95       	ret
	{
		case NEUTRAL_X:
			if ( (tempLeftState == 0) )
 1dc:	81 11       	cpse	r24, r1
 1de:	08 c0       	rjmp	.+16     	; 0x1f0 <CleanerXLastInput+0x38>
			{
				DirectionPressLeft(ModeSwitchesOrientation());
 1e0:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 1e4:	0e 94 31 03 	call	0x662	; 0x662 <DirectionPressLeft>
				CleanerXAxisState = LEFT;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 1ee:	08 95       	ret
			}
			else if ( (tempRightState == 0) )
 1f0:	61 11       	cpse	r22, r1
 1f2:	08 c0       	rjmp	.+16     	; 0x204 <CleanerXLastInput+0x4c>
			{
				DirectionPressRight(ModeSwitchesOrientation());
 1f4:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 1f8:	0e 94 49 03 	call	0x692	; 0x692 <DirectionPressRight>
				CleanerXAxisState = RIGHT;
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 202:	08 95       	ret
			}
			else
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 204:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 208:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
				DirectionReleaseRight(ModeSwitchesOrientation());
 20c:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 210:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
				CleanerXAxisState = NEUTRAL_X;
 214:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <CleanerXAxisState>
 218:	08 95       	ret
			}
		break;
		
		case LEFT:
			if ( (tempLeftState > 0) )
 21a:	88 23       	and	r24, r24
 21c:	39 f0       	breq	.+14     	; 0x22c <CleanerXLastInput+0x74>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 21e:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 222:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
				CleanerXAxisState = NEUTRAL_X;
 226:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <CleanerXAxisState>
 22a:	08 95       	ret
			}
			else if ( (tempRightState == 0) )
 22c:	61 11       	cpse	r22, r1
 22e:	0c c0       	rjmp	.+24     	; 0x248 <CleanerXLastInput+0x90>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 230:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 234:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
				DirectionPressRight(ModeSwitchesOrientation());
 238:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 23c:	0e 94 49 03 	call	0x692	; 0x692 <DirectionPressRight>
				CleanerXAxisState = LEFT_LOST;
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 246:	08 95       	ret
			}
			else
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 248:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 24c:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
				DirectionPressLeft(ModeSwitchesOrientation());
 250:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 254:	0e 94 31 03 	call	0x662	; 0x662 <DirectionPressLeft>
				CleanerXAxisState = LEFT;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 25e:	08 95       	ret
			}
			break;
		
		case LEFT_LOST:
			if ( (tempLeftState > 0) )
 260:	88 23       	and	r24, r24
 262:	61 f0       	breq	.+24     	; 0x27c <CleanerXLastInput+0xc4>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 264:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 268:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
				DirectionPressRight(ModeSwitchesOrientation());
 26c:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 270:	0e 94 49 03 	call	0x692	; 0x692 <DirectionPressRight>
				CleanerXAxisState = RIGHT;
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 27a:	08 95       	ret
			}
			else if ( (tempRightState > 0) )
 27c:	66 23       	and	r22, r22
 27e:	61 f0       	breq	.+24     	; 0x298 <CleanerXLastInput+0xe0>
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 280:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 284:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
				DirectionPressLeft(ModeSwitchesOrientation());
 288:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 28c:	0e 94 31 03 	call	0x662	; 0x662 <DirectionPressLeft>
				CleanerXAxisState = LEFT;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 296:	08 95       	ret
			}
			else
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 298:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 29c:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
				DirectionPressRight(ModeSwitchesOrientation());
 2a0:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 2a4:	0e 94 49 03 	call	0x692	; 0x692 <DirectionPressRight>
				CleanerXAxisState = LEFT_LOST;
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 2ae:	08 95       	ret
			}
			break;
		
		case RIGHT:
			if ( (tempRightState > 0) )
 2b0:	66 23       	and	r22, r22
 2b2:	39 f0       	breq	.+14     	; 0x2c2 <CleanerXLastInput+0x10a>
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 2b4:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 2b8:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
				CleanerXAxisState = NEUTRAL_X;
 2bc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <CleanerXAxisState>
 2c0:	08 95       	ret
			}
			else if ( (tempLeftState == 0) )
 2c2:	81 11       	cpse	r24, r1
 2c4:	0c c0       	rjmp	.+24     	; 0x2de <CleanerXLastInput+0x126>
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 2c6:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 2ca:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
				DirectionPressLeft(ModeSwitchesOrientation());
 2ce:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 2d2:	0e 94 31 03 	call	0x662	; 0x662 <DirectionPressLeft>
				CleanerXAxisState = RIGHT_LOST;
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 2dc:	08 95       	ret
			}
			else
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 2de:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 2e2:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
				DirectionPressRight(ModeSwitchesOrientation());
 2e6:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 2ea:	0e 94 49 03 	call	0x692	; 0x692 <DirectionPressRight>
				CleanerXAxisState = RIGHT;
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 2f4:	08 95       	ret
			}
			break;
		
		case RIGHT_LOST:
			if ( (tempRightState > 0) )
 2f6:	66 23       	and	r22, r22
 2f8:	61 f0       	breq	.+24     	; 0x312 <CleanerXLastInput+0x15a>
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 2fa:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 2fe:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
				DirectionPressLeft(ModeSwitchesOrientation());
 302:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 306:	0e 94 31 03 	call	0x662	; 0x662 <DirectionPressLeft>
				CleanerXAxisState = LEFT;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 310:	08 95       	ret
			}
			else if ( (tempLeftState > 0) )
 312:	88 23       	and	r24, r24
 314:	61 f0       	breq	.+24     	; 0x32e <CleanerXLastInput+0x176>
			{
				DirectionReleaseLeft(ModeSwitchesOrientation());
 316:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 31a:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
				DirectionPressRight(ModeSwitchesOrientation());
 31e:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 322:	0e 94 49 03 	call	0x692	; 0x692 <DirectionPressRight>
				CleanerXAxisState = RIGHT;
 326:	83 e0       	ldi	r24, 0x03	; 3
 328:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 32c:	08 95       	ret
			}
			else
			{
				DirectionReleaseRight(ModeSwitchesOrientation());
 32e:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 332:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
				DirectionPressLeft(ModeSwitchesOrientation());
 336:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 33a:	0e 94 31 03 	call	0x662	; 0x662 <DirectionPressLeft>
				CleanerXAxisState = RIGHT_LOST;
 33e:	84 e0       	ldi	r24, 0x04	; 4
 340:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <CleanerXAxisState>
 344:	08 95       	ret

00000346 <CleanerYNeutral>:
}

void CleanerYNeutral(uint8_t tempDownState, uint8_t tempUpState)
{
	// Down and Up = Neutral
	if ( (tempDownState == 0) && (tempUpState == 0) )
 346:	81 11       	cpse	r24, r1
 348:	14 c0       	rjmp	.+40     	; 0x372 <CleanerYNeutral+0x2c>
 34a:	61 11       	cpse	r22, r1
 34c:	09 c0       	rjmp	.+18     	; 0x360 <CleanerYNeutral+0x1a>
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 34e:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 352:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 356:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 35a:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
 35e:	08 95       	ret
	}
	else if ( (tempDownState == 0) && (tempUpState > 0) )
	{
		DirectionPressDown(ModeSwitchesOrientation());
 360:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 364:	0e 94 61 03 	call	0x6c2	; 0x6c2 <DirectionPressDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 368:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 36c:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
 370:	08 95       	ret
	}
	else if ( (tempDownState > 0) && (tempUpState == 0) )
 372:	61 11       	cpse	r22, r1
 374:	09 c0       	rjmp	.+18     	; 0x388 <CleanerYNeutral+0x42>
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 376:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 37a:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
		DirectionPressUp(ModeSwitchesOrientation());
 37e:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 382:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DirectionPressUp>
 386:	08 95       	ret
	}
	else
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 388:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 38c:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 390:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 394:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
 398:	08 95       	ret

0000039a <CleanerYDown>:
}

void CleanerYDown(uint8_t tempDownState, uint8_t tempUpState)
{
	// Down and Up = Down
	if ( (tempDownState == 0) && (tempUpState == 0) )
 39a:	81 11       	cpse	r24, r1
 39c:	14 c0       	rjmp	.+40     	; 0x3c6 <CleanerYDown+0x2c>
 39e:	61 11       	cpse	r22, r1
 3a0:	09 c0       	rjmp	.+18     	; 0x3b4 <CleanerYDown+0x1a>
	{
		DirectionPressDown(ModeSwitchesOrientation());
 3a2:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 3a6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <DirectionPressDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 3aa:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 3ae:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
 3b2:	08 95       	ret
	}
	else if ( (tempDownState == 0) && (tempUpState > 0) )
	{
		DirectionPressDown(ModeSwitchesOrientation());
 3b4:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 3b8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <DirectionPressDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 3bc:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 3c0:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
 3c4:	08 95       	ret
	}
	else if ( (tempDownState > 0) && (tempUpState == 0) )
 3c6:	61 11       	cpse	r22, r1
 3c8:	09 c0       	rjmp	.+18     	; 0x3dc <CleanerYDown+0x42>
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 3ca:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 3ce:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
		DirectionPressUp(ModeSwitchesOrientation());
 3d2:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 3d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DirectionPressUp>
 3da:	08 95       	ret
	}
	else
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 3dc:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 3e0:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 3e4:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 3e8:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
 3ec:	08 95       	ret

000003ee <CleanerYUp>:
}

void CleanerYUp(uint8_t tempDownState, uint8_t tempUpState)
{
	// Down and Up = Up
	if ( (tempDownState == 0) && (tempUpState == 0) )
 3ee:	81 11       	cpse	r24, r1
 3f0:	14 c0       	rjmp	.+40     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3f2:	61 11       	cpse	r22, r1
 3f4:	09 c0       	rjmp	.+18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 3f6:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 3fa:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
		DirectionPressUp(ModeSwitchesOrientation());
 3fe:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DirectionPressUp>
 406:	08 95       	ret
	}
	else if ( (tempDownState == 0) && (tempUpState > 0) )
	{
		DirectionPressDown(ModeSwitchesOrientation());
 408:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 40c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <DirectionPressDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 410:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 414:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
 418:	08 95       	ret
	}
	else if ( (tempDownState > 0) && (tempUpState == 0) )
 41a:	61 11       	cpse	r22, r1
 41c:	09 c0       	rjmp	.+18     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 41e:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 422:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
		DirectionPressUp(ModeSwitchesOrientation());
 426:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 42a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DirectionPressUp>
 42e:	08 95       	ret
	}
	else
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 430:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 434:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 438:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 43c:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
 440:	08 95       	ret

00000442 <CleanerYLastInput>:
}

void CleanerYLastInput(uint8_t tempDownState, uint8_t tempUpState)
{
	// Left and Right = Last Input
	switch (CleanerYAxisState)
 442:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 446:	92 30       	cpi	r25, 0x02	; 2
 448:	09 f4       	brne	.+2      	; 0x44c <CleanerYLastInput+0xa>
 44a:	4f c0       	rjmp	.+158    	; 0x4ea <CleanerYLastInput+0xa8>
 44c:	28 f4       	brcc	.+10     	; 0x458 <CleanerYLastInput+0x16>
 44e:	99 23       	and	r25, r25
 450:	51 f0       	breq	.+20     	; 0x466 <CleanerYLastInput+0x24>
 452:	91 30       	cpi	r25, 0x01	; 1
 454:	39 f1       	breq	.+78     	; 0x4a4 <CleanerYLastInput+0x62>
 456:	08 95       	ret
 458:	93 30       	cpi	r25, 0x03	; 3
 45a:	09 f4       	brne	.+2      	; 0x45e <CleanerYLastInput+0x1c>
 45c:	6e c0       	rjmp	.+220    	; 0x53a <__stack+0x3b>
 45e:	94 30       	cpi	r25, 0x04	; 4
 460:	09 f4       	brne	.+2      	; 0x464 <CleanerYLastInput+0x22>
 462:	8e c0       	rjmp	.+284    	; 0x580 <__stack+0x81>
 464:	08 95       	ret
	{
		case NEUTRAL_Y:
			if ( (tempDownState == 0) )
 466:	81 11       	cpse	r24, r1
 468:	08 c0       	rjmp	.+16     	; 0x47a <CleanerYLastInput+0x38>
			{
				DirectionPressDown(ModeSwitchesOrientation());
 46a:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 46e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <DirectionPressDown>
				CleanerYAxisState = DOWN;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 478:	08 95       	ret
			}
			else if ( (tempUpState == 0) )
 47a:	61 11       	cpse	r22, r1
 47c:	08 c0       	rjmp	.+16     	; 0x48e <CleanerYLastInput+0x4c>
			{
				DirectionPressUp(ModeSwitchesOrientation());
 47e:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 482:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DirectionPressUp>
				CleanerYAxisState = UP;
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 48c:	08 95       	ret
			}
			else
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 48e:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 492:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
				DirectionReleaseUp(ModeSwitchesOrientation());
 496:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 49a:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
				CleanerYAxisState = NEUTRAL_Y;
 49e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 4a2:	08 95       	ret
			}
			break;
		
		case DOWN:
			if ( (tempDownState > 0) )
 4a4:	88 23       	and	r24, r24
 4a6:	39 f0       	breq	.+14     	; 0x4b6 <CleanerYLastInput+0x74>
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 4a8:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 4ac:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
				CleanerYAxisState = NEUTRAL_Y;
 4b0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 4b4:	08 95       	ret
			}
			else if ( (tempUpState == 0) )
 4b6:	61 11       	cpse	r22, r1
 4b8:	0c c0       	rjmp	.+24     	; 0x4d2 <CleanerYLastInput+0x90>
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 4ba:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 4be:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
				DirectionPressUp(ModeSwitchesOrientation());
 4c2:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 4c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DirectionPressUp>
				CleanerYAxisState = DOWN_LOST;
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 4d0:	08 95       	ret
			}
			else
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 4d2:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 4d6:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
				DirectionPressDown(ModeSwitchesOrientation());
 4da:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 4de:	0e 94 61 03 	call	0x6c2	; 0x6c2 <DirectionPressDown>
				CleanerYAxisState = DOWN;
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 4e8:	08 95       	ret
			}
			break;
		
		case DOWN_LOST:
			if ( (tempDownState > 0) )
 4ea:	88 23       	and	r24, r24
 4ec:	61 f0       	breq	.+24     	; 0x506 <__stack+0x7>
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 4ee:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 4f2:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
				DirectionPressUp(ModeSwitchesOrientation());
 4f6:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 4fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DirectionPressUp>
				CleanerYAxisState = UP;
 4fe:	83 e0       	ldi	r24, 0x03	; 3
 500:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 504:	08 95       	ret
			}
			else if ( (tempUpState > 0) )
 506:	66 23       	and	r22, r22
 508:	61 f0       	breq	.+24     	; 0x522 <__stack+0x23>
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 50a:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 50e:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
				DirectionPressDown(ModeSwitchesOrientation());
 512:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 516:	0e 94 61 03 	call	0x6c2	; 0x6c2 <DirectionPressDown>
				CleanerYAxisState = DOWN;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 520:	08 95       	ret
			}
			else
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 522:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 526:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
				DirectionPressUp(ModeSwitchesOrientation());
 52a:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 52e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DirectionPressUp>
				CleanerYAxisState = DOWN_LOST;
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 538:	08 95       	ret
			}
			break;
		
		case UP:
			if ( (tempUpState > 0) )
 53a:	66 23       	and	r22, r22
 53c:	39 f0       	breq	.+14     	; 0x54c <__stack+0x4d>
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 53e:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 542:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
				CleanerYAxisState = NEUTRAL_Y;
 546:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 54a:	08 95       	ret
			}
			else if ( (tempDownState == 0) )
 54c:	81 11       	cpse	r24, r1
 54e:	0c c0       	rjmp	.+24     	; 0x568 <__stack+0x69>
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 550:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 554:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
				DirectionPressDown(ModeSwitchesOrientation());
 558:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 55c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <DirectionPressDown>
				CleanerYAxisState = UP_LOST;
 560:	84 e0       	ldi	r24, 0x04	; 4
 562:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 566:	08 95       	ret
			}
			else
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 568:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 56c:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
				DirectionPressUp(ModeSwitchesOrientation());
 570:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 574:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DirectionPressUp>
				CleanerYAxisState = UP;
 578:	83 e0       	ldi	r24, 0x03	; 3
 57a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 57e:	08 95       	ret
			}
			break;
		
		case UP_LOST:
			if ( (tempUpState > 0) )
 580:	66 23       	and	r22, r22
 582:	61 f0       	breq	.+24     	; 0x59c <__stack+0x9d>
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 584:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 588:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
				DirectionPressDown(ModeSwitchesOrientation());
 58c:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 590:	0e 94 61 03 	call	0x6c2	; 0x6c2 <DirectionPressDown>
				CleanerYAxisState = DOWN;
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 59a:	08 95       	ret
			}
			else if ( (tempDownState > 0) )
 59c:	88 23       	and	r24, r24
 59e:	61 f0       	breq	.+24     	; 0x5b8 <__stack+0xb9>
			{
				DirectionReleaseDown(ModeSwitchesOrientation());
 5a0:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 5a4:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
				DirectionPressUp(ModeSwitchesOrientation());
 5a8:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 5ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DirectionPressUp>
				CleanerYAxisState = UP;
 5b0:	83 e0       	ldi	r24, 0x03	; 3
 5b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 5b6:	08 95       	ret
			}
			else
			{
				DirectionReleaseUp(ModeSwitchesOrientation());
 5b8:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 5bc:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
				DirectionPressDown(ModeSwitchesOrientation());
 5c0:	0e 94 1b 03 	call	0x636	; 0x636 <ModeSwitchesOrientation>
 5c4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <DirectionPressDown>
				CleanerYAxisState = UP_LOST;
 5c8:	84 e0       	ldi	r24, 0x04	; 4
 5ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 5ce:	08 95       	ret

000005d0 <ModeSwitchesX>:

// Mode Decision
uint8_t ModeSwitchesX()
{	
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip5Sw1() > 0) && (ModeSwitchesReadDip5Sw2() > 0) )
 5d0:	37 9b       	sbis	0x06, 7	; 6
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <ModeSwitchesX+0x8>
 5d4:	35 99       	sbic	0x06, 5	; 6
 5d6:	0a c0       	rjmp	.+20     	; 0x5ec <ModeSwitchesX+0x1c>
	{
		// Mode code for cleaner x neutral
		modeCode = 0;
	}
	else if ( (ModeSwitchesReadDip5Sw1() > 0) && (ModeSwitchesReadDip5Sw2() == 0) )
 5d8:	37 9b       	sbis	0x06, 7	; 6
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <ModeSwitchesX+0x10>
 5dc:	35 9b       	sbis	0x06, 5	; 6
 5de:	08 c0       	rjmp	.+16     	; 0x5f0 <ModeSwitchesX+0x20>
	{
		// Mode code for cleaner x left
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip5Sw1() == 0) && (ModeSwitchesReadDip5Sw2() > 0) )
 5e0:	37 99       	sbic	0x06, 7	; 6
 5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <ModeSwitchesX+0x24>
 5e4:	35 99       	sbic	0x06, 5	; 6
 5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <ModeSwitchesX+0x28>
		modeCode = 2;
	}
	else
	{
		// Mode code for cleaner x last input
		modeCode = 3;
 5e8:	83 e0       	ldi	r24, 0x03	; 3
 5ea:	08 95       	ret
{	
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip5Sw1() > 0) && (ModeSwitchesReadDip5Sw2() > 0) )
	{
		// Mode code for cleaner x neutral
		modeCode = 0;
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	08 95       	ret
	}
	else if ( (ModeSwitchesReadDip5Sw1() > 0) && (ModeSwitchesReadDip5Sw2() == 0) )
	{
		// Mode code for cleaner x left
		modeCode = 1;
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	08 95       	ret
		modeCode = 2;
	}
	else
	{
		// Mode code for cleaner x last input
		modeCode = 3;
 5f4:	83 e0       	ldi	r24, 0x03	; 3
 5f6:	08 95       	ret
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip5Sw1() == 0) && (ModeSwitchesReadDip5Sw2() > 0) )
	{
		// Mode code for cleaner x right
		modeCode = 2;
 5f8:	82 e0       	ldi	r24, 0x02	; 2
		// Mode code for cleaner x last input
		modeCode = 3;
	}
	
	return modeCode;
}
 5fa:	08 95       	ret

000005fc <ModeSwitchesY>:

uint8_t ModeSwitchesY()
{
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip5Sw3() > 0) && (ModeSwitchesReadDip5Sw4() > 0) )
 5fc:	36 9b       	sbis	0x06, 6	; 6
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <ModeSwitchesY+0x8>
 600:	34 99       	sbic	0x06, 4	; 6
 602:	0a c0       	rjmp	.+20     	; 0x618 <ModeSwitchesY+0x1c>
	{
		// Mode code for cleaner y neutral
		modeCode = 0;
	}
	else if ( (ModeSwitchesReadDip5Sw3() > 0) && (ModeSwitchesReadDip5Sw4() == 0) )
 604:	36 9b       	sbis	0x06, 6	; 6
 606:	02 c0       	rjmp	.+4      	; 0x60c <ModeSwitchesY+0x10>
 608:	34 9b       	sbis	0x06, 4	; 6
 60a:	08 c0       	rjmp	.+16     	; 0x61c <ModeSwitchesY+0x20>
	{
		// Mode code for cleaner y down
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip5Sw3() == 0) && (ModeSwitchesReadDip5Sw4() > 0) )
 60c:	36 99       	sbic	0x06, 6	; 6
 60e:	08 c0       	rjmp	.+16     	; 0x620 <ModeSwitchesY+0x24>
 610:	34 99       	sbic	0x06, 4	; 6
 612:	08 c0       	rjmp	.+16     	; 0x624 <ModeSwitchesY+0x28>
		modeCode = 2;
	}
	else
	{
		// Mode code for cleaner y last input
		modeCode = 3;
 614:	83 e0       	ldi	r24, 0x03	; 3
 616:	08 95       	ret
{
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip5Sw3() > 0) && (ModeSwitchesReadDip5Sw4() > 0) )
	{
		// Mode code for cleaner y neutral
		modeCode = 0;
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	08 95       	ret
	}
	else if ( (ModeSwitchesReadDip5Sw3() > 0) && (ModeSwitchesReadDip5Sw4() == 0) )
	{
		// Mode code for cleaner y down
		modeCode = 1;
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	08 95       	ret
		modeCode = 2;
	}
	else
	{
		// Mode code for cleaner y last input
		modeCode = 3;
 620:	83 e0       	ldi	r24, 0x03	; 3
 622:	08 95       	ret
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip5Sw3() == 0) && (ModeSwitchesReadDip5Sw4() > 0) )
	{
		// Mode code for cleaner y up
		modeCode = 2;
 624:	82 e0       	ldi	r24, 0x02	; 2
		// Mode code for cleaner y last input
		modeCode = 3;
	}
	
	return modeCode;
}
 626:	08 95       	ret

00000628 <ModeSwitchesRemote>:
	return (PINC & (1 << MODESWITCHES_DIP5_SW4));
}

static uint8_t ModeSwitchesReadDip5Sw5()
{
	return (PINC & (1 << MODESWITCHES_DIP5_SW5));
 628:	86 b1       	in	r24, 0x06	; 6
	else
	{
		// Mode code for remote button selection
		modeCode = 1;
	}
	return modeCode;
 62a:	82 fb       	bst	r24, 2
 62c:	88 27       	eor	r24, r24
 62e:	80 f9       	bld	r24, 0
}
 630:	91 e0       	ldi	r25, 0x01	; 1
 632:	89 27       	eor	r24, r25
 634:	08 95       	ret

00000636 <ModeSwitchesOrientation>:

uint8_t ModeSwitchesOrientation()
{
	// Decide mode for default OEM controller
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() > 0) )
 636:	49 9b       	sbis	0x09, 1	; 9
 638:	02 c0       	rjmp	.+4      	; 0x63e <ModeSwitchesOrientation+0x8>
 63a:	4a 99       	sbic	0x09, 2	; 9
 63c:	0a c0       	rjmp	.+20     	; 0x652 <ModeSwitchesOrientation+0x1c>
	{
		// Mode code for G  R  L  U  D on JST connector
		modeCode = 0;
	}
	else if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() == 0) )
 63e:	49 9b       	sbis	0x09, 1	; 9
 640:	02 c0       	rjmp	.+4      	; 0x646 <ModeSwitchesOrientation+0x10>
 642:	4a 9b       	sbis	0x09, 2	; 9
 644:	08 c0       	rjmp	.+16     	; 0x656 <ModeSwitchesOrientation+0x20>
	{
		// Mode code for G  L  R  D  U on JST connector
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip2Sw1() == 0) && (ModeSwitchesReadDip2Sw2() > 0) )
 646:	49 99       	sbic	0x09, 1	; 9
 648:	08 c0       	rjmp	.+16     	; 0x65a <ModeSwitchesOrientation+0x24>
 64a:	4a 99       	sbic	0x09, 2	; 9
 64c:	08 c0       	rjmp	.+16     	; 0x65e <ModeSwitchesOrientation+0x28>
		modeCode = 2;
	}
	else
	{
		// Mode code for future orientation
		modeCode = 3;
 64e:	83 e0       	ldi	r24, 0x03	; 3
 650:	08 95       	ret
	// Decide mode for default OEM controller
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() > 0) )
	{
		// Mode code for G  R  L  U  D on JST connector
		modeCode = 0;
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	08 95       	ret
	}
	else if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() == 0) )
	{
		// Mode code for G  L  R  D  U on JST connector
		modeCode = 1;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	08 95       	ret
		modeCode = 2;
	}
	else
	{
		// Mode code for future orientation
		modeCode = 3;
 65a:	83 e0       	ldi	r24, 0x03	; 3
 65c:	08 95       	ret
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip2Sw1() == 0) && (ModeSwitchesReadDip2Sw2() > 0) )
	{
		// Mode code for G  R  U  L  D on JST connector
		modeCode = 2;
 65e:	82 e0       	ldi	r24, 0x02	; 2
		// Mode code for future orientation
		modeCode = 3;
	}
	
	return modeCode;
}
 660:	08 95       	ret

00000662 <DirectionPressLeft>:

// Setting Outputs
void DirectionPressLeft(uint8_t tempOrientation)
{
	// Press left on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 662:	81 11       	cpse	r24, r1
 664:	02 c0       	rjmp	.+4      	; 0x66a <DirectionPressLeft+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 666:	5c 98       	cbi	0x0b, 4	; 11
 668:	08 95       	ret
	}
	else if(tempOrientation == 1)
 66a:	81 30       	cpi	r24, 0x01	; 1
 66c:	11 f4       	brne	.+4      	; 0x672 <DirectionPressLeft+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 66e:	5b 98       	cbi	0x0b, 3	; 11
 670:	08 95       	ret
		
	}
	else if(tempOrientation == 2)
 672:	82 30       	cpi	r24, 0x02	; 2
 674:	09 f4       	brne	.+2      	; 0x678 <DirectionPressLeft+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 676:	5e 98       	cbi	0x0b, 6	; 11
 678:	08 95       	ret

0000067a <DirectionReleaseLeft>:
}

void DirectionReleaseLeft(uint8_t tempOrientation)
{
	// Release left on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 67a:	81 11       	cpse	r24, r1
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DirectionReleaseLeft+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD |= (1 << DIRECTION_SW2_CLEAN);
 67e:	5c 9a       	sbi	0x0b, 4	; 11
 680:	08 95       	ret
	}
	else if(tempOrientation == 1)
 682:	81 30       	cpi	r24, 0x01	; 1
 684:	11 f4       	brne	.+4      	; 0x68a <DirectionReleaseLeft+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD |= (1 << DIRECTION_SW1_CLEAN);
 686:	5b 9a       	sbi	0x0b, 3	; 11
 688:	08 95       	ret
	}
	else if(tempOrientation == 2)
 68a:	82 30       	cpi	r24, 0x02	; 2
 68c:	09 f4       	brne	.+2      	; 0x690 <DirectionReleaseLeft+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD |= (1 << DIRECTION_SW4_CLEAN);
 68e:	5e 9a       	sbi	0x0b, 6	; 11
 690:	08 95       	ret

00000692 <DirectionPressRight>:
}

void DirectionPressRight(uint8_t tempOrientation)
{
	// Press right on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 692:	81 11       	cpse	r24, r1
 694:	02 c0       	rjmp	.+4      	; 0x69a <DirectionPressRight+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 696:	5b 98       	cbi	0x0b, 3	; 11
 698:	08 95       	ret
	}
	else if(tempOrientation == 1)
 69a:	81 30       	cpi	r24, 0x01	; 1
 69c:	11 f4       	brne	.+4      	; 0x6a2 <DirectionPressRight+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 69e:	5c 98       	cbi	0x0b, 4	; 11
 6a0:	08 95       	ret
		
	}
	else if(tempOrientation == 2)
 6a2:	82 30       	cpi	r24, 0x02	; 2
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <DirectionPressRight+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 6a6:	5b 98       	cbi	0x0b, 3	; 11
 6a8:	08 95       	ret

000006aa <DirectionReleaseRight>:
}

void DirectionReleaseRight(uint8_t tempOrientation)
{
	// Release right on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 6aa:	81 11       	cpse	r24, r1
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <DirectionReleaseRight+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD |= (1 << DIRECTION_SW1_CLEAN);
 6ae:	5b 9a       	sbi	0x0b, 3	; 11
 6b0:	08 95       	ret
	}
	else if(tempOrientation == 1)
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	11 f4       	brne	.+4      	; 0x6ba <DirectionReleaseRight+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD |= (1 << DIRECTION_SW2_CLEAN);
 6b6:	5c 9a       	sbi	0x0b, 4	; 11
 6b8:	08 95       	ret
	}
	else if(tempOrientation == 2)
 6ba:	82 30       	cpi	r24, 0x02	; 2
 6bc:	09 f4       	brne	.+2      	; 0x6c0 <DirectionReleaseRight+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD |= (1 << DIRECTION_SW1_CLEAN);
 6be:	5b 9a       	sbi	0x0b, 3	; 11
 6c0:	08 95       	ret

000006c2 <DirectionPressDown>:
}

void DirectionPressDown(uint8_t tempOrientation)
{
	// Press down on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 6c2:	81 11       	cpse	r24, r1
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DirectionPressDown+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 6c6:	5e 98       	cbi	0x0b, 6	; 11
 6c8:	08 95       	ret
	}
	else if(tempOrientation == 1)
 6ca:	81 30       	cpi	r24, 0x01	; 1
 6cc:	11 f4       	brne	.+4      	; 0x6d2 <DirectionPressDown+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 6ce:	5d 98       	cbi	0x0b, 5	; 11
 6d0:	08 95       	ret
	}
	else if(tempOrientation == 2)
 6d2:	82 30       	cpi	r24, 0x02	; 2
 6d4:	09 f4       	brne	.+2      	; 0x6d8 <DirectionPressDown+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 6d6:	5e 98       	cbi	0x0b, 6	; 11
 6d8:	08 95       	ret

000006da <DirectionReleaseDown>:
}

void DirectionReleaseDown(uint8_t tempOrientation)
{
	// Release down on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 6da:	81 11       	cpse	r24, r1
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <DirectionReleaseDown+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD |= (1 << DIRECTION_SW4_CLEAN);
 6de:	5e 9a       	sbi	0x0b, 6	; 11
 6e0:	08 95       	ret
	}
	else if(tempOrientation == 1)
 6e2:	81 30       	cpi	r24, 0x01	; 1
 6e4:	11 f4       	brne	.+4      	; 0x6ea <DirectionReleaseDown+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD |= (1 << DIRECTION_SW3_CLEAN);
 6e6:	5d 9a       	sbi	0x0b, 5	; 11
 6e8:	08 95       	ret
	}
	else if(tempOrientation == 2)
 6ea:	82 30       	cpi	r24, 0x02	; 2
 6ec:	09 f4       	brne	.+2      	; 0x6f0 <DirectionReleaseDown+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD |= (1 << DIRECTION_SW4_CLEAN);
 6ee:	5e 9a       	sbi	0x0b, 6	; 11
 6f0:	08 95       	ret

000006f2 <DirectionPressUp>:
}

void DirectionPressUp(uint8_t tempOrientation)
{
	// Press up on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 6f2:	81 11       	cpse	r24, r1
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DirectionPressUp+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 6f6:	5d 98       	cbi	0x0b, 5	; 11
 6f8:	08 95       	ret
	}
	else if(tempOrientation == 1)
 6fa:	81 30       	cpi	r24, 0x01	; 1
 6fc:	11 f4       	brne	.+4      	; 0x702 <DirectionPressUp+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 6fe:	5e 98       	cbi	0x0b, 6	; 11
 700:	08 95       	ret
		
	}
	else if(tempOrientation == 2)
 702:	82 30       	cpi	r24, 0x02	; 2
 704:	09 f4       	brne	.+2      	; 0x708 <DirectionPressUp+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 706:	5e 98       	cbi	0x0b, 6	; 11
 708:	08 95       	ret

0000070a <DirectionReleaseUp>:
}

void DirectionReleaseUp(uint8_t tempOrientation)
{
	// Release left on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 70a:	81 11       	cpse	r24, r1
 70c:	02 c0       	rjmp	.+4      	; 0x712 <DirectionReleaseUp+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD |= (1 << DIRECTION_SW3_CLEAN);
 70e:	5d 9a       	sbi	0x0b, 5	; 11
 710:	08 95       	ret
	}
	else if(tempOrientation == 1)
 712:	81 30       	cpi	r24, 0x01	; 1
 714:	11 f4       	brne	.+4      	; 0x71a <DirectionReleaseUp+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD |= (1 << DIRECTION_SW4_CLEAN);
 716:	5e 9a       	sbi	0x0b, 6	; 11
 718:	08 95       	ret
		
	}
	else if(tempOrientation == 2)
 71a:	82 30       	cpi	r24, 0x02	; 2
 71c:	09 f4       	brne	.+2      	; 0x720 <DirectionReleaseUp+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD |= (1 << DIRECTION_SW2_CLEAN);
 71e:	5c 9a       	sbi	0x0b, 4	; 11
 720:	08 95       	ret

00000722 <DirectionGetLeftState>:
}

// Reading Inputs
uint8_t DirectionGetLeftState()
{
	return (PINB & (1 << DIRECTION_LEFT_BUTTON));
 722:	83 b1       	in	r24, 0x03	; 3
}
 724:	82 70       	andi	r24, 0x02	; 2
 726:	08 95       	ret

00000728 <DirectionGetRightState>:

uint8_t DirectionGetRightState()
{
	return (PINB & (1 << DIRECTION_RIGHT_BUTTON));
 728:	83 b1       	in	r24, 0x03	; 3
}
 72a:	81 70       	andi	r24, 0x01	; 1
 72c:	08 95       	ret

0000072e <DirectionGetUpState>:

uint8_t DirectionGetUpState()
{
	return (PINB & (1 << DIRECTION_UP_BUTTON));
 72e:	83 b1       	in	r24, 0x03	; 3
}
 730:	88 70       	andi	r24, 0x08	; 8
 732:	08 95       	ret

00000734 <DirectionGetDownState>:

uint8_t DirectionGetDownState()
{
	return (PINB & (1 << DIRECTION_DOWN_BUTTON));
 734:	83 b1       	in	r24, 0x03	; 3
 736:	84 70       	andi	r24, 0x04	; 4
 738:	08 95       	ret

0000073a <main>:
}

static void MainInitialize()
{
	// Set all ports to be configured as inputs
	DDRB = 0b00000000;
 73a:	14 b8       	out	0x04, r1	; 4
	DDRC = 0b00000000;
 73c:	17 b8       	out	0x07, r1	; 7
	DDRD = 0b00000000;
 73e:	1a b8       	out	0x0a, r1	; 10

	// Disable all internal pull-up resistors
	PORTB = 0b00000000;
 740:	15 b8       	out	0x05, r1	; 5
	PORTC = 0b00000000;
 742:	18 b8       	out	0x08, r1	; 8
	PORTD = 0b00000000;
 744:	1b b8       	out	0x0b, r1	; 11

	// Enable necessary internal pull-up resistors
	PORTB |= (1 << MAIN_RIGHT_BUTTON_PULLUP);
 746:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1 << MAIN_LEFT_BUTTON_PULLUP);
 748:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1 << MAIN_DOWN_BUTTON_PULLUP);
 74a:	2a 9a       	sbi	0x05, 2	; 5
	PORTB |= (1 << MAIN_UP_BUTTON_PULLUP);
 74c:	2b 9a       	sbi	0x05, 3	; 5
	PORTC |= (1 << MAIN_DIP5_SW1_PULLUP);
 74e:	47 9a       	sbi	0x08, 7	; 8
	PORTC |= (1 << MAIN_DIP5_SW2_PULLUP);
 750:	45 9a       	sbi	0x08, 5	; 8
	PORTC |= (1 << MAIN_DIP5_SW3_PULLUP);
 752:	46 9a       	sbi	0x08, 6	; 8
	PORTC |= (1 << MAIN_DIP5_SW4_PULLUP);
 754:	44 9a       	sbi	0x08, 4	; 8
	PORTC |= (1 << MAIN_DIP5_SW5_PULLUP);
 756:	42 9a       	sbi	0x08, 2	; 8
	PORTD |= (1 << MAIN_DIP2_SW1_PULLUP);
 758:	59 9a       	sbi	0x0b, 1	; 11
	PORTD |= (1 << MAIN_DIP2_SW2_PULLUP);
 75a:	5a 9a       	sbi	0x0b, 2	; 11
	PORTB |= (1 << MAIN_PRESET_BUTTON_PULLUP);
 75c:	2f 9a       	sbi	0x05, 7	; 5

	// Set specific port bits to be configured as outputs
	DDRD = DDRD | (1 << DIRECTION_SW1_CLEAN);
 75e:	53 9a       	sbi	0x0a, 3	; 10
	DDRD = DDRD | (1 << DIRECTION_SW2_CLEAN);
 760:	54 9a       	sbi	0x0a, 4	; 10
	DDRD = DDRD | (1 << DIRECTION_SW3_CLEAN);
 762:	55 9a       	sbi	0x0a, 5	; 10
	DDRD = DDRD | (1 << DIRECTION_SW4_CLEAN);
 764:	56 9a       	sbi	0x0a, 6	; 10

	// Default button positions
	DirectionReleaseLeft(0);
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	0e 94 3d 03 	call	0x67a	; 0x67a <DirectionReleaseLeft>
	DirectionReleaseRight(0);
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	0e 94 55 03 	call	0x6aa	; 0x6aa <DirectionReleaseRight>
	DirectionReleaseDown(0);
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	0e 94 6d 03 	call	0x6da	; 0x6da <DirectionReleaseDown>
	DirectionReleaseUp(0);
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	0e 94 85 03 	call	0x70a	; 0x70a <DirectionReleaseUp>
	
	// Read in saved remote mode code, but
	// default to REMOTE_MODE_1 if eeprom data is not in range
	uint8_t tempData = eeprom_read_byte (( uint8_t *) 46);
 77e:	8e e2       	ldi	r24, 0x2E	; 46
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 87 05 	call	0xb0e	; 0xb0e <eeprom_read_byte>
	if (tempData > 15)
 786:	80 31       	cpi	r24, 0x10	; 16
 788:	18 f0       	brcs	.+6      	; 0x790 <main+0x56>
	{
		remoteModeCode = REMOTE_MODE_0;
 78a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <remoteModeCode>
 78e:	02 c0       	rjmp	.+4      	; 0x794 <main+0x5a>
	}
	else
	{
		remoteModeCode = tempData;
 790:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <remoteModeCode>
	}
	
	// Set up the 16 bit timer to keep counting up
	TCCR1B |= (1 << CS10);
 794:	e1 e8       	ldi	r30, 0x81	; 129
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	80 81       	ld	r24, Z
 79a:	81 60       	ori	r24, 0x01	; 1
 79c:	80 83       	st	Z, r24
	
	// Default program mode counter
	programModeCounter = 0;
 79e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <programModeCounter>
}

static void MainUpdateProgramModeCounter()
{
	// Update counter whenever timer ticks above 0.05 seconds
	if(TCNT1 >= 49999)
 7a2:	0f 2e       	mov	r0, r31
 7a4:	f4 e8       	ldi	r31, 0x84	; 132
 7a6:	ef 2e       	mov	r14, r31
 7a8:	f1 2c       	mov	r15, r1
 7aa:	f0 2d       	mov	r31, r0
	return(0);
}

static void MainGoClean()
{
	if(ModeSwitchesRemote() == 0)
 7ac:	0e 94 14 03 	call	0x628	; 0x628 <ModeSwitchesRemote>
 7b0:	81 11       	cpse	r24, r1
 7b2:	4b c0       	rjmp	.+150    	; 0x84a <main+0x110>
	{
		MainCleanerX(DirectionGetLeftState(), DirectionGetRightState());
 7b4:	0e 94 94 03 	call	0x728	; 0x728 <DirectionGetRightState>
 7b8:	d8 2f       	mov	r29, r24
 7ba:	0e 94 91 03 	call	0x722	; 0x722 <DirectionGetLeftState>
 7be:	c8 2f       	mov	r28, r24
}

static void MainCleanerX(uint8_t tempLeftState, uint8_t tempRightState)
{
	// Grab cleaner from local dip switches
	if(ModeSwitchesX() == 0)
 7c0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <ModeSwitchesX>
 7c4:	81 11       	cpse	r24, r1
 7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <main+0x98>
	{
		CleanerXNeutral(tempLeftState, tempRightState);
 7c8:	6d 2f       	mov	r22, r29
 7ca:	8c 2f       	mov	r24, r28
 7cc:	0e 94 5e 00 	call	0xbc	; 0xbc <CleanerXNeutral>
 7d0:	16 c0       	rjmp	.+44     	; 0x7fe <main+0xc4>
	}
	else if(ModeSwitchesX() == 1)
 7d2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <ModeSwitchesX>
 7d6:	81 30       	cpi	r24, 0x01	; 1
 7d8:	29 f4       	brne	.+10     	; 0x7e4 <main+0xaa>
	{
		CleanerXLeft(tempLeftState, tempRightState);
 7da:	6d 2f       	mov	r22, r29
 7dc:	8c 2f       	mov	r24, r28
 7de:	0e 94 88 00 	call	0x110	; 0x110 <CleanerXLeft>
 7e2:	0d c0       	rjmp	.+26     	; 0x7fe <main+0xc4>
	}
	else if(ModeSwitchesX() == 2)
 7e4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <ModeSwitchesX>
 7e8:	82 30       	cpi	r24, 0x02	; 2
 7ea:	29 f4       	brne	.+10     	; 0x7f6 <main+0xbc>
	{
		CleanerXRight(tempLeftState, tempRightState);
 7ec:	6d 2f       	mov	r22, r29
 7ee:	8c 2f       	mov	r24, r28
 7f0:	0e 94 b2 00 	call	0x164	; 0x164 <CleanerXRight>
 7f4:	04 c0       	rjmp	.+8      	; 0x7fe <main+0xc4>
	}
	else
	{
		CleanerXLastInput(tempLeftState, tempRightState);
 7f6:	6d 2f       	mov	r22, r29
 7f8:	8c 2f       	mov	r24, r28
 7fa:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <CleanerXLastInput>
static void MainGoClean()
{
	if(ModeSwitchesRemote() == 0)
	{
		MainCleanerX(DirectionGetLeftState(), DirectionGetRightState());
		MainCleanerY(DirectionGetDownState(), DirectionGetUpState());
 7fe:	0e 94 97 03 	call	0x72e	; 0x72e <DirectionGetUpState>
 802:	d8 2f       	mov	r29, r24
 804:	0e 94 9a 03 	call	0x734	; 0x734 <DirectionGetDownState>
 808:	c8 2f       	mov	r28, r24
}

static void MainCleanerY(uint8_t tempDownState, uint8_t tempUpState)
{
	// Cleaning for y axis
	if(ModeSwitchesY() == 0)
 80a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <ModeSwitchesY>
 80e:	81 11       	cpse	r24, r1
 810:	05 c0       	rjmp	.+10     	; 0x81c <main+0xe2>
	{
		CleanerYNeutral(tempDownState, tempUpState);
 812:	6d 2f       	mov	r22, r29
 814:	8c 2f       	mov	r24, r28
 816:	0e 94 a3 01 	call	0x346	; 0x346 <CleanerYNeutral>
 81a:	c8 cf       	rjmp	.-112    	; 0x7ac <main+0x72>
	}
	else if(ModeSwitchesY() == 1)
 81c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <ModeSwitchesY>
 820:	81 30       	cpi	r24, 0x01	; 1
 822:	29 f4       	brne	.+10     	; 0x82e <main+0xf4>
	{
		CleanerYDown(tempDownState, tempUpState);
 824:	6d 2f       	mov	r22, r29
 826:	8c 2f       	mov	r24, r28
 828:	0e 94 cd 01 	call	0x39a	; 0x39a <CleanerYDown>
 82c:	bf cf       	rjmp	.-130    	; 0x7ac <main+0x72>
	}
	else if(ModeSwitchesY() == 2)
 82e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <ModeSwitchesY>
 832:	82 30       	cpi	r24, 0x02	; 2
 834:	29 f4       	brne	.+10     	; 0x840 <main+0x106>
	{
		CleanerYUp(tempDownState, tempUpState);
 836:	6d 2f       	mov	r22, r29
 838:	8c 2f       	mov	r24, r28
 83a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CleanerYUp>
 83e:	b6 cf       	rjmp	.-148    	; 0x7ac <main+0x72>
	}
	else
	{
		CleanerYLastInput(tempDownState, tempUpState);
 840:	6d 2f       	mov	r22, r29
 842:	8c 2f       	mov	r24, r28
 844:	0e 94 21 02 	call	0x442	; 0x442 <CleanerYLastInput>
 848:	b1 cf       	rjmp	.-158    	; 0x7ac <main+0x72>
		MainCleanerX(DirectionGetLeftState(), DirectionGetRightState());
		MainCleanerY(DirectionGetDownState(), DirectionGetUpState());
	}
	else
	{
		MainCleanerRemote(DirectionGetLeftState(), DirectionGetRightState(), DirectionGetDownState(), DirectionGetUpState());
 84a:	0e 94 97 03 	call	0x72e	; 0x72e <DirectionGetUpState>
 84e:	d8 2f       	mov	r29, r24
 850:	0e 94 9a 03 	call	0x734	; 0x734 <DirectionGetDownState>
 854:	c8 2f       	mov	r28, r24
 856:	0e 94 94 03 	call	0x728	; 0x728 <DirectionGetRightState>
 85a:	18 2f       	mov	r17, r24
 85c:	0e 94 91 03 	call	0x722	; 0x722 <DirectionGetLeftState>
	}
}

static void MainCleanerRemote(uint8_t tempLeftState, uint8_t tempRightState, uint8_t tempDownState, uint8_t tempUpState)
{
	switch (remoteModeCode)
 860:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <remoteModeCode>
 864:	4e 2f       	mov	r20, r30
 866:	50 e0       	ldi	r21, 0x00	; 0
 868:	40 31       	cpi	r20, 0x10	; 16
 86a:	51 05       	cpc	r21, r1
 86c:	08 f0       	brcs	.+2      	; 0x870 <main+0x136>
 86e:	84 c0       	rjmp	.+264    	; 0x978 <main+0x23e>
 870:	fa 01       	movw	r30, r20
 872:	e6 5c       	subi	r30, 0xC6	; 198
 874:	ff 4f       	sbci	r31, 0xFF	; 255
 876:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__tablejump2__>
	{
		case REMOTE_MODE_0:
			CleanerXNeutral(tempLeftState, tempRightState);
 87a:	61 2f       	mov	r22, r17
 87c:	0e 94 5e 00 	call	0xbc	; 0xbc <CleanerXNeutral>
			CleanerYNeutral(tempDownState, tempUpState);
 880:	6d 2f       	mov	r22, r29
 882:	8c 2f       	mov	r24, r28
 884:	0e 94 a3 01 	call	0x346	; 0x346 <CleanerYNeutral>
 888:	77 c0       	rjmp	.+238    	; 0x978 <main+0x23e>
			break;
		
		case REMOTE_MODE_1:
			CleanerXNeutral(tempLeftState, tempRightState);
 88a:	61 2f       	mov	r22, r17
 88c:	0e 94 5e 00 	call	0xbc	; 0xbc <CleanerXNeutral>
			CleanerYDown(tempDownState, tempUpState);
 890:	6d 2f       	mov	r22, r29
 892:	8c 2f       	mov	r24, r28
 894:	0e 94 cd 01 	call	0x39a	; 0x39a <CleanerYDown>
 898:	6f c0       	rjmp	.+222    	; 0x978 <main+0x23e>
			break;
		
		case REMOTE_MODE_2:
			CleanerXNeutral(tempLeftState, tempRightState);
 89a:	61 2f       	mov	r22, r17
 89c:	0e 94 5e 00 	call	0xbc	; 0xbc <CleanerXNeutral>
			CleanerYUp(tempDownState, tempUpState);
 8a0:	6d 2f       	mov	r22, r29
 8a2:	8c 2f       	mov	r24, r28
 8a4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CleanerYUp>
 8a8:	67 c0       	rjmp	.+206    	; 0x978 <main+0x23e>
			break;
		
		case REMOTE_MODE_3:
			CleanerXNeutral(tempLeftState, tempRightState);
 8aa:	61 2f       	mov	r22, r17
 8ac:	0e 94 5e 00 	call	0xbc	; 0xbc <CleanerXNeutral>
			CleanerYLastInput(tempDownState, tempUpState);
 8b0:	6d 2f       	mov	r22, r29
 8b2:	8c 2f       	mov	r24, r28
 8b4:	0e 94 21 02 	call	0x442	; 0x442 <CleanerYLastInput>
 8b8:	5f c0       	rjmp	.+190    	; 0x978 <main+0x23e>
			break;
		
		case REMOTE_MODE_4:
			CleanerXLeft(tempLeftState, tempRightState);
 8ba:	61 2f       	mov	r22, r17
 8bc:	0e 94 88 00 	call	0x110	; 0x110 <CleanerXLeft>
			CleanerYNeutral(tempDownState, tempUpState);
 8c0:	6d 2f       	mov	r22, r29
 8c2:	8c 2f       	mov	r24, r28
 8c4:	0e 94 a3 01 	call	0x346	; 0x346 <CleanerYNeutral>
 8c8:	57 c0       	rjmp	.+174    	; 0x978 <main+0x23e>
			break;
		
		case REMOTE_MODE_5:
			CleanerXLeft(tempLeftState, tempRightState);
 8ca:	61 2f       	mov	r22, r17
 8cc:	0e 94 88 00 	call	0x110	; 0x110 <CleanerXLeft>
			CleanerYDown(tempDownState, tempUpState);
 8d0:	6d 2f       	mov	r22, r29
 8d2:	8c 2f       	mov	r24, r28
 8d4:	0e 94 cd 01 	call	0x39a	; 0x39a <CleanerYDown>
 8d8:	4f c0       	rjmp	.+158    	; 0x978 <main+0x23e>
			break;
		
		case REMOTE_MODE_6:
			CleanerXLeft(tempLeftState, tempRightState);
 8da:	61 2f       	mov	r22, r17
 8dc:	0e 94 88 00 	call	0x110	; 0x110 <CleanerXLeft>
			CleanerYUp(tempDownState, tempUpState);
 8e0:	6d 2f       	mov	r22, r29
 8e2:	8c 2f       	mov	r24, r28
 8e4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CleanerYUp>
 8e8:	47 c0       	rjmp	.+142    	; 0x978 <main+0x23e>
			break;
		
		case REMOTE_MODE_7:
			CleanerXLeft(tempLeftState, tempRightState);
 8ea:	61 2f       	mov	r22, r17
 8ec:	0e 94 88 00 	call	0x110	; 0x110 <CleanerXLeft>
			CleanerYLastInput(tempDownState, tempUpState);
 8f0:	6d 2f       	mov	r22, r29
 8f2:	8c 2f       	mov	r24, r28
 8f4:	0e 94 21 02 	call	0x442	; 0x442 <CleanerYLastInput>
 8f8:	3f c0       	rjmp	.+126    	; 0x978 <main+0x23e>
			break;
		
		case REMOTE_MODE_8:
			CleanerXRight(tempLeftState, tempRightState);
 8fa:	61 2f       	mov	r22, r17
 8fc:	0e 94 b2 00 	call	0x164	; 0x164 <CleanerXRight>
			CleanerYNeutral(tempDownState, tempUpState);
 900:	6d 2f       	mov	r22, r29
 902:	8c 2f       	mov	r24, r28
 904:	0e 94 a3 01 	call	0x346	; 0x346 <CleanerYNeutral>
 908:	37 c0       	rjmp	.+110    	; 0x978 <main+0x23e>
			break;
		
		case REMOTE_MODE_9:
			CleanerXRight(tempLeftState, tempRightState);
 90a:	61 2f       	mov	r22, r17
 90c:	0e 94 b2 00 	call	0x164	; 0x164 <CleanerXRight>
			CleanerYDown(tempDownState, tempUpState);
 910:	6d 2f       	mov	r22, r29
 912:	8c 2f       	mov	r24, r28
 914:	0e 94 cd 01 	call	0x39a	; 0x39a <CleanerYDown>
 918:	2f c0       	rjmp	.+94     	; 0x978 <main+0x23e>
			break;
		
		case REMOTE_MODE_10:
			CleanerXRight(tempLeftState, tempRightState);
 91a:	61 2f       	mov	r22, r17
 91c:	0e 94 b2 00 	call	0x164	; 0x164 <CleanerXRight>
			CleanerYUp(tempDownState, tempUpState);
 920:	6d 2f       	mov	r22, r29
 922:	8c 2f       	mov	r24, r28
 924:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CleanerYUp>
 928:	27 c0       	rjmp	.+78     	; 0x978 <main+0x23e>
			break;
		
		case REMOTE_MODE_11:
			CleanerXRight(tempLeftState, tempRightState);
 92a:	61 2f       	mov	r22, r17
 92c:	0e 94 b2 00 	call	0x164	; 0x164 <CleanerXRight>
			CleanerYLastInput(tempDownState, tempUpState);
 930:	6d 2f       	mov	r22, r29
 932:	8c 2f       	mov	r24, r28
 934:	0e 94 21 02 	call	0x442	; 0x442 <CleanerYLastInput>
 938:	1f c0       	rjmp	.+62     	; 0x978 <main+0x23e>
			break;
		
		case REMOTE_MODE_12:
			CleanerXLastInput(tempLeftState, tempRightState);
 93a:	61 2f       	mov	r22, r17
 93c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <CleanerXLastInput>
			CleanerYNeutral(tempDownState, tempUpState);
 940:	6d 2f       	mov	r22, r29
 942:	8c 2f       	mov	r24, r28
 944:	0e 94 a3 01 	call	0x346	; 0x346 <CleanerYNeutral>
 948:	17 c0       	rjmp	.+46     	; 0x978 <main+0x23e>
			break;
		
		case REMOTE_MODE_13:
			CleanerXLastInput(tempLeftState, tempRightState);
 94a:	61 2f       	mov	r22, r17
 94c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <CleanerXLastInput>
			CleanerYDown(tempDownState, tempUpState);
 950:	6d 2f       	mov	r22, r29
 952:	8c 2f       	mov	r24, r28
 954:	0e 94 cd 01 	call	0x39a	; 0x39a <CleanerYDown>
 958:	0f c0       	rjmp	.+30     	; 0x978 <main+0x23e>
			break;
		
		case REMOTE_MODE_14:
			CleanerXLastInput(tempLeftState, tempRightState);
 95a:	61 2f       	mov	r22, r17
 95c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <CleanerXLastInput>
			CleanerYUp(tempDownState, tempUpState);
 960:	6d 2f       	mov	r22, r29
 962:	8c 2f       	mov	r24, r28
 964:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CleanerYUp>
 968:	07 c0       	rjmp	.+14     	; 0x978 <main+0x23e>
			break;
		
		case REMOTE_MODE_15:
			CleanerXLastInput(tempLeftState, tempRightState);
 96a:	61 2f       	mov	r22, r17
 96c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <CleanerXLastInput>
			CleanerYLastInput(tempDownState, tempUpState);
 970:	6d 2f       	mov	r22, r29
 972:	8c 2f       	mov	r24, r28
 974:	0e 94 21 02 	call	0x442	; 0x442 <CleanerYLastInput>
}

static void MainUpdateProgramModeCounter()
{
	// Update counter whenever timer ticks above 0.05 seconds
	if(TCNT1 >= 49999)
 978:	f7 01       	movw	r30, r14
 97a:	80 81       	ld	r24, Z
 97c:	91 81       	ldd	r25, Z+1	; 0x01
 97e:	8f 34       	cpi	r24, 0x4F	; 79
 980:	93 4c       	sbci	r25, 0xC3	; 195
 982:	08 f4       	brcc	.+2      	; 0x986 <main+0x24c>
 984:	b8 c0       	rjmp	.+368    	; 0xaf6 <main+0x3bc>
	{
		// Update program mode counter only if all inputs are pressed
		if((DirectionGetLeftState() == 0) && (DirectionGetRightState() == 0) && (DirectionGetDownState() == 0) && (DirectionGetUpState() == 0))
 986:	0e 94 91 03 	call	0x722	; 0x722 <DirectionGetLeftState>
 98a:	81 11       	cpse	r24, r1
 98c:	15 c0       	rjmp	.+42     	; 0x9b8 <main+0x27e>
 98e:	0e 94 94 03 	call	0x728	; 0x728 <DirectionGetRightState>
 992:	81 11       	cpse	r24, r1
 994:	11 c0       	rjmp	.+34     	; 0x9b8 <main+0x27e>
 996:	0e 94 9a 03 	call	0x734	; 0x734 <DirectionGetDownState>
 99a:	81 11       	cpse	r24, r1
 99c:	0d c0       	rjmp	.+26     	; 0x9b8 <main+0x27e>
 99e:	0e 94 97 03 	call	0x72e	; 0x72e <DirectionGetUpState>
 9a2:	81 11       	cpse	r24, r1
 9a4:	09 c0       	rjmp	.+18     	; 0x9b8 <main+0x27e>
		{
			programModeCounter++;
 9a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <programModeCounter>
 9aa:	8f 5f       	subi	r24, 0xFF	; 255
 9ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <programModeCounter>
			TCNT1 = 0;
 9b0:	f7 01       	movw	r30, r14
 9b2:	11 82       	std	Z+1, r1	; 0x01
 9b4:	10 82       	st	Z, r1
 9b6:	9f c0       	rjmp	.+318    	; 0xaf6 <main+0x3bc>
		}
		else
		{
			programModeCounter = 0;
 9b8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <programModeCounter>
 9bc:	f7 ce       	rjmp	.-530    	; 0x7ac <main+0x72>

static void MainProgramModeChecker()
{
	// Determine if we should go into program mode after 5 seconds
	// In other words, 0.05 seconds have been counted 100 times
	if(programModeCounter > 100)
 9be:	c4 e6       	ldi	r28, 0x64	; 100
		// future
		
		// Read the inputs every 50 milliseconds for the next 5 seconds to determine the new cleaning operation
		for(uint8_t i = 0; i < 100; i++)
		{
			MainUpdateRemoteModeCode(DirectionGetLeftState(), DirectionGetRightState(), DirectionGetDownState(), DirectionGetUpState());
 9c0:	0e 94 97 03 	call	0x72e	; 0x72e <DirectionGetUpState>
 9c4:	18 2f       	mov	r17, r24
 9c6:	0e 94 9a 03 	call	0x734	; 0x734 <DirectionGetDownState>
 9ca:	08 2f       	mov	r16, r24
 9cc:	0e 94 94 03 	call	0x728	; 0x728 <DirectionGetRightState>
 9d0:	d8 2f       	mov	r29, r24
 9d2:	0e 94 91 03 	call	0x722	; 0x722 <DirectionGetLeftState>
	}
}

static void MainUpdateRemoteModeCode(uint8_t tempLeftState, uint8_t tempRightState, uint8_t tempDownState, uint8_t tempUpState)
{
	if ( (tempLeftState == 0) && (tempRightState == 0) && (tempDownState == 0) && (tempUpState == 0) )
 9d6:	81 11       	cpse	r24, r1
 9d8:	39 c0       	rjmp	.+114    	; 0xa4c <main+0x312>
 9da:	d1 11       	cpse	r29, r1
 9dc:	1e c0       	rjmp	.+60     	; 0xa1a <main+0x2e0>
 9de:	01 11       	cpse	r16, r1
 9e0:	0e c0       	rjmp	.+28     	; 0x9fe <main+0x2c4>
 9e2:	11 11       	cpse	r17, r1
 9e4:	06 c0       	rjmp	.+12     	; 0x9f2 <main+0x2b8>
	{
		eeprom_update_byte (( uint8_t *) 46, REMOTE_MODE_0 );
 9e6:	60 e0       	ldi	r22, 0x00	; 0
 9e8:	8e e2       	ldi	r24, 0x2E	; 46
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	0e 94 8f 05 	call	0xb1e	; 0xb1e <eeprom_update_byte>
 9f0:	6a c0       	rjmp	.+212    	; 0xac6 <main+0x38c>
	}
	else if ( (tempLeftState == 0) && (tempRightState == 0) && (tempDownState == 0) && (tempUpState > 0) )
	{
		eeprom_update_byte (( uint8_t *) 46, REMOTE_MODE_1 );
 9f2:	61 e0       	ldi	r22, 0x01	; 1
 9f4:	8e e2       	ldi	r24, 0x2E	; 46
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <eeprom_update_byte>
 9fc:	64 c0       	rjmp	.+200    	; 0xac6 <main+0x38c>
	}
	else if ( (tempLeftState == 0) && (tempRightState == 0) && (tempDownState > 0) && (tempUpState == 0) )
 9fe:	11 11       	cpse	r17, r1
 a00:	06 c0       	rjmp	.+12     	; 0xa0e <main+0x2d4>
	{
		eeprom_update_byte (( uint8_t *) 46, REMOTE_MODE_2 );
 a02:	62 e0       	ldi	r22, 0x02	; 2
 a04:	8e e2       	ldi	r24, 0x2E	; 46
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	0e 94 8f 05 	call	0xb1e	; 0xb1e <eeprom_update_byte>
 a0c:	5c c0       	rjmp	.+184    	; 0xac6 <main+0x38c>
	}
	else if ( (tempLeftState == 0) && (tempRightState == 0) && (tempDownState > 0) && (tempUpState > 0) )
	{
		eeprom_update_byte (( uint8_t *) 46, REMOTE_MODE_3 );
 a0e:	63 e0       	ldi	r22, 0x03	; 3
 a10:	8e e2       	ldi	r24, 0x2E	; 46
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0e 94 8f 05 	call	0xb1e	; 0xb1e <eeprom_update_byte>
 a18:	56 c0       	rjmp	.+172    	; 0xac6 <main+0x38c>
	}
	else if ( (tempLeftState == 0) && (tempRightState > 0) && (tempDownState == 0) && (tempUpState > 0) )
 a1a:	01 11       	cpse	r16, r1
 a1c:	09 c0       	rjmp	.+18     	; 0xa30 <main+0x2f6>
 a1e:	11 23       	and	r17, r17
 a20:	09 f4       	brne	.+2      	; 0xa24 <main+0x2ea>
 a22:	4c c0       	rjmp	.+152    	; 0xabc <main+0x382>
	{
		eeprom_update_byte (( uint8_t *) 46, REMOTE_MODE_4 );
 a24:	64 e0       	ldi	r22, 0x04	; 4
 a26:	8e e2       	ldi	r24, 0x2E	; 46
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <eeprom_update_byte>
 a2e:	4b c0       	rjmp	.+150    	; 0xac6 <main+0x38c>
	}
	else if ( (tempLeftState == 0) && (tempRightState > 0) && (tempDownState == 0) && (tempUpState > 0) )
	{
		eeprom_update_byte (( uint8_t *) 0, REMOTE_MODE_5 );
	}
	else if ( (tempLeftState == 0) && (tempRightState > 0) && (tempDownState > 0) && (tempUpState == 0) )
 a30:	11 11       	cpse	r17, r1
 a32:	06 c0       	rjmp	.+12     	; 0xa40 <main+0x306>
	{
		eeprom_update_byte (( uint8_t *) 46, REMOTE_MODE_6 );
 a34:	66 e0       	ldi	r22, 0x06	; 6
 a36:	8e e2       	ldi	r24, 0x2E	; 46
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <eeprom_update_byte>
 a3e:	43 c0       	rjmp	.+134    	; 0xac6 <main+0x38c>
	}
	else if ( (tempLeftState == 0) && (tempRightState > 0) && (tempDownState > 0) && (tempUpState > 0) )
	{
		eeprom_update_byte (( uint8_t *) 46, REMOTE_MODE_7 );
 a40:	67 e0       	ldi	r22, 0x07	; 7
 a42:	8e e2       	ldi	r24, 0x2E	; 46
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	0e 94 8f 05 	call	0xb1e	; 0xb1e <eeprom_update_byte>
 a4a:	3d c0       	rjmp	.+122    	; 0xac6 <main+0x38c>
	}
	else if ( (tempLeftState > 0) && (tempRightState == 0) && (tempDownState == 0) && (tempUpState == 0) )
 a4c:	d1 11       	cpse	r29, r1
 a4e:	1e c0       	rjmp	.+60     	; 0xa8c <main+0x352>
 a50:	01 11       	cpse	r16, r1
 a52:	0e c0       	rjmp	.+28     	; 0xa70 <main+0x336>
 a54:	11 11       	cpse	r17, r1
 a56:	06 c0       	rjmp	.+12     	; 0xa64 <main+0x32a>
	{
		eeprom_update_byte (( uint8_t *) 46, REMOTE_MODE_8 );
 a58:	68 e0       	ldi	r22, 0x08	; 8
 a5a:	8e e2       	ldi	r24, 0x2E	; 46
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <eeprom_update_byte>
 a62:	31 c0       	rjmp	.+98     	; 0xac6 <main+0x38c>
	}
	else if ( (tempLeftState > 0) && (tempRightState == 0) && (tempDownState == 0) && (tempUpState > 0) )
	{
		eeprom_update_byte (( uint8_t *) 46, REMOTE_MODE_9 );
 a64:	69 e0       	ldi	r22, 0x09	; 9
 a66:	8e e2       	ldi	r24, 0x2E	; 46
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <eeprom_update_byte>
 a6e:	2b c0       	rjmp	.+86     	; 0xac6 <main+0x38c>
	}
	else if ( (tempLeftState > 0) && (tempRightState == 0) && (tempDownState > 0) && (tempUpState == 0) )
 a70:	11 11       	cpse	r17, r1
 a72:	06 c0       	rjmp	.+12     	; 0xa80 <main+0x346>
	{
		eeprom_update_byte (( uint8_t *) 46, REMOTE_MODE_10 );
 a74:	6a e0       	ldi	r22, 0x0A	; 10
 a76:	8e e2       	ldi	r24, 0x2E	; 46
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <eeprom_update_byte>
 a7e:	23 c0       	rjmp	.+70     	; 0xac6 <main+0x38c>
	}
	else if ( (tempLeftState > 0) && (tempRightState == 0) && (tempDownState > 0) && (tempUpState > 0) )
	{
		eeprom_update_byte (( uint8_t *) 46, REMOTE_MODE_11 );
 a80:	6b e0       	ldi	r22, 0x0B	; 11
 a82:	8e e2       	ldi	r24, 0x2E	; 46
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	0e 94 8f 05 	call	0xb1e	; 0xb1e <eeprom_update_byte>
 a8a:	1d c0       	rjmp	.+58     	; 0xac6 <main+0x38c>
	}
	else if ( (tempLeftState > 0) && (tempRightState > 0) && (tempDownState == 0) && (tempUpState == 0) )
 a8c:	01 11       	cpse	r16, r1
 a8e:	0e c0       	rjmp	.+28     	; 0xaac <main+0x372>
 a90:	11 11       	cpse	r17, r1
 a92:	06 c0       	rjmp	.+12     	; 0xaa0 <main+0x366>
	{
		eeprom_update_byte (( uint8_t *) 46, REMOTE_MODE_12 );
 a94:	6c e0       	ldi	r22, 0x0C	; 12
 a96:	8e e2       	ldi	r24, 0x2E	; 46
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <eeprom_update_byte>
 a9e:	13 c0       	rjmp	.+38     	; 0xac6 <main+0x38c>
	}
	else if ( (tempLeftState > 0) && (tempRightState > 0) && (tempDownState == 0) && (tempUpState > 0) )
	{
		eeprom_update_byte (( uint8_t *) 46, REMOTE_MODE_13 );
 aa0:	6d e0       	ldi	r22, 0x0D	; 13
 aa2:	8e e2       	ldi	r24, 0x2E	; 46
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <eeprom_update_byte>
 aaa:	0d c0       	rjmp	.+26     	; 0xac6 <main+0x38c>
	}
	else if ( (tempLeftState > 0) && (tempRightState > 0) && (tempDownState > 0) && (tempUpState == 0) )
 aac:	11 11       	cpse	r17, r1
 aae:	06 c0       	rjmp	.+12     	; 0xabc <main+0x382>
	{
		eeprom_update_byte (( uint8_t *) 46, REMOTE_MODE_14 );
 ab0:	6e e0       	ldi	r22, 0x0E	; 14
 ab2:	8e e2       	ldi	r24, 0x2E	; 46
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <eeprom_update_byte>
 aba:	05 c0       	rjmp	.+10     	; 0xac6 <main+0x38c>
	}
	else
	{
		eeprom_update_byte (( uint8_t *) 46, REMOTE_MODE_15 );
 abc:	6f e0       	ldi	r22, 0x0F	; 15
 abe:	8e e2       	ldi	r24, 0x2E	; 46
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <eeprom_update_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 ac6:	81 ee       	ldi	r24, 0xE1	; 225
 ac8:	94 e0       	ldi	r25, 0x04	; 4
 aca:	01 97       	sbiw	r24, 0x01	; 1
 acc:	f1 f7       	brne	.-4      	; 0xaca <main+0x390>
 ace:	00 c0       	rjmp	.+0      	; 0xad0 <main+0x396>
 ad0:	00 00       	nop
	}
	_delay_ms(5);
	remoteModeCode = eeprom_read_byte (( uint8_t *) 46);
 ad2:	8e e2       	ldi	r24, 0x2E	; 46
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	0e 94 87 05 	call	0xb0e	; 0xb0e <eeprom_read_byte>
 ada:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <remoteModeCode>
 ade:	e3 ed       	ldi	r30, 0xD3	; 211
 ae0:	f0 e3       	ldi	r31, 0x30	; 48
 ae2:	31 97       	sbiw	r30, 0x01	; 1
 ae4:	f1 f7       	brne	.-4      	; 0xae2 <main+0x3a8>
 ae6:	00 c0       	rjmp	.+0      	; 0xae8 <main+0x3ae>
 ae8:	00 00       	nop
 aea:	c1 50       	subi	r28, 0x01	; 1
	{
		// Indicate you are in program mode
		// future
		
		// Read the inputs every 50 milliseconds for the next 5 seconds to determine the new cleaning operation
		for(uint8_t i = 0; i < 100; i++)
 aec:	09 f0       	breq	.+2      	; 0xaf0 <main+0x3b6>
 aee:	68 cf       	rjmp	.-304    	; 0x9c0 <main+0x286>
			MainUpdateRemoteModeCode(DirectionGetLeftState(), DirectionGetRightState(), DirectionGetDownState(), DirectionGetUpState());
			_delay_ms(50);
		}
		
		// Task complete so reset the counter
		programModeCounter = 0;
 af0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <programModeCounter>
 af4:	5b ce       	rjmp	.-842    	; 0x7ac <main+0x72>

static void MainProgramModeChecker()
{
	// Determine if we should go into program mode after 5 seconds
	// In other words, 0.05 seconds have been counted 100 times
	if(programModeCounter > 100)
 af6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <programModeCounter>
 afa:	85 36       	cpi	r24, 0x65	; 101
 afc:	08 f0       	brcs	.+2      	; 0xb00 <main+0x3c6>
 afe:	5f cf       	rjmp	.-322    	; 0x9be <main+0x284>
 b00:	55 ce       	rjmp	.-854    	; 0x7ac <main+0x72>

00000b02 <__tablejump2__>:
 b02:	ee 0f       	add	r30, r30
 b04:	ff 1f       	adc	r31, r31
 b06:	05 90       	lpm	r0, Z+
 b08:	f4 91       	lpm	r31, Z
 b0a:	e0 2d       	mov	r30, r0
 b0c:	09 94       	ijmp

00000b0e <eeprom_read_byte>:
 b0e:	f9 99       	sbic	0x1f, 1	; 31
 b10:	fe cf       	rjmp	.-4      	; 0xb0e <eeprom_read_byte>
 b12:	92 bd       	out	0x22, r25	; 34
 b14:	81 bd       	out	0x21, r24	; 33
 b16:	f8 9a       	sbi	0x1f, 0	; 31
 b18:	99 27       	eor	r25, r25
 b1a:	80 b5       	in	r24, 0x20	; 32
 b1c:	08 95       	ret

00000b1e <eeprom_update_byte>:
 b1e:	26 2f       	mov	r18, r22

00000b20 <eeprom_update_r18>:
 b20:	f9 99       	sbic	0x1f, 1	; 31
 b22:	fe cf       	rjmp	.-4      	; 0xb20 <eeprom_update_r18>
 b24:	92 bd       	out	0x22, r25	; 34
 b26:	81 bd       	out	0x21, r24	; 33
 b28:	f8 9a       	sbi	0x1f, 0	; 31
 b2a:	01 97       	sbiw	r24, 0x01	; 1
 b2c:	00 b4       	in	r0, 0x20	; 32
 b2e:	02 16       	cp	r0, r18
 b30:	39 f0       	breq	.+14     	; 0xb40 <eeprom_update_r18+0x20>
 b32:	1f ba       	out	0x1f, r1	; 31
 b34:	20 bd       	out	0x20, r18	; 32
 b36:	0f b6       	in	r0, 0x3f	; 63
 b38:	f8 94       	cli
 b3a:	fa 9a       	sbi	0x1f, 2	; 31
 b3c:	f9 9a       	sbi	0x1f, 1	; 31
 b3e:	0f be       	out	0x3f, r0	; 63
 b40:	08 95       	ret

00000b42 <_exit>:
 b42:	f8 94       	cli

00000b44 <__stop_program>:
 b44:	ff cf       	rjmp	.-2      	; 0xb44 <__stop_program>
