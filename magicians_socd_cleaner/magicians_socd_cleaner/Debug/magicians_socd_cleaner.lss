
magicians_socd_cleaner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001456  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f0  00000000  00000000  00001b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a9d  00000000  00000000  0000244e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000238  00000000  00000000  00002eec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000704  00000000  00000000  00003124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000069b  00000000  00000000  00003828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00003ec3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  10:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  14:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  18:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  1c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  20:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  24:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  28:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  2c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  30:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  34:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  38:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  3c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  40:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  44:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  48:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  4c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  50:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  54:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  58:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  5c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  60:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  68:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  6c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  70:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_clear_bss>:
  80:	21 e0       	ldi	r18, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	01 c0       	rjmp	.+2      	; 0x8a <.do_clear_bss_start>

00000088 <.do_clear_bss_loop>:
  88:	1d 92       	st	X+, r1

0000008a <.do_clear_bss_start>:
  8a:	a0 30       	cpi	r26, 0x00	; 0
  8c:	b2 07       	cpc	r27, r18
  8e:	e1 f7       	brne	.-8      	; 0x88 <.do_clear_bss_loop>
  90:	0e 94 69 02 	call	0x4d2	; 0x4d2 <main>
  94:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_exit>

00000098 <__bad_interrupt>:
  98:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009c <CleanerXNeutral>:
/* Function Definitions */
// SOCD Cleaners
void CleanerXNeutral(uint8_t tempLeftState, uint8_t tempRightState)
{
	// Left and Right = Neutral
	if ( (tempLeftState == 0) && (tempRightState == 0) )
  9c:	81 11       	cpse	r24, r1
  9e:	14 c0       	rjmp	.+40     	; 0xc8 <CleanerXNeutral+0x2c>
  a0:	61 11       	cpse	r22, r1
  a2:	09 c0       	rjmp	.+18     	; 0xb6 <CleanerXNeutral+0x1a>
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
  a4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
  a8:	0e 94 9a 01 	call	0x334	; 0x334 <DirectionReleaseLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
  ac:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
  b0:	0e 94 b2 01 	call	0x364	; 0x364 <DirectionReleaseRight>
  b4:	08 95       	ret
	}
	else if ( (tempLeftState == 0) && (tempRightState > 0) )
	{
		DirectionPressLeft(ModeSwitchesOrientation());
  b6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
  ba:	0e 94 8e 01 	call	0x31c	; 0x31c <DirectionPressLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
  be:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
  c2:	0e 94 b2 01 	call	0x364	; 0x364 <DirectionReleaseRight>
  c6:	08 95       	ret
	}
	else if ( (tempLeftState > 0) && (tempRightState == 0) )
  c8:	61 11       	cpse	r22, r1
  ca:	09 c0       	rjmp	.+18     	; 0xde <CleanerXNeutral+0x42>
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
  cc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
  d0:	0e 94 9a 01 	call	0x334	; 0x334 <DirectionReleaseLeft>
		DirectionPressRight(ModeSwitchesOrientation());
  d4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
  d8:	0e 94 a6 01 	call	0x34c	; 0x34c <DirectionPressRight>
  dc:	08 95       	ret
	}
	else
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
  de:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
  e2:	0e 94 9a 01 	call	0x334	; 0x334 <DirectionReleaseLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
  e6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
  ea:	0e 94 b2 01 	call	0x364	; 0x364 <DirectionReleaseRight>
  ee:	08 95       	ret

000000f0 <CleanerXLeft>:
}

void CleanerXLeft(uint8_t tempLeftState, uint8_t tempRightState)
{
	// Left and Right = Left
	if ( (tempLeftState == 0) && (tempRightState == 0) )
  f0:	81 11       	cpse	r24, r1
  f2:	14 c0       	rjmp	.+40     	; 0x11c <CleanerXLeft+0x2c>
  f4:	61 11       	cpse	r22, r1
  f6:	09 c0       	rjmp	.+18     	; 0x10a <CleanerXLeft+0x1a>
	{
		DirectionPressLeft(ModeSwitchesOrientation());
  f8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
  fc:	0e 94 8e 01 	call	0x31c	; 0x31c <DirectionPressLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 100:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 104:	0e 94 b2 01 	call	0x364	; 0x364 <DirectionReleaseRight>
 108:	08 95       	ret
	}
	else if ( (tempLeftState == 0) && (tempRightState > 0) )
	{
		DirectionPressLeft(ModeSwitchesOrientation());
 10a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 10e:	0e 94 8e 01 	call	0x31c	; 0x31c <DirectionPressLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 112:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 116:	0e 94 b2 01 	call	0x364	; 0x364 <DirectionReleaseRight>
 11a:	08 95       	ret
	}
	else if ( (tempLeftState > 0) && (tempRightState == 0) )
 11c:	61 11       	cpse	r22, r1
 11e:	09 c0       	rjmp	.+18     	; 0x132 <CleanerXLeft+0x42>
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
 120:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 124:	0e 94 9a 01 	call	0x334	; 0x334 <DirectionReleaseLeft>
		DirectionPressRight(ModeSwitchesOrientation());
 128:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 12c:	0e 94 a6 01 	call	0x34c	; 0x34c <DirectionPressRight>
 130:	08 95       	ret
	}
	else
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
 132:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 136:	0e 94 9a 01 	call	0x334	; 0x334 <DirectionReleaseLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 13a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 13e:	0e 94 b2 01 	call	0x364	; 0x364 <DirectionReleaseRight>
 142:	08 95       	ret

00000144 <CleanerXRight>:
}

void CleanerXRight(uint8_t tempLeftState, uint8_t tempRightState)
{
	// Left and Right = Right
	if ( (tempLeftState == 0) && (tempRightState == 0) )
 144:	81 11       	cpse	r24, r1
 146:	14 c0       	rjmp	.+40     	; 0x170 <CleanerXRight+0x2c>
 148:	61 11       	cpse	r22, r1
 14a:	09 c0       	rjmp	.+18     	; 0x15e <CleanerXRight+0x1a>
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
 14c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 150:	0e 94 9a 01 	call	0x334	; 0x334 <DirectionReleaseLeft>
		DirectionPressRight(ModeSwitchesOrientation());
 154:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 158:	0e 94 a6 01 	call	0x34c	; 0x34c <DirectionPressRight>
 15c:	08 95       	ret
	}
	else if ( (tempLeftState == 0) && (tempRightState > 0) )
	{
		DirectionPressLeft(ModeSwitchesOrientation());
 15e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 162:	0e 94 8e 01 	call	0x31c	; 0x31c <DirectionPressLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 166:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 16a:	0e 94 b2 01 	call	0x364	; 0x364 <DirectionReleaseRight>
 16e:	08 95       	ret
	}
	else if ( (tempLeftState > 0) && (tempRightState == 0) )
 170:	61 11       	cpse	r22, r1
 172:	09 c0       	rjmp	.+18     	; 0x186 <CleanerXRight+0x42>
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
 174:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 178:	0e 94 9a 01 	call	0x334	; 0x334 <DirectionReleaseLeft>
		DirectionPressRight(ModeSwitchesOrientation());
 17c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 180:	0e 94 a6 01 	call	0x34c	; 0x34c <DirectionPressRight>
 184:	08 95       	ret
	}
	else
	{
		DirectionReleaseLeft(ModeSwitchesOrientation());
 186:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 18a:	0e 94 9a 01 	call	0x334	; 0x334 <DirectionReleaseLeft>
		DirectionReleaseRight(ModeSwitchesOrientation());
 18e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 192:	0e 94 b2 01 	call	0x364	; 0x364 <DirectionReleaseRight>
 196:	08 95       	ret

00000198 <CleanerXLastInput>:
	}
}

void CleanerXLastInput(uint8_t tempLeftState, uint8_t tempRightState)
{
 198:	08 95       	ret

0000019a <CleanerYNeutral>:
}

void CleanerYNeutral(uint8_t tempDownState, uint8_t tempUpState)
{
	// Down and Up = Neutral
	if ( (tempDownState == 0) && (tempUpState == 0) )
 19a:	81 11       	cpse	r24, r1
 19c:	14 c0       	rjmp	.+40     	; 0x1c6 <CleanerYNeutral+0x2c>
 19e:	61 11       	cpse	r22, r1
 1a0:	09 c0       	rjmp	.+18     	; 0x1b4 <CleanerYNeutral+0x1a>
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 1a2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 1a6:	0e 94 ca 01 	call	0x394	; 0x394 <DirectionReleaseDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 1aa:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 1ae:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DirectionReleaseUp>
 1b2:	08 95       	ret
	}
	else if ( (tempDownState == 0) && (tempUpState > 0) )
	{
		DirectionPressDown(ModeSwitchesOrientation());
 1b4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 1b8:	0e 94 be 01 	call	0x37c	; 0x37c <DirectionPressDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 1bc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 1c0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DirectionReleaseUp>
 1c4:	08 95       	ret
	}
	else if ( (tempDownState > 0) && (tempUpState == 0) )
 1c6:	61 11       	cpse	r22, r1
 1c8:	09 c0       	rjmp	.+18     	; 0x1dc <CleanerYNeutral+0x42>
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 1ca:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 1ce:	0e 94 ca 01 	call	0x394	; 0x394 <DirectionReleaseDown>
		DirectionPressUp(ModeSwitchesOrientation());
 1d2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 1d6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DirectionPressUp>
 1da:	08 95       	ret
	}
	else
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 1dc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 1e0:	0e 94 ca 01 	call	0x394	; 0x394 <DirectionReleaseDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 1e4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 1e8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DirectionReleaseUp>
 1ec:	08 95       	ret

000001ee <CleanerYDown>:
}

void CleanerYDown(uint8_t tempDownState, uint8_t tempUpState)
{
	// Down and Up = Down
	if ( (tempDownState == 0) && (tempUpState == 0) )
 1ee:	81 11       	cpse	r24, r1
 1f0:	14 c0       	rjmp	.+40     	; 0x21a <CleanerYDown+0x2c>
 1f2:	61 11       	cpse	r22, r1
 1f4:	09 c0       	rjmp	.+18     	; 0x208 <CleanerYDown+0x1a>
	{
		DirectionPressDown(ModeSwitchesOrientation());
 1f6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 1fa:	0e 94 be 01 	call	0x37c	; 0x37c <DirectionPressDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 1fe:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 202:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DirectionReleaseUp>
 206:	08 95       	ret
	}
	else if ( (tempDownState == 0) && (tempUpState > 0) )
	{
		DirectionPressDown(ModeSwitchesOrientation());
 208:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 20c:	0e 94 be 01 	call	0x37c	; 0x37c <DirectionPressDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 210:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 214:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DirectionReleaseUp>
 218:	08 95       	ret
	}
	else if ( (tempDownState > 0) && (tempUpState == 0) )
 21a:	61 11       	cpse	r22, r1
 21c:	09 c0       	rjmp	.+18     	; 0x230 <CleanerYDown+0x42>
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 21e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 222:	0e 94 ca 01 	call	0x394	; 0x394 <DirectionReleaseDown>
		DirectionPressUp(ModeSwitchesOrientation());
 226:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 22a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DirectionPressUp>
 22e:	08 95       	ret
	}
	else
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 230:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 234:	0e 94 ca 01 	call	0x394	; 0x394 <DirectionReleaseDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 238:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 23c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DirectionReleaseUp>
 240:	08 95       	ret

00000242 <CleanerYUp>:
}

void CleanerYUp(uint8_t tempDownState, uint8_t tempUpState)
{
	// Down and Up = Up
	if ( (tempDownState == 0) && (tempUpState == 0) )
 242:	81 11       	cpse	r24, r1
 244:	14 c0       	rjmp	.+40     	; 0x26e <CleanerYUp+0x2c>
 246:	61 11       	cpse	r22, r1
 248:	09 c0       	rjmp	.+18     	; 0x25c <CleanerYUp+0x1a>
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 24a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 24e:	0e 94 ca 01 	call	0x394	; 0x394 <DirectionReleaseDown>
		DirectionPressUp(ModeSwitchesOrientation());
 252:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 256:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DirectionPressUp>
 25a:	08 95       	ret
	}
	else if ( (tempDownState == 0) && (tempUpState > 0) )
	{
		DirectionPressDown(ModeSwitchesOrientation());
 25c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 260:	0e 94 be 01 	call	0x37c	; 0x37c <DirectionPressDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 264:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 268:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DirectionReleaseUp>
 26c:	08 95       	ret
	}
	else if ( (tempDownState > 0) && (tempUpState == 0) )
 26e:	61 11       	cpse	r22, r1
 270:	09 c0       	rjmp	.+18     	; 0x284 <CleanerYUp+0x42>
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 272:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 276:	0e 94 ca 01 	call	0x394	; 0x394 <DirectionReleaseDown>
		DirectionPressUp(ModeSwitchesOrientation());
 27a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 27e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DirectionPressUp>
 282:	08 95       	ret
	}
	else
	{
		DirectionReleaseDown(ModeSwitchesOrientation());
 284:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 288:	0e 94 ca 01 	call	0x394	; 0x394 <DirectionReleaseDown>
		DirectionReleaseUp(ModeSwitchesOrientation());
 28c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ModeSwitchesOrientation>
 290:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DirectionReleaseUp>
 294:	08 95       	ret

00000296 <CleanerYLastInput>:
	}
}

void CleanerYLastInput(uint8_t tempDownState, uint8_t tempUpState)
{
 296:	08 95       	ret

00000298 <ModeSwitchesX>:
	{
		// Mode code for preset button selection
		modeCode = 1;
	}
	return modeCode;
}
 298:	37 9b       	sbis	0x06, 7	; 6
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <ModeSwitchesX+0x8>
 29c:	35 99       	sbic	0x06, 5	; 6
 29e:	0a c0       	rjmp	.+20     	; 0x2b4 <ModeSwitchesX+0x1c>
 2a0:	37 9b       	sbis	0x06, 7	; 6
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <ModeSwitchesX+0x10>
 2a4:	35 9b       	sbis	0x06, 5	; 6
 2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <ModeSwitchesX+0x20>
 2a8:	37 99       	sbic	0x06, 7	; 6
 2aa:	08 c0       	rjmp	.+16     	; 0x2bc <ModeSwitchesX+0x24>
 2ac:	35 99       	sbic	0x06, 5	; 6
 2ae:	08 c0       	rjmp	.+16     	; 0x2c0 <ModeSwitchesX+0x28>
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	08 95       	ret
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	08 95       	ret
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	08 95       	ret
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	08 95       	ret

000002c4 <ModeSwitchesY>:
 2c4:	36 9b       	sbis	0x06, 6	; 6
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <ModeSwitchesY+0x8>
 2c8:	34 99       	sbic	0x06, 4	; 6
 2ca:	0a c0       	rjmp	.+20     	; 0x2e0 <ModeSwitchesY+0x1c>
 2cc:	36 9b       	sbis	0x06, 6	; 6
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <ModeSwitchesY+0x10>
 2d0:	34 9b       	sbis	0x06, 4	; 6
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <ModeSwitchesY+0x20>
 2d4:	36 99       	sbic	0x06, 6	; 6
 2d6:	08 c0       	rjmp	.+16     	; 0x2e8 <ModeSwitchesY+0x24>
 2d8:	34 99       	sbic	0x06, 4	; 6
 2da:	08 c0       	rjmp	.+16     	; 0x2ec <ModeSwitchesY+0x28>
 2dc:	83 e0       	ldi	r24, 0x03	; 3
 2de:	08 95       	ret
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	08 95       	ret
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	08 95       	ret
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	08 95       	ret

000002f0 <ModeSwitchesOrientation>:
// PROBLEM CHILD
uint8_t ModeSwitchesOrientation()
{
	// Decide mode for default OEM controller
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() > 0) )
 2f0:	49 9b       	sbis	0x09, 1	; 9
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <ModeSwitchesOrientation+0x8>
 2f4:	4a 99       	sbic	0x09, 2	; 9
 2f6:	0a c0       	rjmp	.+20     	; 0x30c <ModeSwitchesOrientation+0x1c>
	{
		// Mode code for G  R  L  U  D on JST connector
		modeCode = 0;
	}
	else if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() == 0) )
 2f8:	49 9b       	sbis	0x09, 1	; 9
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <ModeSwitchesOrientation+0x10>
 2fc:	4a 9b       	sbis	0x09, 2	; 9
 2fe:	08 c0       	rjmp	.+16     	; 0x310 <ModeSwitchesOrientation+0x20>
	{
		// Mode code for G  L  R  D  U on JST connector
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip2Sw1() == 0) && (ModeSwitchesReadDip2Sw2() > 0) )
 300:	49 99       	sbic	0x09, 1	; 9
 302:	08 c0       	rjmp	.+16     	; 0x314 <ModeSwitchesOrientation+0x24>
 304:	4a 99       	sbic	0x09, 2	; 9
 306:	08 c0       	rjmp	.+16     	; 0x318 <ModeSwitchesOrientation+0x28>
		modeCode = 2;
	}
	else
	{
		// Mode code for future orientation
		modeCode = 3;
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	08 95       	ret
	// Decide mode for default OEM controller
	uint8_t modeCode = 0;
	if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() > 0) )
	{
		// Mode code for G  R  L  U  D on JST connector
		modeCode = 0;
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	08 95       	ret
	}
	else if ( (ModeSwitchesReadDip2Sw1() > 0) && (ModeSwitchesReadDip2Sw2() == 0) )
	{
		// Mode code for G  L  R  D  U on JST connector
		modeCode = 1;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	08 95       	ret
		modeCode = 2;
	}
	else
	{
		// Mode code for future orientation
		modeCode = 3;
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	08 95       	ret
		modeCode = 1;
	}
	else if ( (ModeSwitchesReadDip2Sw1() == 0) && (ModeSwitchesReadDip2Sw2() > 0) )
	{
		// Mode code for G  R  U  L  D on JST connector
		modeCode = 2;
 318:	82 e0       	ldi	r24, 0x02	; 2
		// Mode code for future orientation
		modeCode = 3;
	}
	
	return modeCode;
}
 31a:	08 95       	ret

0000031c <DirectionPressLeft>:

// Setting Outputs
void DirectionPressLeft(uint8_t tempOrientation)
{
	// Press left on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 31c:	81 11       	cpse	r24, r1
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DirectionPressLeft+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 320:	5c 98       	cbi	0x0b, 4	; 11
 322:	08 95       	ret
	}
	else if(tempOrientation == 1)
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	11 f4       	brne	.+4      	; 0x32c <DirectionPressLeft+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 328:	5b 98       	cbi	0x0b, 3	; 11
 32a:	08 95       	ret
		
	}
	else if(tempOrientation == 2)
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	09 f4       	brne	.+2      	; 0x332 <DirectionPressLeft+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 330:	5e 98       	cbi	0x0b, 6	; 11
 332:	08 95       	ret

00000334 <DirectionReleaseLeft>:
}

void DirectionReleaseLeft(uint8_t tempOrientation)
{
	// Release left on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 334:	81 11       	cpse	r24, r1
 336:	02 c0       	rjmp	.+4      	; 0x33c <DirectionReleaseLeft+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD |= (1 << DIRECTION_SW2_CLEAN);
 338:	5c 9a       	sbi	0x0b, 4	; 11
 33a:	08 95       	ret
	}
	else if(tempOrientation == 1)
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	11 f4       	brne	.+4      	; 0x344 <DirectionReleaseLeft+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD |= (1 << DIRECTION_SW1_CLEAN);
 340:	5b 9a       	sbi	0x0b, 3	; 11
 342:	08 95       	ret
	}
	else if(tempOrientation == 2)
 344:	82 30       	cpi	r24, 0x02	; 2
 346:	09 f4       	brne	.+2      	; 0x34a <DirectionReleaseLeft+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD |= (1 << DIRECTION_SW4_CLEAN);
 348:	5e 9a       	sbi	0x0b, 6	; 11
 34a:	08 95       	ret

0000034c <DirectionPressRight>:
}

void DirectionPressRight(uint8_t tempOrientation)
{
	// Press right on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 34c:	81 11       	cpse	r24, r1
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DirectionPressRight+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 350:	5b 98       	cbi	0x0b, 3	; 11
 352:	08 95       	ret
	}
	else if(tempOrientation == 1)
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	11 f4       	brne	.+4      	; 0x35c <DirectionPressRight+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD &= ~(1 << DIRECTION_SW2_CLEAN);
 358:	5c 98       	cbi	0x0b, 4	; 11
 35a:	08 95       	ret
		
	}
	else if(tempOrientation == 2)
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	09 f4       	brne	.+2      	; 0x362 <DirectionPressRight+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW1_CLEAN);
 360:	5b 98       	cbi	0x0b, 3	; 11
 362:	08 95       	ret

00000364 <DirectionReleaseRight>:
}

void DirectionReleaseRight(uint8_t tempOrientation)
{
	// Release right on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 364:	81 11       	cpse	r24, r1
 366:	02 c0       	rjmp	.+4      	; 0x36c <DirectionReleaseRight+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD |= (1 << DIRECTION_SW1_CLEAN);
 368:	5b 9a       	sbi	0x0b, 3	; 11
 36a:	08 95       	ret
	}
	else if(tempOrientation == 1)
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	11 f4       	brne	.+4      	; 0x374 <DirectionReleaseRight+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD |= (1 << DIRECTION_SW2_CLEAN);
 370:	5c 9a       	sbi	0x0b, 4	; 11
 372:	08 95       	ret
	}
	else if(tempOrientation == 2)
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	09 f4       	brne	.+2      	; 0x37a <DirectionReleaseRight+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD |= (1 << DIRECTION_SW1_CLEAN);
 378:	5b 9a       	sbi	0x0b, 3	; 11
 37a:	08 95       	ret

0000037c <DirectionPressDown>:
}

void DirectionPressDown(uint8_t tempOrientation)
{
	// Press down on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 37c:	81 11       	cpse	r24, r1
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DirectionPressDown+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 380:	5e 98       	cbi	0x0b, 6	; 11
 382:	08 95       	ret
	}
	else if(tempOrientation == 1)
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	11 f4       	brne	.+4      	; 0x38c <DirectionPressDown+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 388:	5d 98       	cbi	0x0b, 5	; 11
 38a:	08 95       	ret
	}
	else if(tempOrientation == 2)
 38c:	82 30       	cpi	r24, 0x02	; 2
 38e:	09 f4       	brne	.+2      	; 0x392 <DirectionPressDown+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 390:	5e 98       	cbi	0x0b, 6	; 11
 392:	08 95       	ret

00000394 <DirectionReleaseDown>:
}

void DirectionReleaseDown(uint8_t tempOrientation)
{
	// Release down on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 394:	81 11       	cpse	r24, r1
 396:	02 c0       	rjmp	.+4      	; 0x39c <DirectionReleaseDown+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD |= (1 << DIRECTION_SW4_CLEAN);
 398:	5e 9a       	sbi	0x0b, 6	; 11
 39a:	08 95       	ret
	}
	else if(tempOrientation == 1)
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	11 f4       	brne	.+4      	; 0x3a4 <DirectionReleaseDown+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD |= (1 << DIRECTION_SW3_CLEAN);
 3a0:	5d 9a       	sbi	0x0b, 5	; 11
 3a2:	08 95       	ret
	}
	else if(tempOrientation == 2)
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	09 f4       	brne	.+2      	; 0x3aa <DirectionReleaseDown+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD |= (1 << DIRECTION_SW4_CLEAN);
 3a8:	5e 9a       	sbi	0x0b, 6	; 11
 3aa:	08 95       	ret

000003ac <DirectionPressUp>:
}

void DirectionPressUp(uint8_t tempOrientation)
{
	// Press up on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 3ac:	81 11       	cpse	r24, r1
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DirectionPressUp+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW3_CLEAN);
 3b0:	5d 98       	cbi	0x0b, 5	; 11
 3b2:	08 95       	ret
	}
	else if(tempOrientation == 1)
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	11 f4       	brne	.+4      	; 0x3bc <DirectionPressUp+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 3b8:	5e 98       	cbi	0x0b, 6	; 11
 3ba:	08 95       	ret
		
	}
	else if(tempOrientation == 2)
 3bc:	82 30       	cpi	r24, 0x02	; 2
 3be:	09 f4       	brne	.+2      	; 0x3c2 <DirectionPressUp+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD &= ~(1 << DIRECTION_SW4_CLEAN);
 3c0:	5e 98       	cbi	0x0b, 6	; 11
 3c2:	08 95       	ret

000003c4 <DirectionReleaseUp>:
}

void DirectionReleaseUp(uint8_t tempOrientation)
{
	// Release left on correct pin (OEM controller dependent)
	if(tempOrientation == 0)
 3c4:	81 11       	cpse	r24, r1
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DirectionReleaseUp+0x8>
	{
		// G  R  L  U  D on JST connector
		PORTD |= (1 << DIRECTION_SW3_CLEAN);
 3c8:	5d 9a       	sbi	0x0b, 5	; 11
 3ca:	08 95       	ret
	}
	else if(tempOrientation == 1)
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <DirectionReleaseUp+0x10>
	{
		// G  L  R  D  U on JST connector
		PORTD |= (1 << DIRECTION_SW4_CLEAN);
 3d0:	5e 9a       	sbi	0x0b, 6	; 11
 3d2:	08 95       	ret
		
	}
	else if(tempOrientation == 2)
 3d4:	82 30       	cpi	r24, 0x02	; 2
 3d6:	09 f4       	brne	.+2      	; 0x3da <DirectionReleaseUp+0x16>
	{
		// G  R  U  L  D on JST connector
		PORTD |= (1 << DIRECTION_SW2_CLEAN);
 3d8:	5c 9a       	sbi	0x0b, 4	; 11
 3da:	08 95       	ret

000003dc <DirectionGetLeftState>:
}

// Reading Inputs
uint8_t DirectionGetLeftState()
{
	return (PINB & (1 << DIRECTION_LEFT_BUTTON));
 3dc:	83 b1       	in	r24, 0x03	; 3
}
 3de:	82 70       	andi	r24, 0x02	; 2
 3e0:	08 95       	ret

000003e2 <DirectionGetRightState>:

uint8_t DirectionGetRightState()
{
	return (PINB & (1 << DIRECTION_RIGHT_BUTTON));
 3e2:	83 b1       	in	r24, 0x03	; 3
}
 3e4:	81 70       	andi	r24, 0x01	; 1
 3e6:	08 95       	ret

000003e8 <DirectionGetUpState>:

uint8_t DirectionGetUpState()
{
	return (PINB & (1 << DIRECTION_UP_BUTTON));
 3e8:	83 b1       	in	r24, 0x03	; 3
}
 3ea:	88 70       	andi	r24, 0x08	; 8
 3ec:	08 95       	ret

000003ee <DirectionGetDownState>:

uint8_t DirectionGetDownState()
{
	return (PINB & (1 << DIRECTION_DOWN_BUTTON));
 3ee:	83 b1       	in	r24, 0x03	; 3
 3f0:	84 70       	andi	r24, 0x04	; 4
 3f2:	08 95       	ret

000003f4 <MainCleanerX>:
	}
	return(0);
}

void MainCleanerX(uint8_t tempLeftState, uint8_t tempRightState)
{
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	c8 2f       	mov	r28, r24
 3fa:	d6 2f       	mov	r29, r22
	// Cleaning for x axis
	if(ModeSwitchesX() == 0)
 3fc:	0e 94 4c 01 	call	0x298	; 0x298 <ModeSwitchesX>
 400:	81 11       	cpse	r24, r1
 402:	05 c0       	rjmp	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{
		CleanerXNeutral(tempLeftState, tempRightState);
 404:	6d 2f       	mov	r22, r29
 406:	8c 2f       	mov	r24, r28
 408:	0e 94 4e 00 	call	0x9c	; 0x9c <CleanerXNeutral>
 40c:	16 c0       	rjmp	.+44     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	}
	else if(ModeSwitchesX() == 1)
 40e:	0e 94 4c 01 	call	0x298	; 0x298 <ModeSwitchesX>
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	29 f4       	brne	.+10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	{
		CleanerXLeft(tempLeftState, tempRightState);
 416:	6d 2f       	mov	r22, r29
 418:	8c 2f       	mov	r24, r28
 41a:	0e 94 78 00 	call	0xf0	; 0xf0 <CleanerXLeft>
 41e:	0d c0       	rjmp	.+26     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	}
	else if(ModeSwitchesX() == 2)
 420:	0e 94 4c 01 	call	0x298	; 0x298 <ModeSwitchesX>
 424:	82 30       	cpi	r24, 0x02	; 2
 426:	29 f4       	brne	.+10     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	{
		CleanerXRight(tempLeftState, tempRightState);
 428:	6d 2f       	mov	r22, r29
 42a:	8c 2f       	mov	r24, r28
 42c:	0e 94 a2 00 	call	0x144	; 0x144 <CleanerXRight>
 430:	04 c0       	rjmp	.+8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	}
	else
	{
		CleanerXLastInput(tempLeftState, tempRightState);
 432:	6d 2f       	mov	r22, r29
 434:	8c 2f       	mov	r24, r28
 436:	0e 94 cc 00 	call	0x198	; 0x198 <CleanerXLastInput>
	}
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <MainCleanerY>:

void MainCleanerY(uint8_t tempDownState, uint8_t tempUpState)
{
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	c8 2f       	mov	r28, r24
 446:	d6 2f       	mov	r29, r22
	// Cleaning for y axis
	if(ModeSwitchesY() == 0)
 448:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ModeSwitchesY>
 44c:	81 11       	cpse	r24, r1
 44e:	05 c0       	rjmp	.+10     	; 0x45a <MainCleanerY+0x1a>
	{
		CleanerYNeutral(tempDownState, tempUpState);
 450:	6d 2f       	mov	r22, r29
 452:	8c 2f       	mov	r24, r28
 454:	0e 94 cd 00 	call	0x19a	; 0x19a <CleanerYNeutral>
 458:	16 c0       	rjmp	.+44     	; 0x486 <MainCleanerY+0x46>
	}
	else if(ModeSwitchesY() == 1)
 45a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ModeSwitchesY>
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	29 f4       	brne	.+10     	; 0x46c <MainCleanerY+0x2c>
	{
		CleanerYDown(tempDownState, tempUpState);
 462:	6d 2f       	mov	r22, r29
 464:	8c 2f       	mov	r24, r28
 466:	0e 94 f7 00 	call	0x1ee	; 0x1ee <CleanerYDown>
 46a:	0d c0       	rjmp	.+26     	; 0x486 <MainCleanerY+0x46>
	}
	else if(ModeSwitchesY() == 2)
 46c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ModeSwitchesY>
 470:	82 30       	cpi	r24, 0x02	; 2
 472:	29 f4       	brne	.+10     	; 0x47e <MainCleanerY+0x3e>
	{
		CleanerYUp(tempDownState, tempUpState);
 474:	6d 2f       	mov	r22, r29
 476:	8c 2f       	mov	r24, r28
 478:	0e 94 21 01 	call	0x242	; 0x242 <CleanerYUp>
 47c:	04 c0       	rjmp	.+8      	; 0x486 <MainCleanerY+0x46>
	}
	else
	{
		CleanerYLastInput(tempDownState, tempUpState);
 47e:	6d 2f       	mov	r22, r29
 480:	8c 2f       	mov	r24, r28
 482:	0e 94 4b 01 	call	0x296	; 0x296 <CleanerYLastInput>
	}
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <MainInitialize>:

void MainInitialize()
{
	// Set all ports to be configured as inputs
	DDRB = 0b00000000;
 48c:	14 b8       	out	0x04, r1	; 4
	DDRC = 0b00000000;
 48e:	17 b8       	out	0x07, r1	; 7
	DDRD = 0b00000000;
 490:	1a b8       	out	0x0a, r1	; 10

	// Disable all internal pull-up resistors
	PORTB = 0b00000000;
 492:	15 b8       	out	0x05, r1	; 5
	PORTC = 0b00000000;
 494:	18 b8       	out	0x08, r1	; 8
	PORTD = 0b00000000;
 496:	1b b8       	out	0x0b, r1	; 11

	// Enable necessary internal pull-up resistors
	PORTB |= (1 << MAIN_RIGHT_BUTTON_PULLUP);
 498:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1 << MAIN_LEFT_BUTTON_PULLUP);
 49a:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1 << MAIN_DOWN_BUTTON_PULLUP);
 49c:	2a 9a       	sbi	0x05, 2	; 5
	PORTB |= (1 << MAIN_UP_BUTTON_PULLUP);
 49e:	2b 9a       	sbi	0x05, 3	; 5
	PORTC |= (1 << MAIN_DIP5_SW1_PULLUP);
 4a0:	47 9a       	sbi	0x08, 7	; 8
	PORTC |= (1 << MAIN_DIP5_SW2_PULLUP);
 4a2:	45 9a       	sbi	0x08, 5	; 8
	PORTC |= (1 << MAIN_DIP5_SW3_PULLUP);
 4a4:	46 9a       	sbi	0x08, 6	; 8
	PORTC |= (1 << MAIN_DIP5_SW4_PULLUP);
 4a6:	44 9a       	sbi	0x08, 4	; 8
	PORTC |= (1 << MAIN_DIP5_SW5_PULLUP);
 4a8:	42 9a       	sbi	0x08, 2	; 8
	PORTD |= (1 << MAIN_DIP2_SW1_PULLUP);
 4aa:	59 9a       	sbi	0x0b, 1	; 11
	PORTD |= (1 << MAIN_DIP2_SW2_PULLUP);
 4ac:	5a 9a       	sbi	0x0b, 2	; 11
	PORTB |= (1 << MAIN_PRESET_BUTTON_PULLUP);
 4ae:	2f 9a       	sbi	0x05, 7	; 5

	// Set specific port bits to be configured as outputs
	DDRD = DDRD | (1 << DIRECTION_SW1_CLEAN);
 4b0:	53 9a       	sbi	0x0a, 3	; 10
	DDRD = DDRD | (1 << DIRECTION_SW2_CLEAN);
 4b2:	54 9a       	sbi	0x0a, 4	; 10
	DDRD = DDRD | (1 << DIRECTION_SW3_CLEAN);
 4b4:	55 9a       	sbi	0x0a, 5	; 10
	DDRD = DDRD | (1 << DIRECTION_SW4_CLEAN);
 4b6:	56 9a       	sbi	0x0a, 6	; 10

	// Default Button Positions
	DirectionReleaseLeft(0);
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 9a 01 	call	0x334	; 0x334 <DirectionReleaseLeft>
	DirectionReleaseRight(0);
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	0e 94 b2 01 	call	0x364	; 0x364 <DirectionReleaseRight>
	DirectionReleaseDown(0);
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 ca 01 	call	0x394	; 0x394 <DirectionReleaseDown>
	DirectionReleaseUp(0);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DirectionReleaseUp>
 4d0:	08 95       	ret

000004d2 <main>:
#include <util/delay.h>

int main(void)
{	
	// Setup I/O	
	MainInitialize();
 4d2:	0e 94 46 02 	call	0x48c	; 0x48c <MainInitialize>
	
	// Main program loop
    while(1) 
    {
		// Clean x axis
		MainCleanerX(DirectionGetLeftState(), DirectionGetRightState());
 4d6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DirectionGetRightState>
 4da:	c8 2f       	mov	r28, r24
 4dc:	0e 94 ee 01 	call	0x3dc	; 0x3dc <DirectionGetLeftState>
 4e0:	6c 2f       	mov	r22, r28
 4e2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <MainCleanerX>
		// Note: 
		// Would like to implement local and remote mode by doing: MainCleanerX(DirectionGetLeftState(), DirectionGetRightState(), ModeSwitchesRemote());
		// Or something like that!
		
		// Clean y axis
		MainCleanerY(DirectionGetDownState(), DirectionGetUpState());
 4e6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DirectionGetUpState>
 4ea:	c8 2f       	mov	r28, r24
 4ec:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DirectionGetDownState>
 4f0:	6c 2f       	mov	r22, r28
 4f2:	0e 94 20 02 	call	0x440	; 0x440 <MainCleanerY>
 4f6:	ef cf       	rjmp	.-34     	; 0x4d6 <main+0x4>

000004f8 <_exit>:
 4f8:	f8 94       	cli

000004fa <__stop_program>:
 4fa:	ff cf       	rjmp	.-2      	; 0x4fa <__stop_program>
